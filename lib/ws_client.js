'use strict';

const WS = require('ws');
const Debug = require('debug');
const _isArray = require('lodash/isArray');
const _isEmpty = require('lodash/isEmpty');

const send = require('./util/ws/send');

module.exports = class WSClient {
  constructor({
    url,
    debugName,
    msgHandlers,
    reconnectIntervalMS = 5 * 1000 })
  {
    this._url = url;
    this._msgHandlers = msgHandlers;

    this._ws = null;
    this._preOpenMessageBuffer = [];
    this.d = Debug(`bfx:hf:server:ws-client:${debugName}`);

    this.openConnection();
    setInterval(this.watchdog.bind(this), reconnectIntervalMS);
  }

  send(msg) {
    if (!this._ws || this._ws.readyState !== 1) {
      this._preOpenMessageBuffer.push(msg);
      return;
    }

    send(this._ws, msg);
  }

  watchdog() {
    if (this._ws && this._ws.readyState < 2) {
      return;
    }

    this.openConnection();
  }

  close() {
    if (this._ws) {
      this._ws.close();
    }
  }

  isOpen() {
    return this._ws && this._ws.readyState === WS.OPEN;
  }

  openConnection() {
    if (this._ws) {
      this._ws.close();
    }

    this.d('connecting to %s', this._url);

    this._ws = new WS(this._url);
    this._ws.on('open', this.onWSOpen.bind(this));
    this._ws.on('close', this.onWSClose.bind(this));
    this._ws.on('message', this.onWSMessage.bind(this));
    this._ws.on('error', this.onWSError.bind(this));
  }

  onWSOpen() {
    this.d('connected');

    if (_isEmpty(this._preOpenMessageBuffer)) {
      return;
    }

    this.d('flushing %d pre-open messages', this._preOpenMessageBuffer.length);

    this._preOpenMessageBuffer.forEach(msg => {
      send(this._ws, msg);
    });

    this._preOpenMessageBuffer = [];
  }

  onWSClose() {
    this.d('disconnected');
  }

  onWSError(err) {
    this.d('connection error: %s', err.message);
  }

  onWSMessage(msgJSON) {
    let msg;

    try {
      msg = JSON.parse(msgJSON);
    } catch (e) {
      return this.d('recv malformed message: %s', msgJSON);
    }

    if (!_isArray(msg)) {
      return this.d('recv non-array message: %j', msg);
    }

    this.handleWSMessage(msg);
  }

  handleWSMessage(msg) {
    const [type] = msg;
    const handler = this._msgHandlers[type];

    if (handler) {
      handler(this, msg);
    } else if (this._msgHandlers._) {
      this._msgHandlers._(this, msg);
    }
  }};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy93c19jbGllbnQuanMiXSwibmFtZXMiOlsiV1MiLCJyZXF1aXJlIiwiRGVidWciLCJfaXNBcnJheSIsIl9pc0VtcHR5Iiwic2VuZCIsIm1vZHVsZSIsImV4cG9ydHMiLCJXU0NsaWVudCIsImNvbnN0cnVjdG9yIiwidXJsIiwiZGVidWdOYW1lIiwibXNnSGFuZGxlcnMiLCJyZWNvbm5lY3RJbnRlcnZhbE1TIiwiX3VybCIsIl9tc2dIYW5kbGVycyIsIl93cyIsIl9wcmVPcGVuTWVzc2FnZUJ1ZmZlciIsImQiLCJvcGVuQ29ubmVjdGlvbiIsInNldEludGVydmFsIiwid2F0Y2hkb2ciLCJiaW5kIiwibXNnIiwicmVhZHlTdGF0ZSIsInB1c2giLCJjbG9zZSIsImlzT3BlbiIsIk9QRU4iLCJvbiIsIm9uV1NPcGVuIiwib25XU0Nsb3NlIiwib25XU01lc3NhZ2UiLCJvbldTRXJyb3IiLCJsZW5ndGgiLCJmb3JFYWNoIiwiZXJyIiwibWVzc2FnZSIsIm1zZ0pTT04iLCJKU09OIiwicGFyc2UiLCJlIiwiaGFuZGxlV1NNZXNzYWdlIiwidHlwZSIsImhhbmRsZXIiLCJfIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxNQUFNQSxFQUFFLEdBQUdDLE9BQU8sQ0FBQyxJQUFELENBQWxCO0FBQ0EsTUFBTUMsS0FBSyxHQUFHRCxPQUFPLENBQUMsT0FBRCxDQUFyQjtBQUNBLE1BQU1FLFFBQVEsR0FBR0YsT0FBTyxDQUFDLGdCQUFELENBQXhCO0FBQ0EsTUFBTUcsUUFBUSxHQUFHSCxPQUFPLENBQUMsZ0JBQUQsQ0FBeEI7O0FBRUEsTUFBTUksSUFBSSxHQUFHSixPQUFPLENBQUMsZ0JBQUQsQ0FBcEI7O0FBRUFLLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixNQUFNQyxRQUFOLENBQWU7QUFDOUJDLEVBQUFBLFdBQVcsQ0FBRTtBQUNYQyxJQUFBQSxHQURXO0FBRVhDLElBQUFBLFNBRlc7QUFHWEMsSUFBQUEsV0FIVztBQUlYQyxJQUFBQSxtQkFBbUIsR0FBRyxJ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TCxFQUFBQSxXQUFXLENBQUVNLE9BQUYsRUFBVztBQUNwQixRQUFJZixHQUFKOztBQUVBLFFBQUk7QUFDRkEsTUFBQUEsR0FBRyxHQUFHZ0IsSUFBSSxDQUFDQyxLQUFMLENBQVdGLE9BQVgsQ0FBTjtBQUNELEtBRkQsQ0FFRSxPQUFPRyxDQUFQLEVBQVU7QUFDVixhQUFPLEtBQUt2QixDQUFMLENBQU8sNEJBQVAsRUFBcUNvQixPQUFyQyxDQUFQO0FBQ0Q7O0FBRUQsUUFBSSxDQUFDbkMsUUFBUSxDQUFDb0IsR0FBRCxDQUFiLEVBQW9CO0FBQ2xCLGFBQU8sS0FBS0wsQ0FBTCxDQUFPLDRCQUFQLEVBQXFDSyxHQUFyQyxDQUFQO0FBQ0Q7O0FBRUQsU0FBS21CLGVBQUwsQ0FBcUJuQixHQUFyQjtBQUNEOztBQUVEbUIsRUFBQUEsZUFBZSxDQUFFbkIsR0FBRixFQUFPO0FBQ3BCLFVBQU0sQ0FBQ29CLElBQUQsSUFBU3BCLEdBQWY7QUFDQSxVQUFNcUIsT0FBTyxHQUFHLEtBQUs3QixZQUFMLENBQWtCNEIsSUFBbEIsQ0FBaEI7O0FBRUEsUUFBSUMsT0FBSixFQUFhO0FBQ1hBLE1BQUFBLE9BQU8sQ0FBQyxJQUFELEVBQU9yQixHQUFQLENBQVA7QUFDRCxLQUZELE1BRU8sSUFBSSxLQUFLUixZQUFMLENBQWtCOEIsQ0FBdEIsRUFBeUI7QUFDOUIsV0FBSzlCLFlBQUwsQ0FBa0I4QixDQUFsQixDQUFvQixJQUFwQixFQUEwQnRCLEdBQTFCO0FBQ0Q7QUFDRixHQTVHNkIsQ0FBaEMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgV1MgPSByZXF1aXJlKCd3cycpXG5jb25zdCBEZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJylcbmNvbnN0IF9pc0FycmF5ID0gcmVxdWlyZSgnbG9kYXNoL2lzQXJyYXknKVxuY29uc3QgX2lzRW1wdHkgPSByZXF1aXJlKCdsb2Rhc2gvaXNFbXB0eScpXG5cbmNvbnN0IHNlbmQgPSByZXF1aXJlKCcuL3V0aWwvd3Mvc2VuZCcpXG5cbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgV1NDbGllbnQge1xuICBjb25zdHJ1Y3RvciAoe1xuICAgIHVybCxcbiAgICBkZWJ1Z05hbWUsXG4gICAgbXNnSGFuZGxlcnMsXG4gICAgcmVjb25uZWN0SW50ZXJ2YWxNUyA9IDUgKiAxMDAwXG4gIH0pIHtcbiAgICB0aGlzLl91cmwgPSB1cmxcbiAgICB0aGlzLl9tc2dIYW5kbGVycyA9IG1zZ0hhbmRsZXJzXG5cbiAgICB0aGlzLl93cyA9IG51bGxcbiAgICB0aGlzLl9wcmVPcGVuTWVzc2FnZUJ1ZmZlciA9IFtdXG4gICAgdGhpcy5kID0gRGVidWcoYGJmeDpoZjpzZXJ2ZXI6d3MtY2xpZW50OiR7ZGVidWdOYW1lfWApXG5cbiAgICB0aGlzLm9wZW5Db25uZWN0aW9uKClcbiAgICBzZXRJbnRlcnZhbCh0aGlzLndhdGNoZG9nLmJpbmQodGhpcyksIHJlY29ubmVjdEludGVydmFsTVMpXG4gIH1cblxuICBzZW5kIChtc2cpIHtcbiAgICBpZiAoIXRoaXMuX3dzIHx8IHRoaXMuX3dzLnJlYWR5U3RhdGUgIT09IDEpIHtcbiAgICAgIHRoaXMuX3ByZU9wZW5NZXNzYWdlQnVmZmVyLnB1c2gobXNnKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgc2VuZCh0aGlzLl93cywgbXNnKVxuICB9XG5cbiAgd2F0Y2hkb2cgKCkge1xuICAgIGlmICh0aGlzLl93cyAmJiB0aGlzLl93cy5yZWFkeVN0YXRlIDwgMikge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdGhpcy5vcGVuQ29ubmVjdGlvbigpXG4gIH1cblxuICBjbG9zZSAoKSB7XG4gICAgaWYgKHRoaXMuX3dzKSB7XG4gICAgICB0aGlzLl93cy5jbG9zZSgpXG4gICAgfVxuICB9XG5cbiAgaXNPcGVuICgpIHtcbiAgICByZXR1cm4gdGhpcy5fd3MgJiYgdGhpcy5fd3MucmVhZHlTdGF0ZSA9PT0gV1MuT1BFTlxuICB9XG5cbiAgb3BlbkNvbm5lY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLl93cykge1xuICAgICAgdGhpcy5fd3MuY2xvc2UoKVxuICAgIH1cblxuICAgIHRoaXMuZCgnY29ubmVjdGluZyB0byAlcycsIHRoaXMuX3VybClcblxuICAgIHRoaXMuX3dzID0gbmV3IFdTKHRoaXMuX3VybClcbiAgICB0aGlzLl93cy5vbignb3BlbicsIHRoaXMub25XU09wZW4uYmluZCh0aGlzKSlcbiAgICB0aGlzLl93cy5vbignY2xvc2UnLCB0aGlzLm9uV1NDbG9zZS5iaW5kKHRoaXMpKVxuICAgIHRoaXMuX3dzLm9uKCdtZXNzYWdlJywgdGhpcy5vbldTTWVzc2FnZS5iaW5kKHRoaXMpKVxuICAgIHRoaXMuX3dzLm9uKCdlcnJvcicsIHRoaXMub25XU0Vycm9yLmJpbmQodGhpcykpXG4gIH1cblxuICBvbldTT3BlbiAoKSB7XG4gICAgdGhpcy5kKCdjb25uZWN0ZWQnKVxuXG4gICAgaWYgKF9pc0VtcHR5KHRoaXMuX3ByZU9wZW5NZXNzYWdlQnVmZmVyKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdGhpcy5kKCdmbHVzaGluZyAlZCBwcmUtb3BlbiBtZXNzYWdlcycsIHRoaXMuX3ByZU9wZW5NZXNzYWdlQnVmZmVyLmxlbmd0aClcblxuICAgIHRoaXMuX3ByZU9wZW5NZXNzYWdlQnVmZmVyLmZvckVhY2goKG1zZykgPT4ge1xuICAgICAgc2VuZCh0aGlzLl93cywgbXNnKVxuICAgIH0pXG5cbiAgICB0aGlzLl9wcmVPcGVuTWVzc2FnZUJ1ZmZlciA9IFtdXG4gIH1cblxuICBvbldTQ2xvc2UgKCkge1xuICAgIHRoaXMuZCgnZGlzY29ubmVjdGVkJylcbiAgfVxuXG4gIG9uV1NFcnJvciAoZXJyKSB7XG4gICAgdGhpcy5kKCdjb25uZWN0aW9uIGVycm9yOiAlcycsIGVyci5tZXNzYWdlKVxuICB9XG5cbiAgb25XU01lc3NhZ2UgKG1zZ0pTT04pIHtcbiAgICBsZXQgbXNnXG5cbiAgICB0cnkge1xuICAgICAgbXNnID0gSlNPTi5wYXJzZShtc2dKU09OKVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiB0aGlzLmQoJ3JlY3YgbWFsZm9ybWVkIG1lc3NhZ2U6ICVzJywgbXNnSlNPTilcbiAgICB9XG5cbiAgICBpZiAoIV9pc0FycmF5KG1zZykpIHtcbiAgICAgIHJldHVybiB0aGlzLmQoJ3JlY3Ygbm9uLWFycmF5IG1lc3NhZ2U6ICVqJywgbXNnKVxuICAgIH1cblxuICAgIHRoaXMuaGFuZGxlV1NNZXNzYWdlKG1zZylcbiAgfVxuXG4gIGhhbmRsZVdTTWVzc2FnZSAobXNnKSB7XG4gICAgY29uc3QgW3R5cGVdID0gbXNnXG4gICAgY29uc3QgaGFuZGxlciA9IHRoaXMuX21zZ0hhbmRsZXJzW3R5cGVdXG5cbiAgICBpZiAoaGFuZGxlcikge1xuICAgICAgaGFuZGxlcih0aGlzLCBtc2cpXG4gICAgfSBlbHNlIGlmICh0aGlzLl9tc2dIYW5kbGVycy5fKSB7XG4gICAgICB0aGlzLl9tc2dIYW5kbGVycy5fKHRoaXMsIG1zZylcbiAgICB9XG4gIH1cbn1cbiJdfQ==