'use strict';

const PI = require('p-iteration');
const debug = require('debug')('bfx:hf:server:sync-meta');

module.exports = async (db, exas) => {
  const { Market } = db;

  return PI.forEach(exas, async EXA => {
    const { id } = EXA;
    const exaClient = new EXA();

    debug('fetching market list for exa %s', id);
    const markets = await exaClient.getMarkets();
    debug('fetched %d markets for exa %s', markets.length, id);

    // remove markets before first so we dont duplicate
    await Market.rmAll();
    await Market.bulkInsert(markets.map(m => ({
      exchange: id,
      quote: m.q,
      base: m.b,
      wsID: m.w,
      restID: m.r,
      uiID: m.u,
      contexts: m.c })));

  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zeW5jX21ldGEuanMiXSwibmFtZXMiOlsiUEkiLCJyZXF1aXJlIiwiZGVidWciLCJtb2R1bGUiLCJleHBvcnRzIiwiZGIiLCJleGFzIiwiTWFya2V0IiwiZm9yRWFjaCIsIkVYQSIsImlkIiwiZXhhQ2xpZW50IiwibWFya2V0cyIsImdldE1hcmtldHMiLCJsZW5ndGgiLCJybUFsbCIsImJ1bGtJbnNlcnQiLCJtYXAiLCJtIiwiZXhjaGFuZ2UiLCJxdW90ZSIsInEiLCJiYXNlIiwiYiIsIndzSUQiLCJ3IiwicmVzdElEIiwiciIsInVpSUQiLCJ1IiwiY29udGV4dHMiLCJjIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxNQUFNQSxFQUFFLEdBQUdDLE9BQU8sQ0FBQyxhQUFELENBQWxCO0FBQ0EsTUFBTUMsS0FBSyxHQUFHRCxPQUFPLENBQUMsT0FBRCxDQUFQLENBQWlCLHlCQUFqQixDQUFkOztBQUVBRSxNQUFNLENBQUNDLE9BQVAsR0FBaUIsT0FBT0MsRUFBUCxFQUFXQyxJQUFYLEtBQW9CO0FBQ25DLFFBQU0sRUFBRUMsTUFBRixLQUFhRixFQUFuQjs7QUFFQSxTQUFPTCxFQUFFLENBQUNRLE9BQUgsQ0FBV0YsSUFBWCxFQUFpQixNQUFPRyxHQUFQLElBQWU7QUFDckMsVUFBTSxFQUFFQyxFQUFGLEtBQVNELEdBQWY7QUFDQSxVQUFNRSxTQUFTLEdBQUcsSUFBSUYsR0FBSixFQUFsQjs7QUFFQVAsSUFBQUEsS0FBSyxDQUFDLGlDQUFELEVBQW9DUSxFQUFwQyxDQUFMO0FBQ0EsVUFBTUUsT0FBTyxHQUFHLE1BQU1ELFNBQVMsQ0FBQ0UsVUFBVixFQUF0QjtBQUNBWCxJQUFBQSxLQUFLLENBQUMsK0JBQUQsRUFBa0NVLE9BQU8sQ0FBQ0UsTUFBMUMsRUFBa0RKLEVBQWxELENBQUw7O0FBRUE7QUFDQSxVQUFNSCxNQUFNLENBQUNRLEtBQVAsRUFBTjtBQUNBLFVBQU1SLE1BQU0sQ0FBQ1MsVUFBUCxDQUFrQkosT0FBTyxDQUFDSyxHQUFSLENBQVlDLENBQUMsS0FBSztBQUN4Q0MsTUFBQUEsUUFBUSxFQUFFVCxFQUQ4QjtBQUV4Q1UsTUFBQUEsS0FBSyxFQUFFRixDQUFDLENBQUNHLENBRitCO0FBR3hDQyxNQUFBQSxJQUFJLEVBQUVKLENBQUMsQ0FBQ0ssQ0FIZ0M7QUFJeENDLE1BQUFBLElBQUksRUFBRU4sQ0FBQyxDQUFDTyxDQUpnQztBQUt4Q0MsTUFBQUEsTUFBTSxFQUFFUixDQUFDLENBQUNTLENBTDhCO0FBTXhDQyxNQUFBQSxJQUFJLEVBQUVWLENBQUMsQ0FBQ1csQ0FOZ0M7QUFPeENDLE1BQUFBLFFBQVEsRUFBRVosQ0FBQyxDQUFDYSxDQVA0QixFQUFMLENBQWIsQ0FBbEIsQ0FBTjs7QUFTRCxHQW5CTSxDQUFQO0FBb0JELENBdkJEIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IFBJID0gcmVxdWlyZSgncC1pdGVyYXRpb24nKVxuY29uc3QgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdiZng6aGY6c2VydmVyOnN5bmMtbWV0YScpXG5cbm1vZHVsZS5leHBvcnRzID0gYXN5bmMgKGRiLCBleGFzKSA9PiB7XG4gIGNvbnN0IHsgTWFya2V0IH0gPSBkYlxuXG4gIHJldHVybiBQSS5mb3JFYWNoKGV4YXMsIGFzeW5jIChFWEEpID0+IHtcbiAgICBjb25zdCB7IGlkIH0gPSBFWEFcbiAgICBjb25zdCBleGFDbGllbnQgPSBuZXcgRVhBKClcblxuICAgIGRlYnVnKCdmZXRjaGluZyBtYXJrZXQgbGlzdCBmb3IgZXhhICVzJywgaWQpXG4gICAgY29uc3QgbWFya2V0cyA9IGF3YWl0IGV4YUNsaWVudC5nZXRNYXJrZXRzKClcbiAgICBkZWJ1ZygnZmV0Y2hlZCAlZCBtYXJrZXRzIGZvciBleGEgJXMnLCBtYXJrZXRzLmxlbmd0aCwgaWQpXG5cbiAgICAvLyByZW1vdmUgbWFya2V0cyBiZWZvcmUgZmlyc3Qgc28gd2UgZG9udCBkdXBsaWNhdGVcbiAgICBhd2FpdCBNYXJrZXQucm1BbGwoKVxuICAgIGF3YWl0IE1hcmtldC5idWxrSW5zZXJ0KG1hcmtldHMubWFwKG0gPT4gKHtcbiAgICAgIGV4Y2hhbmdlOiBpZCxcbiAgICAgIHF1b3RlOiBtLnEsXG4gICAgICBiYXNlOiBtLmIsXG4gICAgICB3c0lEOiBtLncsXG4gICAgICByZXN0SUQ6IG0ucixcbiAgICAgIHVpSUQ6IG0udSxcbiAgICAgIGNvbnRleHRzOiBtLmNcbiAgICB9KSkpXG4gIH0pXG59XG4iXX0=