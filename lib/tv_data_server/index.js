'use strict';

const cors = require('cors');
const http = require('http');
const Express = require('express');
const BodyParser = require('body-parser');
const _isFinite = require('lodash/isFinite');
const debug = require('debug')('bfx:hf:server:tv-data-server');
const fetchBitfinex = require('../db/query_candles/fetch_bitfinex');
const fetchBinance = require('../db/query_candles/fetch_binance');

const RESOLUTIONS_BITFINEX = require('./resolutions_bitfinex');
const RESOLUTIONS_BINANCE = require('./resolutions_binance');

module.exports = ({ port }) => {
  const app = Express();
  const server = http.createServer(app);

  app.use(cors());
  app.use(BodyParser.json({ type: 'application/json' }));
  app.use(BodyParser.urlencoded({ extended: true }));

  app.get('/', (req, res) => {
    res.json({ version: 1 });
  });

  app.post('/', async (req, res) => {
    const { exchange, symbol, resolution, from, to } = req.body;
    const parsedRes = resolution.length === 1 && !_isFinite(+resolution) ?
    `1${resolution}` :
    resolution;

    const start = from * 1000;
    const end = to * 1000;
    let candles = [];

    debug('recv candle req for %s %s @ %s', exchange, symbol, parsedRes);

    // TODO: add validation for resolution
    if (exchange === 'bitfinex') {
      const market = { r: `t${symbol}` };
      const tf = RESOLUTIONS_BITFINEX[parsedRes];
      candles = await fetchBitfinex({ market, tf, start, end });
    } else if (exchange === 'binance') {
      const market = { r: symbol };
      const tf = RESOLUTIONS_BINANCE[parsedRes];
      candles = await fetchBinance({ market, tf, start, end });
    }

    res.json(candles.map(c => ({
      open: +c.open,
      high: +c.high,
      low: +c.low,
      close: +c.close,
      time: c.mts,
      volume: +c.volume })));

  });

  server.listen(port);
  debug('listening on port %s', port);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90dl9kYXRhX3NlcnZlci9pbmRleC5qcyJdLCJuYW1lcyI6WyJjb3JzIiwicmVxdWlyZSIsImh0dHAiLCJFeHByZXNzIiwiQm9keVBhcnNlciIsIl9pc0Zpbml0ZSIsImRlYnVnIiwiZmV0Y2hCaXRmaW5leCIsImZldGNoQmluYW5jZSIsIlJFU09MVVRJT05TX0JJVEZJTkVYIiwiUkVTT0xVVElPTlNfQklOQU5DRSIsIm1vZHVsZSIsImV4cG9ydHMiLCJwb3J0IiwiYXBwIiwic2VydmVyIiwiY3JlYXRlU2VydmVyIiwidXNlIiwianNvbiIsInR5cGUiLCJ1cmxlbmNvZGVkIiwiZXh0ZW5kZWQiLCJnZXQiLCJyZXEiLCJyZXMiLCJ2ZXJzaW9uIiwicG9zdCIsImV4Y2hhbmdlIiwic3ltYm9sIiwicmVzb2x1dGlvbiIsImZyb20iLCJ0byIsImJvZHkiLCJwYXJzZWRSZXMiLCJsZW5ndGgiLCJzdGFydCIsImVuZCIsImNhbmRsZXMiLCJtYXJrZXQiLCJyIiwidGYiLCJtYXAiLCJjIiwib3BlbiIsImhpZ2giLCJsb3ciLCJjbG9zZSIsInRpbWUiLCJtdHMiLCJ2b2x1bWUiLCJsaXN0ZW4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLE1BQU1BLElBQUksR0FBR0MsT0FBTyxDQUFDLE1BQUQsQ0FBcEI7QUFDQSxNQUFNQyxJQUFJLEdBQUdELE9BQU8sQ0FBQyxNQUFELENBQXBCO0FBQ0EsTUFBTUUsT0FBTyxHQUFHRixPQUFPLENBQUMsU0FBRCxDQUF2QjtBQUNBLE1BQU1HLFVBQVUsR0FBR0gsT0FBTyxDQUFDLGFBQUQsQ0FBMUI7QUFDQSxNQUFNSSxTQUFTLEdBQUdKLE9BQU8sQ0FBQyxpQkFBRCxDQUF6QjtBQUNBLE1BQU1LLEtBQUssR0FBR0wsT0FBTyxDQUFDLE9BQUQsQ0FBUCxDQUFpQiw4QkFBakIsQ0FBZDtBQUNBLE1BQU1NLGFBQWEsR0FBR04sT0FBTyxDQUFDLG9DQUFELENBQTdCO0FBQ0EsTUFBTU8sWUFBWSxHQUFHUCxPQUFPLENB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QUssRUFBRSxDQUFDSixDQUFDLENBQUNJLEtBSmU7QUFLekJDLE1BQUFBLElBQUksRUFBRUwsQ0FBQyxDQUFDTSxHQUxpQjtBQU16QkMsTUFBQUEsTUFBTSxFQUFFLENBQUNQLENBQUMsQ0FBQ08sTUFOYyxFQUFMLENBQWIsQ0FBVDs7QUFRRCxHQS9CRDs7QUFpQ0FsQyxFQUFBQSxNQUFNLENBQUNtQyxNQUFQLENBQWNyQyxJQUFkO0FBQ0FQLEVBQUFBLEtBQUssQ0FBQyxzQkFBRCxFQUF5Qk8sSUFBekIsQ0FBTDtBQUNELENBL0NEIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IGNvcnMgPSByZXF1aXJlKCdjb3JzJylcbmNvbnN0IGh0dHAgPSByZXF1aXJlKCdodHRwJylcbmNvbnN0IEV4cHJlc3MgPSByZXF1aXJlKCdleHByZXNzJylcbmNvbnN0IEJvZHlQYXJzZXIgPSByZXF1aXJlKCdib2R5LXBhcnNlcicpXG5jb25zdCBfaXNGaW5pdGUgPSByZXF1aXJlKCdsb2Rhc2gvaXNGaW5pdGUnKVxuY29uc3QgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdiZng6aGY6c2VydmVyOnR2LWRhdGEtc2VydmVyJylcbmNvbnN0IGZldGNoQml0ZmluZXggPSByZXF1aXJlKCcuLi9kYi9xdWVyeV9jYW5kbGVzL2ZldGNoX2JpdGZpbmV4JylcbmNvbnN0IGZldGNoQmluYW5jZSA9IHJlcXVpcmUoJy4uL2RiL3F1ZXJ5X2NhbmRsZXMvZmV0Y2hfYmluYW5jZScpXG5cbmNvbnN0IFJFU09MVVRJT05TX0JJVEZJTkVYID0gcmVxdWlyZSgnLi9yZXNvbHV0aW9uc19iaXRmaW5leCcpXG5jb25zdCBSRVNPTFVUSU9OU19CSU5BTkNFID0gcmVxdWlyZSgnLi9yZXNvbHV0aW9uc19iaW5hbmNlJylcblxubW9kdWxlLmV4cG9ydHMgPSAoeyBwb3J0IH0pID0+IHtcbiAgY29uc3QgYXBwID0gRXhwcmVzcygpXG4gIGNvbnN0IHNlcnZlciA9IGh0dHAuY3JlYXRlU2VydmVyKGFwcClcblxuICBhcHAudXNlKGNvcnMoKSlcbiAgYXBwLnVzZShCb2R5UGFyc2VyLmpzb24oeyB0eXBlOiAnYXBwbGljYXRpb24vanNvbicgfSkpXG4gIGFwcC51c2UoQm9keVBhcnNlci51cmxlbmNvZGVkKHsgZXh0ZW5kZWQ6IHRydWUgfSkpXG5cbiAgYXBwLmdldCgnLycsIChyZXEsIHJlcykgPT4ge1xuICAgIHJlcy5qc29uKHsgdmVyc2lvbjogMSB9KVxuICB9KVxuXG4gIGFwcC5wb3N0KCcvJywgYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gICAgY29uc3QgeyBleGNoYW5nZSwgc3ltYm9sLCByZXNvbHV0aW9uLCBmcm9tLCB0byB9ID0gcmVxLmJvZHlcbiAgICBjb25zdCBwYXJzZWRSZXMgPSByZXNvbHV0aW9uLmxlbmd0aCA9PT0gMSAmJiAhX2lzRmluaXRlKCtyZXNvbHV0aW9uKVxuICAgICAgPyBgMSR7cmVzb2x1dGlvbn1gXG4gICAgICA6IHJlc29sdXRpb25cblxuICAgIGNvbnN0IHN0YXJ0ID0gZnJvbSAqIDEwMDBcbiAgICBjb25zdCBlbmQgPSB0byAqIDEwMDBcbiAgICBsZXQgY2FuZGxlcyA9IFtdXG5cbiAgICBkZWJ1ZygncmVjdiBjYW5kbGUgcmVxIGZvciAlcyAlcyBAICVzJywgZXhjaGFuZ2UsIHN5bWJvbCwgcGFyc2VkUmVzKVxuXG4gICAgLy8gVE9ETzogYWRkIHZhbGlkYXRpb24gZm9yIHJlc29sdXRpb25cbiAgICBpZiAoZXhjaGFuZ2UgPT09ICdiaXRmaW5leCcpIHtcbiAgICAgIGNvbnN0IG1hcmtldCA9IHsgcjogYHQke3N5bWJvbH1gIH1cbiAgICAgIGNvbnN0IHRmID0gUkVTT0xVVElPTlNfQklURklORVhbcGFyc2VkUmVzXVxuICAgICAgY2FuZGxlcyA9IGF3YWl0IGZldGNoQml0ZmluZXgoeyBtYXJrZXQsIHRmLCBzdGFydCwgZW5kIH0pXG4gICAgfSBlbHNlIGlmIChleGNoYW5nZSA9PT0gJ2JpbmFuY2UnKSB7XG4gICAgICBjb25zdCBtYXJrZXQgPSB7IHI6IHN5bWJvbCB9XG4gICAgICBjb25zdCB0ZiA9IFJFU09MVVRJT05TX0JJTkFOQ0VbcGFyc2VkUmVzXVxuICAgICAgY2FuZGxlcyA9IGF3YWl0IGZldGNoQmluYW5jZSh7IG1hcmtldCwgdGYsIHN0YXJ0LCBlbmQgfSlcbiAgICB9XG5cbiAgICByZXMuanNvbihjYW5kbGVzLm1hcChjID0+ICh7XG4gICAgICBvcGVuOiArYy5vcGVuLFxuICAgICAgaGlnaDogK2MuaGlnaCxcbiAgICAgIGxvdzogK2MubG93LFxuICAgICAgY2xvc2U6ICtjLmNsb3NlLFxuICAgICAgdGltZTogYy5tdHMsXG4gICAgICB2b2x1bWU6ICtjLnZvbHVtZVxuICAgIH0pKSlcbiAgfSlcblxuICBzZXJ2ZXIubGlzdGVuKHBvcnQpXG4gIGRlYnVnKCdsaXN0ZW5pbmcgb24gcG9ydCAlcycsIHBvcnQpXG59XG4iXX0=