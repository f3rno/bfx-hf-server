'use strict';

const poolInit = require('../../ex_pool');
const poolAddDataListener = require('../../ex_pool/add_data_listener');
const poolUnsubscribe = require('../../ex_pool/unsubscribe');
const WSServer = require('../../ws_server');
const onPoolData = require('./on_pool_data');
const onSubscribe = require('./on_subscribe');
const onUnsubscribe = require('./on_unsubscribe');
const onReconnect = require('./on_reconnect');

module.exports = class ExchangePoolServer extends WSServer {
  constructor({ port }) {
    super({
      port,
      debugName: 'ex-pool',
      msgHandlers: {
        sub: onSubscribe,
        unsub: onUnsubscribe,
        reconnect: onReconnect } });



    this.pool = poolInit();
    this.clients = [];

    poolAddDataListener(this.pool, onPoolData.bind(this, this));
  }

  onWSSConnection(ws) {
    super.onWSSConnection(ws);

    ws.subscriptions = {}; // [exchange]: { [chanID]: channelData, ... }
    this.clients.push(ws);
  }

  async onWSClose(ws) {
    super.onWSClose(ws);

    const subExchanges = Object.keys(ws.subscriptions);
    let exID;
    let subs;

    for (let i = 0; i < subExchanges.length; i += 1) {
      exID = subExchanges[i];
      subs = Object.values(ws.subscriptions[exID]);

      for (let j = 0; j < subs.length; j += 1) {
        try {
          await poolUnsubscribe({
            exID,
            pool: this.pool,
            channel: subs[j],
            force: true });

        } catch (e) {
          this.d('error unsubscribing from %s %d: %s', exID, subs[j], e.stack);
        }
      }
    }
  }};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy93c19zZXJ2ZXJzL2V4X3Bvb2wvaW5kZXguanMiXSwibmFtZXMiOlsicG9vbEluaXQiLCJyZXF1aXJlIiwicG9vbEFkZERhdGFMaXN0ZW5lciIsInBvb2xVbnN1YnNjcmliZSIsIldTU2VydmVyIiwib25Qb29sRGF0YSIsIm9uU3Vic2NyaWJlIiwib25VbnN1YnNjcmliZSIsIm9uUmVjb25uZWN0IiwibW9kdWxlIiwiZXhwb3J0cyIsIkV4Y2hhbmdlUG9vbFNlcnZlciIsImNvbnN0cnVjdG9yIiwicG9ydCIsImRlYnVnTmFtZSIsIm1zZ0hhbmRsZXJzIiwic3ViIiwidW5zdWIiLCJyZWNvbm5lY3QiLCJwb29sIiwiY2xpZW50cyIsImJpbmQiLCJvbldTU0Nvbm5lY3Rpb24iLCJ3cyIsInN1YnNjcmlwdGlvbnMiLCJwdXNoIiwib25XU0Nsb3NlIiwic3ViRXhjaGFuZ2VzIiwiT2JqZWN0Iiwia2V5cyIsImV4SUQiLCJzdWJzIiwiaSIsImxlbmd0aCIsInZhbHVlcyIsImoiLCJjaGFubmVsIiwiZm9yY2UiLCJlIiwiZCIsInN0YWNrIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxNQUFNQSxRQUFRLEdBQUdDLE9BQU8sQ0FBQyxlQUFELENBQXhCO0FBQ0EsTUFBTUMsbUJBQW1CLEdBQUdELE9BQU8sQ0FBQyxpQ0FBRCxDQUFuQztBQUNBLE1BQU1FLGVBQWUsR0FBR0YsT0FBTyxDQUFDLDJCQUFELENBQS9CO0FBQ0EsTUFBTUcsUUFBUSxHQUFHSCxPQUFPLENBQUMsaUJBQUQsQ0FBeEI7QUFDQSxNQUFNSSxVQUFVLEdBQUdKLE9BQU8sQ0FBQyxnQkFBRCxDQUExQjtBQUNBLE1BQU1LLFdBQVcsR0FBR0wsT0FBTyxDQUFDLGdCQUFELENBQTNCO0FBQ0EsTUFBTU0sYUFBYSxHQUFHTixPQUFPLENBQUMsa0JBQUQsQ0FBN0I7QUFDQSxNQUFNTyxXQUFXLEdBQUdQLE9BQU8sQ0FBQyxnQkFBRCxDQUEzQjs7QUFFQVEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLE1BQU1DLGtCQUFOLFNBQWlDUCxRQUFqQyxDQUEwQztBQUN6RFEsRUFBQUEsV0FBVyxDQUFFLEVBQUVDLElBQUYsRUFBRixFQUFZO0FBQ3JCLFVBQU07QUFDSkEsTUFBQUEsSUFESTtBQUVKQyxNQUFBQSxTQUFTLEVBQUUsU0FGUDtBQUdKQyxNQUFBQSxXQUFXLEVBQUU7QUFDWEMsUUFBQUEsR0FBRyxFQUFFVixXQURNO0FBRVhXLFFBQUFBLEtBQUssRUFBRVYsYUFGSTtBQUdYVyxRQUFBQSxTQUFTLEVBQUVWLFdBSEEsRUFIVCxFQUFOOzs7O0FBVUEsU0FBS1csSUFBTCxHQUFZbkIsUUFBUSxFQUFwQjtBQUNBLFNBQUtvQixPQUFMLEdBQWUsRUFBZjs7QUFFQWxCLElBQUFBLG1CQUFtQixDQUFDLEtBQUtpQixJQUFOLEVBQVlkLFVBQVUsQ0FBQ2dCLElBQVgsQ0FBZ0IsSUFBaEIsRUFBc0IsSUFBdEIsQ0FBWixDQUFuQjtBQUNEOztBQUVEQyxFQUFBQSxlQUFlLENBQUVDLEVBQUYsRUFBTTtBQUNuQixVQUFNRCxlQUFOLENBQXNCQyxFQUF0Qjs7QUFFQUEsSUFBQUEsRUFBRSxDQUFDQyxhQUFILEdBQW1CLEVBQW5CLENBSG1CLENBR0c7QUFDdEIsU0FBS0osT0FBTCxDQUFhSyxJQUFiLENBQWtCRixFQUFsQjtBQUNEOztBQUVELFFBQU1HLFNBQU4sQ0FBaUJILEVBQWpCLEVBQXFCO0FBQ25CLFVBQU1HLFNBQU4sQ0FBZ0JILEVBQWhCOztBQUVBLFVBQU1JLFlBQVksR0FBR0MsTUFBTSxDQUFDQyxJQUFQLENBQVlOLEVBQUUsQ0FBQ0MsYUFBZixDQUFyQjtBQUNBLFFBQUlNLElBQUo7QUFDQSxRQUFJQyxJQUFKOztBQUVBLFNBQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0wsWUFBWSxDQUFDTSxNQUFqQyxFQUF5Q0QsQ0FBQyxJQUFJLENBQTlDLEVBQWlEO0FBQy9DRixNQUFBQSxJQUFJLEdBQUdILFlBQVksQ0FBQ0ssQ0FBRCxDQUFuQjtBQUNBRCxNQUFBQSxJQUFJLEdBQUdILE1BQU0sQ0FBQ00sTUFBUCxDQUFjWCxFQUFFLENBQUNDLGFBQUgsQ0FBaUJNLElBQWpCLENBQWQsQ0FBUDs7QUFFQSxXQUFLLElBQUlLLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdKLElBQUksQ0FBQ0UsTUFBekIsRUFBaUNFLENBQUMsSUFBSSxDQUF0QyxFQUF5QztBQUN2QyxZQUFJO0FBQ0YsZ0JBQU1oQyxlQUFlLENBQUM7QUFDcEIyQixZQUFBQSxJQURvQjtBQUVwQlgsWUFBQUEsSUFBSSxFQUFFLEtBQUtBLElBRlM7QUFHcEJpQixZQUFBQSxPQUFPLEVBQUVMLElBQUksQ0FBQ0ksQ0FBRCxDQUhPO0FBSXBCRSxZQUFBQSxLQUFLLEVBQUUsSUFKYSxFQUFELENBQXJCOztBQU1ELFNBUEQsQ0FPRSxPQUFPQyxDQUFQLEVBQVU7QUFDVixlQUFLQyxDQUFMLENBQU8sb0NBQVAsRUFBNkNULElBQTdDLEVBQW1EQyxJQUFJLENBQUNJLENBQUQsQ0FBdkQsRUFBNERHLENBQUMsQ0FBQ0UsS0FBOUQ7QUFDRDtBQUNGO0FBQ0Y7QUFDRixHQWpEd0QsQ0FBM0QiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgcG9vbEluaXQgPSByZXF1aXJlKCcuLi8uLi9leF9wb29sJylcbmNvbnN0IHBvb2xBZGREYXRhTGlzdGVuZXIgPSByZXF1aXJlKCcuLi8uLi9leF9wb29sL2FkZF9kYXRhX2xpc3RlbmVyJylcbmNvbnN0IHBvb2xVbnN1YnNjcmliZSA9IHJlcXVpcmUoJy4uLy4uL2V4X3Bvb2wvdW5zdWJzY3JpYmUnKVxuY29uc3QgV1NTZXJ2ZXIgPSByZXF1aXJlKCcuLi8uLi93c19zZXJ2ZXInKVxuY29uc3Qgb25Qb29sRGF0YSA9IHJlcXVpcmUoJy4vb25fcG9vbF9kYXRhJylcbmNvbnN0IG9uU3Vic2NyaWJlID0gcmVxdWlyZSgnLi9vbl9zdWJzY3JpYmUnKVxuY29uc3Qgb25VbnN1YnNjcmliZSA9IHJlcXVpcmUoJy4vb25fdW5zdWJzY3JpYmUnKVxuY29uc3Qgb25SZWNvbm5lY3QgPSByZXF1aXJlKCcuL29uX3JlY29ubmVjdCcpXG5cbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgRXhjaGFuZ2VQb29sU2VydmVyIGV4dGVuZHMgV1NTZXJ2ZXIge1xuICBjb25zdHJ1Y3RvciAoeyBwb3J0IH0pIHtcbiAgICBzdXBlcih7XG4gICAgICBwb3J0LFxuICAgICAgZGVidWdOYW1lOiAnZXgtcG9vbCcsXG4gICAgICBtc2dIYW5kbGVyczoge1xuICAgICAgICBzdWI6IG9uU3Vic2NyaWJlLFxuICAgICAgICB1bnN1Yjogb25VbnN1YnNjcmliZSxcbiAgICAgICAgcmVjb25uZWN0OiBvblJlY29ubmVjdFxuICAgICAgfVxuICAgIH0pXG5cbiAgICB0aGlzLnBvb2wgPSBwb29sSW5pdCgpXG4gICAgdGhpcy5jbGllbnRzID0gW11cblxuICAgIHBvb2xBZGREYXRhTGlzdGVuZXIodGhpcy5wb29sLCBvblBvb2xEYXRhLmJpbmQodGhpcywgdGhpcykpXG4gIH1cblxuICBvbldTU0Nvbm5lY3Rpb24gKHdzKSB7XG4gICAgc3VwZXIub25XU1NDb25uZWN0aW9uKHdzKVxuXG4gICAgd3Muc3Vic2NyaXB0aW9ucyA9IHt9IC8vIFtleGNoYW5nZV06IHsgW2NoYW5JRF06IGNoYW5uZWxEYXRhLCAuLi4gfVxuICAgIHRoaXMuY2xpZW50cy5wdXNoKHdzKVxuICB9XG5cbiAgYXN5bmMgb25XU0Nsb3NlICh3cykge1xuICAgIHN1cGVyLm9uV1NDbG9zZSh3cylcblxuICAgIGNvbnN0IHN1YkV4Y2hhbmdlcyA9IE9iamVjdC5rZXlzKHdzLnN1YnNjcmlwdGlvbnMpXG4gICAgbGV0IGV4SURcbiAgICBsZXQgc3Vic1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdWJFeGNoYW5nZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGV4SUQgPSBzdWJFeGNoYW5nZXNbaV1cbiAgICAgIHN1YnMgPSBPYmplY3QudmFsdWVzKHdzLnN1YnNjcmlwdGlvbnNbZXhJRF0pXG5cbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgc3Vicy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGF3YWl0IHBvb2xVbnN1YnNjcmliZSh7XG4gICAgICAgICAgICBleElELFxuICAgICAgICAgICAgcG9vbDogdGhpcy5wb29sLFxuICAgICAgICAgICAgY2hhbm5lbDogc3Vic1tqXSxcbiAgICAgICAgICAgIGZvcmNlOiB0cnVlXG4gICAgICAgICAgfSlcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIHRoaXMuZCgnZXJyb3IgdW5zdWJzY3JpYmluZyBmcm9tICVzICVkOiAlcycsIGV4SUQsIHN1YnNbal0sIGUuc3RhY2spXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiJdfQ==