'use strict';

const send = require('../../util/ws/send');
const sendError = require('../../util/ws/send_error');
const poolSubscribe = require('../../ex_pool/subscribe');

module.exports = async (server, ws, msg) => {
  const { pool, d } = server;
  const [, exID, channel] = msg;

  let chanID;

  try {
    chanID = await poolSubscribe({ pool, exID, channel });
  } catch (err) {
    d('error subscribing to %s %j: %s', exID, channel, err.stack);
    return sendError(ws, 'Internal error subscribing');
  }

  if (!ws.subscriptions[exID]) {
    ws.subscriptions[exID] = {};
  }

  ws.subscriptions[exID][`${chanID}`] = channel;
  send(ws, ['subscribed', exID, chanID, channel]);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy93c19zZXJ2ZXJzL2V4X3Bvb2wvb25fc3Vic2NyaWJlLmpzIl0sIm5hbWVzIjpbInNlbmQiLCJyZXF1aXJlIiwic2VuZEVycm9yIiwicG9vbFN1YnNjcmliZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJzZXJ2ZXIiLCJ3cyIsIm1zZyIsInBvb2wiLCJkIiwiZXhJRCIsImNoYW5uZWwiLCJjaGFuSUQiLCJlcnIiLCJzdGFjayIsInN1YnNjcmlwdGlvbnMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLE1BQU1BLElBQUksR0FBR0MsT0FBTyxDQUFDLG9CQUFELENBQXBCO0FBQ0EsTUFBTUMsU0FBUyxHQUFHRCxPQUFPLENBQUMsMEJBQUQsQ0FBekI7QUFDQSxNQUFNRSxhQUFhLEdBQUdGLE9BQU8sQ0FBQyx5QkFBRCxDQUE3Qjs7QUFFQUcsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLE9BQU9DLE1BQVAsRUFBZUMsRUFBZixFQUFtQkMsR0FBbkIsS0FBMkI7QUFDMUMsUUFBTSxFQUFFQyxJQUFGLEVBQVFDLENBQVIsS0FBY0osTUFBcEI7QUFDQSxRQUFNLEdBQUdLLElBQUgsRUFBU0MsT0FBVCxJQUFvQkosR0FBMUI7O0FBRUEsTUFBSUssTUFBSjs7QUFFQSxNQUFJO0FBQ0ZBLElBQUFBLE1BQU0sR0FBRyxNQUFNVixhQUFhLENBQUMsRUFBRU0sSUFBRixFQUFRRSxJQUFSLEVBQWNDLE9BQWQsRUFBRCxDQUE1QjtBQUNELEdBRkQsQ0FFRSxPQUFPRSxHQUFQLEVBQVk7QUFDWkosSUFBQUEsQ0FBQyxDQUFDLGdDQUFELEVBQW1DQyxJQUFuQyxFQUF5Q0MsT0FBekMsRUFBa0RFLEdBQUcsQ0FBQ0MsS0FBdEQsQ0FBRDtBQUNBLFdBQU9iLFNBQVMsQ0FBQ0ssRUFBRCxFQUFLLDRCQUFMLENBQWhCO0FBQ0Q7O0FBRUQsTUFBSSxDQUFDQSxFQUFFLENBQUNTLGFBQUgsQ0FBaUJMLElBQWpCLENBQUwsRUFBNkI7QUFDM0JKLElBQUFBLEVBQUUsQ0FBQ1MsYUFBSCxDQUFpQkwsSUFBakIsSUFBeUIsRUFBekI7QUFDRDs7QUFFREosRUFBQUEsRUFBRSxDQUFDUyxhQUFILENBQWlCTCxJQUFqQixFQUF3QixHQUFFRSxNQUFPLEVBQWpDLElBQXNDRCxPQUF0QztBQUNBWixFQUFBQSxJQUFJLENBQUNPLEVBQUQsRUFBSyxDQUFDLFlBQUQsRUFBZUksSUFBZixFQUFxQkUsTUFBckIsRUFBNkJELE9BQTdCLENBQUwsQ0FBSjtBQUNELENBbkJEIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IHNlbmQgPSByZXF1aXJlKCcuLi8uLi91dGlsL3dzL3NlbmQnKVxuY29uc3Qgc2VuZEVycm9yID0gcmVxdWlyZSgnLi4vLi4vdXRpbC93cy9zZW5kX2Vycm9yJylcbmNvbnN0IHBvb2xTdWJzY3JpYmUgPSByZXF1aXJlKCcuLi8uLi9leF9wb29sL3N1YnNjcmliZScpXG5cbm1vZHVsZS5leHBvcnRzID0gYXN5bmMgKHNlcnZlciwgd3MsIG1zZykgPT4ge1xuICBjb25zdCB7IHBvb2wsIGQgfSA9IHNlcnZlclxuICBjb25zdCBbLCBleElELCBjaGFubmVsXSA9IG1zZ1xuXG4gIGxldCBjaGFuSURcblxuICB0cnkge1xuICAgIGNoYW5JRCA9IGF3YWl0IHBvb2xTdWJzY3JpYmUoeyBwb29sLCBleElELCBjaGFubmVsIH0pXG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGQoJ2Vycm9yIHN1YnNjcmliaW5nIHRvICVzICVqOiAlcycsIGV4SUQsIGNoYW5uZWwsIGVyci5zdGFjaylcbiAgICByZXR1cm4gc2VuZEVycm9yKHdzLCAnSW50ZXJuYWwgZXJyb3Igc3Vic2NyaWJpbmcnKVxuICB9XG5cbiAgaWYgKCF3cy5zdWJzY3JpcHRpb25zW2V4SURdKSB7XG4gICAgd3Muc3Vic2NyaXB0aW9uc1tleElEXSA9IHt9XG4gIH1cblxuICB3cy5zdWJzY3JpcHRpb25zW2V4SURdW2Ake2NoYW5JRH1gXSA9IGNoYW5uZWxcbiAgc2VuZCh3cywgWydzdWJzY3JpYmVkJywgZXhJRCwgY2hhbklELCBjaGFubmVsXSlcbn1cbiJdfQ==