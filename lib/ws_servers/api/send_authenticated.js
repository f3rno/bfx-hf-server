'use strict';

const PI = require('p-iteration');
const send = require('../../util/ws/send');
const sendError = require('../../util/ws/send_error');
const { notifySuccess, notifyInternalError } = require('../../util/ws/notify');
const decryptAPICredentials = require('../../util/decrypt_api_credentials');
const { CREDENTIALS_CID } = require('../../db/credentials');
const openAuthBitfinexConnection = require('./open_auth_bitfinex_connection');
const openAuthBinanceConnection = require('./open_auth_binance_connection');

module.exports = async (ws, db, d) => {
  const { authPassword, authControl } = ws;

  if (!authPassword || !authControl) {
    return sendError(ws, 'Not authenticated');
  }

  // Send basic auth data for further requests
  send(ws, ['info.auth_confgured', true]);
  send(ws, ['info.auth_token', authControl]);
  notifySuccess(ws, 'Authenticated');

  // Grab all exchange API credentials
  const { Credential } = db;
  const allCredentials = await Credential.getAll();
  const apiCredentials = Object.
  values(allCredentials).
  filter(c => c.cid !== CREDENTIALS_CID);

  // Attempt to decrypt & open connections for all valid credentials
  await PI.forEach(apiCredentials, async credentials => {
    const cleartext = await decryptAPICredentials({
      password: authPassword,
      credentials });


    if (!cleartext) {
      d('found stored credential encrypted with invalid password, deleting...');
      await Credential.rm(credentials);
      return;
    }

    const { exID, key, secret } = cleartext;

    ws[`${exID}Credentials`] = { key, secret };
    notifySuccess(ws, `Decrypted credentials for ${exID}`);
    send(ws, ['data.api_credentials.configured', exID]);

    switch (exID) {
      case 'bitfinex':{
          ws.aoc.openHost('bitfinex', key, secret);
          ws.clients.bitfinex = await openAuthBitfinexConnection(ws, key, secret, db, d);
          break;
        }

      case 'binance':{
          ws.aoc.openHost('binance', key, secret);
          ws.clients.binance = openAuthBinanceConnection(ws, key, secret);
          break;
        }

      default:{
          d('unknown exID broke through: %s', exID);
          notifyInternalError(ws);
          break;
        }}

  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy93c19zZXJ2ZXJzL2FwaS9zZW5kX2F1dGhlbnRpY2F0ZWQuanMiXSwibmFtZXMiOlsiUEkiLCJyZXF1aXJlIiwic2VuZCIsInNlbmRFcnJvciIsIm5vdGlmeVN1Y2Nlc3MiLCJub3RpZnlJbnRlcm5hbEVycm9yIiwiZGVjcnlwdEFQSUNyZWRlbnRpYWxzIiwiQ1JFREVOVElBTFNfQ0lEIiwib3BlbkF1dGhCaXRmaW5leENvbm5lY3Rpb24iLCJvcGVuQXV0aEJpbmFuY2VDb25uZWN0aW9uIiwibW9kdWxlIiwiZXhwb3J0cyIsIndzIiwiZGIiLCJkIiwiYXV0aFBhc3N3b3JkIiwiYXV0aENvbnRyb2wiLCJDcmVkZW50aWFsIiwiYWxsQ3JlZGVudGlhbHMiLCJnZXRBbGwiLCJhcGlDcmVkZW50aWFscyIsIk9iamVjdCIsInZhbHVlcyIsImZpbHRlciIsImMiLCJjaWQiLCJmb3JFYWNoIiwiY3JlZGVudGlhbHMiLCJjbGVhcnRleHQiLCJwYXNzd29yZCIsInJtIiwiZXhJRCIsImtleSIsInNlY3JldCIsImFvYyIsIm9wZW5Ib3N0IiwiY2xpZW50cyIsImJpdGZpbmV4IiwiYmluYW5jZSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsTUFBTUEsRUFBRSxHQUFHQyxPQUFPLENBQUMsYUFBRCxDQUFsQjtBQUNBLE1BQU1DLElBQUksR0FBR0QsT0FBTyxDQUFDLG9CQUFELENBQXBCO0FBQ0EsTUFBTUUsU0FBUyxHQUFHRixPQUFPLENBQUMsMEJBQUQsQ0FBekI7QUFDQSxNQUFNLEVBQUVHLGFBQUYsRUFBaUJDLG1CQUFqQixLQUF5Q0osT0FBTyxDQUFDLHNCQUFELENBQXREO0FBQ0EsTUFBTUsscUJBQXFCLEdBQUdMLE9BQU8sQ0FBQyxvQ0FBRCxDQUFyQztBQUNBLE1BQU0sRUFBRU0sZUFBRixLQUFzQk4sT0FBTyxDQUFDLHNCQUFELENBQW5DO0FBQ0EsTUFBTU8sMEJBQTBCLEdBQUdQLE9BQU8sQ0FBQyxpQ0FBRCxDQUExQztBQUNBLE1BQU1R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InNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5jb25zdCBQSSA9IHJlcXVpcmUoJ3AtaXRlcmF0aW9uJylcbmNvbnN0IHNlbmQgPSByZXF1aXJlKCcuLi8uLi91dGlsL3dzL3NlbmQnKVxuY29uc3Qgc2VuZEVycm9yID0gcmVxdWlyZSgnLi4vLi4vdXRpbC93cy9zZW5kX2Vycm9yJylcbmNvbnN0IHsgbm90aWZ5U3VjY2Vzcywgbm90aWZ5SW50ZXJuYWxFcnJvciB9ID0gcmVxdWlyZSgnLi4vLi4vdXRpbC93cy9ub3RpZnknKVxuY29uc3QgZGVjcnlwdEFQSUNyZWRlbnRpYWxzID0gcmVxdWlyZSgnLi4vLi4vdXRpbC9kZWNyeXB0X2FwaV9jcmVkZW50aWFscycpXG5jb25zdCB7IENSRURFTlRJQUxTX0NJRCB9ID0gcmVxdWlyZSgnLi4vLi4vZGIvY3JlZGVudGlhbHMnKVxuY29uc3Qgb3BlbkF1dGhCaXRmaW5leENvbm5lY3Rpb24gPSByZXF1aXJlKCcuL29wZW5fYXV0aF9iaXRmaW5leF9jb25uZWN0aW9uJylcbmNvbnN0IG9wZW5BdXRoQmluYW5jZUNvbm5lY3Rpb24gPSByZXF1aXJlKCcuL29wZW5fYXV0aF9iaW5hbmNlX2Nvbm5lY3Rpb24nKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFzeW5jICh3cywgZGIsIGQpID0+IHtcbiAgY29uc3QgeyBhdXRoUGFzc3dvcmQsIGF1dGhDb250cm9sIH0gPSB3c1xuXG4gIGlmICghYXV0aFBhc3N3b3JkIHx8ICFhdXRoQ29udHJvbCkge1xuICAgIHJldHVybiBzZW5kRXJyb3Iod3MsICdOb3QgYXV0aGVudGljYXRlZCcpXG4gIH1cblxuICAvLyBTZW5kIGJhc2ljIGF1dGggZGF0YSBmb3IgZnVydGhlciByZXF1ZXN0c1xuICBzZW5kKHdzLCBbJ2luZm8uYXV0aF9jb25mZ3VyZWQnLCB0cnVlXSlcbiAgc2VuZCh3cywgWydpbmZvLmF1dGhfdG9rZW4nLCBhdXRoQ29udHJvbF0pXG4gIG5vdGlmeVN1Y2Nlc3Mod3MsICdBdXRoZW50aWNhdGVkJylcblxuICAvLyBHcmFiIGFsbCBleGNoYW5nZSBBUEkgY3JlZGVudGlhbHNcbiAgY29uc3QgeyBDcmVkZW50aWFsIH0gPSBkYlxuICBjb25zdCBhbGxDcmVkZW50aWFscyA9IGF3YWl0IENyZWRlbnRpYWwuZ2V0QWxsKClcbiAgY29uc3QgYXBpQ3JlZGVudGlhbHMgPSBPYmplY3RcbiAgICAudmFsdWVzKGFsbENyZWRlbnRpYWxzKVxuICAgIC5maWx0ZXIoYyA9PiBjLmNpZCAhPT0gQ1JFREVOVElBTFNfQ0lEKVxuXG4gIC8vIEF0dGVtcHQgdG8gZGVjcnlwdCAmIG9wZW4gY29ubmVjdGlvbnMgZm9yIGFsbCB2YWxpZCBjcmVkZW50aWFsc1xuICBhd2FpdCBQSS5mb3JFYWNoKGFwaUNyZWRlbnRpYWxzLCBhc3luYyAoY3JlZGVudGlhbHMpID0+IHtcbiAgICBjb25zdCBjbGVhcnRleHQgPSBhd2FpdCBkZWNyeXB0QVBJQ3JlZGVudGlhbHMoe1xuICAgICAgcGFzc3dvcmQ6IGF1dGhQYXNzd29yZCxcbiAgICAgIGNyZWRlbnRpYWxzXG4gICAgfSlcblxuICAgIGlmICghY2xlYXJ0ZXh0KSB7XG4gICAgICBkKCdmb3VuZCBzdG9yZWQgY3JlZGVudGlhbCBlbmNyeXB0ZWQgd2l0aCBpbnZhbGlkIHBhc3N3b3JkLCBkZWxldGluZy4uLicpXG4gICAgICBhd2FpdCBDcmVkZW50aWFsLnJtKGNyZWRlbnRpYWxzKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgeyBleElELCBrZXksIHNlY3JldCB9ID0gY2xlYXJ0ZXh0XG5cbiAgICB3c1tgJHtleElEfUNyZWRlbnRpYWxzYF0gPSB7IGtleSwgc2VjcmV0IH1cbiAgICBub3RpZnlTdWNjZXNzKHdzLCBgRGVjcnlwdGVkIGNyZWRlbnRpYWxzIGZvciAke2V4SUR9YClcbiAgICBzZW5kKHdzLCBbJ2RhdGEuYXBpX2NyZWRlbnRpYWxzLmNvbmZpZ3VyZWQnLCBleElEXSlcblxuICAgIHN3aXRjaCAoZXhJRCkge1xuICAgICAgY2FzZSAnYml0ZmluZXgnOiB7XG4gICAgICAgIHdzLmFvYy5vcGVuSG9zdCgnYml0ZmluZXgnLCBrZXksIHNlY3JldClcbiAgICAgICAgd3MuY2xpZW50cy5iaXRmaW5leCA9IGF3YWl0IG9wZW5BdXRoQml0ZmluZXhDb25uZWN0aW9uKHdzLCBrZXksIHNlY3JldCwgZGIsIGQpXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG5cbiAgICAgIGNhc2UgJ2JpbmFuY2UnOiB7XG4gICAgICAgIHdzLmFvYy5vcGVuSG9zdCgnYmluYW5jZScsIGtleSwgc2VjcmV0KVxuICAgICAgICB3cy5jbGllbnRzLmJpbmFuY2UgPSBvcGVuQXV0aEJpbmFuY2VDb25uZWN0aW9uKHdzLCBrZXksIHNlY3JldClcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgZGVmYXVsdDoge1xuICAgICAgICBkKCd1bmtub3duIGV4SUQgYnJva2UgdGhyb3VnaDogJXMnLCBleElEKVxuICAgICAgICBub3RpZnlJbnRlcm5hbEVycm9yKHdzKVxuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgfSlcbn1cbiJdfQ==