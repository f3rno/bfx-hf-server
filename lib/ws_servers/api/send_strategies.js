'use strict';

const PI = require('p-iteration');
const send = require('../../util/ws/send');
const { notifyInternalError } = require('../../util/ws/notify');
const decryptStrategy = require('../../util/decrypt_strategy');
const capture = require('../../capture');

module.exports = async (ws, db, d) => {
  if (!ws.authPassword) return;

  const { Strategy } = db;
  let strategiesByID;

  try {
    strategiesByID = await Strategy.getAll();
  } catch (e) {
    capture.exception(e);
    notifyInternalError(ws);
    return;
  }

  const decryptedStrategies = [];

  await PI.forEach(Object.values(strategiesByID), async encryptedStrategy => {
    const { id } = encryptedStrategy;
    let strategy;

    try {
      strategy = await decryptStrategy(encryptedStrategy, ws.authPassword);
    } catch (e) {
      capture.exception(e);
      notifyInternalError(ws);
      return;
    }

    if (!strategy) {
      d('strategy encrypted with different password, deleting: %s', id);
      await Strategy.rm(encryptedStrategy);
    } else {
      decryptedStrategies.push(strategy);
    }
  });

  send(ws, ['data.strategies', decryptedStrategies]);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy93c19zZXJ2ZXJzL2FwaS9zZW5kX3N0cmF0ZWdpZXMuanMiXSwibmFtZXMiOlsiUEkiLCJyZXF1aXJlIiwic2VuZCIsIm5vdGlmeUludGVybmFsRXJyb3IiLCJkZWNyeXB0U3RyYXRlZ3kiLCJjYXB0dXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsIndzIiwiZGIiLCJkIiwiYXV0aFBhc3N3b3JkIiwiU3RyYXRlZ3kiLCJzdHJhdGVnaWVzQnlJRCIsImdldEFsbCIsImUiLCJleGNlcHRpb24iLCJkZWNyeXB0ZWRTdHJhdGVnaWVzIiwiZm9yRWFjaCIsIk9iamVjdCIsInZhbHVlcyIsImVuY3J5cHRlZFN0cmF0ZWd5IiwiaWQiLCJzdHJhdGVneSIsInJtIiwicHVzaCJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsTUFBTUEsRUFBRSxHQUFHQyxPQUFPLENBQUMsYUFBRCxDQUFsQjtBQUNBLE1BQU1DLElBQUksR0FBR0QsT0FBTyxDQUFDLG9CQUFELENBQXBCO0FBQ0EsTUFBTSxFQUFFRSxtQkFBRixLQUEwQkYsT0FBTyxDQUFDLHNCQUFELENBQXZDO0FBQ0EsTUFBTUcsZUFBZSxHQUFHSCxPQUFPLENBQUMsNkJBQUQsQ0FBL0I7QUFDQSxNQUFNSSxPQUFPLEdBQUdKLE9BQU8sQ0FBQyxlQUFELENBQXZCOztBQUVBSyxNQUFNLENBQUNDLE9BQVAsR0FBaUIsT0FBT0MsRUFBUCxFQUFXQyxFQUFYLEVBQWVDLENBQWYsS0FBcUI7QUFDcEMsTUFBSSxDQUFDRixFQUFFLENBQUNHLFlBQVIsRUFBc0I7O0FBRXRCLFFBQU0sRUFBRUMsUUFBRixLQUFlSCxFQUFyQjtBQUNBLE1BQUlJLGNBQUo7O0FBRUEsTUFBSTtBQUNGQSxJQUFBQSxjQUFjLEdBQUcsTUFBTUQsUUFBUSxDQUFDRSxNQUFULEVBQXZCO0FBQ0QsR0FGRCxDQUVFLE9BQU9DLENBQVAsRUFBVTtBQUNWVixJQUFBQSxPQUFPLENBQUNXLFNBQVIsQ0FBa0JELENBQWxCO0FBQ0FaLElBQUFBLG1CQUFtQixDQUFDSyxFQUFELENBQW5CO0FBQ0E7QUFDRDs7QUFFRCxRQUFNUyxtQkFBbUIsR0FBRyxFQUE1Qjs7QUFFQSxRQUFNakIsRUFBRSxDQUFDa0IsT0FBSCxDQUFXQyxNQUFNLENBQUNDLE1BQVAsQ0FBY1AsY0FBZCxDQUFYLEVBQTBDLE1BQU9RLGlCQUFQLElBQTZCO0FBQzNFLFVBQU0sRUFBRUMsRUFBRixLQUFTRCxpQkFBZjtBQUNBLFFBQUlFLFFBQUo7O0FBRUEsUUFBSTtBQUNGQSxNQUFBQSxRQUFRLEdBQUcsTUFBTW5CLGVBQWUsQ0FBQ2lCLGlCQUFELEVBQW9CYixFQUFFLENBQUNHLFlBQXZCLENBQWhDO0FBQ0QsS0FGRCxDQUVFLE9BQU9JLENBQVAsRUFBVTtBQUNWVixNQUFBQSxPQUFPLENBQUNXLFNBQVIsQ0FBa0JELENBQWxCO0FBQ0FaLE1BQUFBLG1CQUFtQixDQUFDSyxFQUFELENBQW5CO0FBQ0E7QUFDRDs7QUFFRCxRQUFJLENBQUNlLFFBQUwsRUFBZTtBQUNiYixNQUFBQSxDQUFDLENBQUMsMERBQUQsRUFBNkRZLEVBQTdELENBQUQ7QUFDQSxZQUFNVixRQUFRLENBQUNZLEVBQVQsQ0FBWUgsaUJBQVosQ0FBTjtBQUNELEtBSEQsTUFHTztBQUNMSixNQUFBQSxtQkFBbUIsQ0FBQ1EsSUFBcEIsQ0FBeUJGLFFBQXpCO0FBQ0Q7QUFDRixHQWxCSyxDQUFOOztBQW9CQXJCLEVBQUFBLElBQUksQ0FBQ00sRUFBRCxFQUFLLENBQUMsaUJBQUQsRUFBb0JTLG1CQUFwQixDQUFMLENBQUo7QUFDRCxDQXJDRCIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5jb25zdCBQSSA9IHJlcXVpcmUoJ3AtaXRlcmF0aW9uJylcbmNvbnN0IHNlbmQgPSByZXF1aXJlKCcuLi8uLi91dGlsL3dzL3NlbmQnKVxuY29uc3QgeyBub3RpZnlJbnRlcm5hbEVycm9yIH0gPSByZXF1aXJlKCcuLi8uLi91dGlsL3dzL25vdGlmeScpXG5jb25zdCBkZWNyeXB0U3RyYXRlZ3kgPSByZXF1aXJlKCcuLi8uLi91dGlsL2RlY3J5cHRfc3RyYXRlZ3knKVxuY29uc3QgY2FwdHVyZSA9IHJlcXVpcmUoJy4uLy4uL2NhcHR1cmUnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFzeW5jICh3cywgZGIsIGQpID0+IHtcbiAgaWYgKCF3cy5hdXRoUGFzc3dvcmQpIHJldHVyblxuXG4gIGNvbnN0IHsgU3RyYXRlZ3kgfSA9IGRiXG4gIGxldCBzdHJhdGVnaWVzQnlJRFxuXG4gIHRyeSB7XG4gICAgc3RyYXRlZ2llc0J5SUQgPSBhd2FpdCBTdHJhdGVneS5nZXRBbGwoKVxuICB9IGNhdGNoIChlKSB7XG4gICAgY2FwdHVyZS5leGNlcHRpb24oZSlcbiAgICBub3RpZnlJbnRlcm5hbEVycm9yKHdzKVxuICAgIHJldHVyblxuICB9XG5cbiAgY29uc3QgZGVjcnlwdGVkU3RyYXRlZ2llcyA9IFtdXG5cbiAgYXdhaXQgUEkuZm9yRWFjaChPYmplY3QudmFsdWVzKHN0cmF0ZWdpZXNCeUlEKSwgYXN5bmMgKGVuY3J5cHRlZFN0cmF0ZWd5KSA9PiB7XG4gICAgY29uc3QgeyBpZCB9ID0gZW5jcnlwdGVkU3RyYXRlZ3lcbiAgICBsZXQgc3RyYXRlZ3lcblxuICAgIHRyeSB7XG4gICAgICBzdHJhdGVneSA9IGF3YWl0IGRlY3J5cHRTdHJhdGVneShlbmNyeXB0ZWRTdHJhdGVneSwgd3MuYXV0aFBhc3N3b3JkKVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNhcHR1cmUuZXhjZXB0aW9uKGUpXG4gICAgICBub3RpZnlJbnRlcm5hbEVycm9yKHdzKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKCFzdHJhdGVneSkge1xuICAgICAgZCgnc3RyYXRlZ3kgZW5jcnlwdGVkIHdpdGggZGlmZmVyZW50IHBhc3N3b3JkLCBkZWxldGluZzogJXMnLCBpZClcbiAgICAgIGF3YWl0IFN0cmF0ZWd5LnJtKGVuY3J5cHRlZFN0cmF0ZWd5KVxuICAgIH0gZWxzZSB7XG4gICAgICBkZWNyeXB0ZWRTdHJhdGVnaWVzLnB1c2goc3RyYXRlZ3kpXG4gICAgfVxuICB9KVxuXG4gIHNlbmQod3MsIFsnZGF0YS5zdHJhdGVnaWVzJywgZGVjcnlwdGVkU3RyYXRlZ2llc10pXG59XG4iXX0=