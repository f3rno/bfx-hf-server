'use strict';

const hash = require('../../../util/hash');
const validateParams = require('../../../util/ws/validate_params');
const { notifyError, notifyInternalError } = require('../../../util/ws/notify');
const verifyPassword = require('../../../util/verify_password');
const capture = require('../../../capture');

const sendStrategies = require('../send_strategies');
const sendAuthenticated = require('../send_authenticated');

module.exports = async (server, ws, msg) => {
  if (ws.authPassword || ws.authControl) {
    return notifyError(ws, 'Already authenticated');
  }

  const { d, db } = server;
  const [, password] = msg;
  const validRequest = validateParams(ws, {
    password: { type: 'string', v: password } });


  if (!validRequest) {
    return;
  }

  const hashedPassword = hash(password);
  let authControl;

  try {
    authControl = await verifyPassword(db, hashedPassword);

    if (!authControl) {
      return notifyError(ws, 'Invalid password');
    }
  } catch (e) {
    capture.exception(e);
    return notifyInternalError(ws);
  }

  ws.authPassword = hashedPassword;
  ws.authControl = authControl;

  d('identified');

  ws.aoc = server.openAlgoServerClient();
  ws.aoc.identify(ws, authControl);

  await sendAuthenticated(ws, db, d);
  await sendStrategies(ws, db, d);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93c19zZXJ2ZXJzL2FwaS9oYW5kbGVycy9vbl9hdXRoX3N1Ym1pdC5qcyJdLCJuYW1lcyI6WyJoYXNoIiwicmVxdWlyZSIsInZhbGlkYXRlUGFyYW1zIiwibm90aWZ5RXJyb3IiLCJub3RpZnlJbnRlcm5hbEVycm9yIiwidmVyaWZ5UGFzc3dvcmQiLCJjYXB0dXJlIiwic2VuZFN0cmF0ZWdpZXMiLCJzZW5kQXV0aGVudGljYXRlZCIsIm1vZHVsZSIsImV4cG9ydHMiLCJzZXJ2ZXIiLCJ3cyIsIm1zZyIsImF1dGhQYXNzd29yZCIsImF1dGhDb250cm9sIiwiZCIsImRiIiwicGFzc3dvcmQiLCJ2YWxpZFJlcXVlc3QiLCJ0eXBlIiwidiIsImhhc2hlZFBhc3N3b3JkIiwiZSIsImV4Y2VwdGlvbiIsImFvYyIsIm9wZW5BbGdvU2VydmVyQ2xpZW50IiwiaWRlbnRpZnkiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLE1BQU1BLElBQUksR0FBR0MsT0FBTyxDQUFDLG9CQUFELENBQXBCO0FBQ0EsTUFBTUMsY0FBYyxHQUFHRCxPQUFPLENBQUMsa0NBQUQsQ0FBOUI7QUFDQSxNQUFNLEVBQUVFLFdBQUYsRUFBZUMsbUJBQWYsS0FBdUNILE9BQU8sQ0FBQyx5QkFBRCxDQUFwRDtBQUNBLE1BQU1JLGNBQWMsR0FBR0osT0FBTyxDQUFDLCtCQUFELENBQTlCO0FBQ0EsTUFBTUssT0FBTyxHQUFHTCxPQUFPLENBQUMsa0JBQUQsQ0FBdkI7O0FBRUEsTUFBTU0sY0FBYyxHQUFHTixPQUFPLENBQUMsb0JBQUQsQ0FBOUI7QUFDQSxNQUFNTyxpQkFBaUIsR0FBR1AsT0FBTyxDQUFDLHVCQUFELENBQWpDOztBQUVBUSxNQUFNLENBQUNDLE9BQVAsR0FBaUIsT0FBT0MsTUFBUCxFQUFlQyxFQUFmLEVBQW1CQyxHQUFuQixLQUEyQjtBQUMxQyxNQUFJRCxFQUFFLENBQUNFLFlBQUgsSUFBbUJGLEVBQUUsQ0FBQ0csV0FBMUIsRUFBdUM7QUFDckMsV0FBT1osV0FBVyxDQUFDUyxFQUFELEVBQUssdUJBQUwsQ0FBbEI7QUFDRDs7QUFFRCxRQUFNLEVBQUVJLENBQUYsRUFBS0MsRUFBTCxLQUFZTixNQUFsQjtBQUNBLFFBQU0sR0FBR08sUUFBSCxJQUFlTCxHQUFyQjtBQUNBLFFBQU1NLFlBQVksR0FBR2pCLGNBQWMsQ0FBQ1UsRUFBRCxFQUFLO0FBQ3RDTSxJQUFBQSxRQUFRLEVBQUUsRUFBRUUsSUFBSSxFQUFFLFFBQVIsRUFBa0JDLENBQUMsRUFBRUgsUUFBckIsRUFENEIsRUFBTCxDQUFuQzs7O0FBSUEsTUFBSSxDQUFDQyxZQUFMLEVBQW1CO0FBQ2pCO0FBQ0Q7O0FBRUQsUUFBTUcsY0FBYyxHQUFHdEIsSUFBSSxDQUFDa0IsUUFBRCxDQUEzQjtBQUNBLE1BQUlILFdBQUo7O0FBRUEsTUFBSTtBQUNGQSxJQUFBQSxXQUFXLEdBQUcsTUFBTVYsY0FBYyxDQUFDWSxFQUFELEVBQUtLLGNBQUwsQ0FBbEM7O0FBRUEsUUFBSSxDQUFDUCxXQUFMLEVBQWtCO0FBQ2hCLGFBQU9aLFdBQVcsQ0FBQ1MsRUFBRCxFQUFLLGtCQUFMLENBQWxCO0FBQ0Q7QUFDRixHQU5ELENBTUUsT0FBT1csQ0FBUCxFQUFVO0FBQ1ZqQixJQUFBQSxPQUFPLENBQUNrQixTQUFSLENBQWtCRCxDQUFsQjtBQUNBLFdBQU9uQixtQkFBbUIsQ0FBQ1EsRUFBRCxDQUExQjtBQUNEOztBQUVEQSxFQUFBQSxFQUFFLENBQUNFLFlBQUgsR0FBa0JRLGNBQWxCO0FBQ0FWLEVBQUFBLEVBQUUsQ0FBQ0csV0FBSCxHQUFpQkEsV0FBakI7O0FBRUFDLEVBQUFBLENBQUMsQ0FBQyxZQUFELENBQUQ7O0FBRUFKLEVBQUFBLEVBQUUsQ0FBQ2EsR0FBSCxHQUFTZCxNQUFNLENBQUNlLG9CQUFQLEVBQVQ7QUFDQWQsRUFBQUEsRUFBRSxDQUFDYSxHQUFILENBQU9FLFFBQVAsQ0FBZ0JmLEVBQWhCLEVBQW9CRyxXQUFwQjs7QUFFQSxRQUFNUCxpQkFBaUIsQ0FBQ0ksRUFBRCxFQUFLSyxFQUFMLEVBQVNELENBQVQsQ0FBdkI7QUFDQSxRQUFNVCxjQUFjLENBQUNLLEVBQUQsRUFBS0ssRUFBTCxFQUFTRCxDQUFULENBQXBCO0FBQ0QsQ0F2Q0QiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgaGFzaCA9IHJlcXVpcmUoJy4uLy4uLy4uL3V0aWwvaGFzaCcpXG5jb25zdCB2YWxpZGF0ZVBhcmFtcyA9IHJlcXVpcmUoJy4uLy4uLy4uL3V0aWwvd3MvdmFsaWRhdGVfcGFyYW1zJylcbmNvbnN0IHsgbm90aWZ5RXJyb3IsIG5vdGlmeUludGVybmFsRXJyb3IgfSA9IHJlcXVpcmUoJy4uLy4uLy4uL3V0aWwvd3Mvbm90aWZ5JylcbmNvbnN0IHZlcmlmeVBhc3N3b3JkID0gcmVxdWlyZSgnLi4vLi4vLi4vdXRpbC92ZXJpZnlfcGFzc3dvcmQnKVxuY29uc3QgY2FwdHVyZSA9IHJlcXVpcmUoJy4uLy4uLy4uL2NhcHR1cmUnKVxuXG5jb25zdCBzZW5kU3RyYXRlZ2llcyA9IHJlcXVpcmUoJy4uL3NlbmRfc3RyYXRlZ2llcycpXG5jb25zdCBzZW5kQXV0aGVudGljYXRlZCA9IHJlcXVpcmUoJy4uL3NlbmRfYXV0aGVudGljYXRlZCcpXG5cbm1vZHVsZS5leHBvcnRzID0gYXN5bmMgKHNlcnZlciwgd3MsIG1zZykgPT4ge1xuICBpZiAod3MuYXV0aFBhc3N3b3JkIHx8IHdzLmF1dGhDb250cm9sKSB7XG4gICAgcmV0dXJuIG5vdGlmeUVycm9yKHdzLCAnQWxyZWFkeSBhdXRoZW50aWNhdGVkJylcbiAgfVxuXG4gIGNvbnN0IHsgZCwgZGIgfSA9IHNlcnZlclxuICBjb25zdCBbLCBwYXNzd29yZF0gPSBtc2dcbiAgY29uc3QgdmFsaWRSZXF1ZXN0ID0gdmFsaWRhdGVQYXJhbXMod3MsIHtcbiAgICBwYXNzd29yZDogeyB0eXBlOiAnc3RyaW5nJywgdjogcGFzc3dvcmQgfVxuICB9KVxuXG4gIGlmICghdmFsaWRSZXF1ZXN0KSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICBjb25zdCBoYXNoZWRQYXNzd29yZCA9IGhhc2gocGFzc3dvcmQpXG4gIGxldCBhdXRoQ29udHJvbFxuXG4gIHRyeSB7XG4gICAgYXV0aENvbnRyb2wgPSBhd2FpdCB2ZXJpZnlQYXNzd29yZChkYiwgaGFzaGVkUGFzc3dvcmQpXG5cbiAgICBpZiAoIWF1dGhDb250cm9sKSB7XG4gICAgICByZXR1cm4gbm90aWZ5RXJyb3Iod3MsICdJbnZhbGlkIHBhc3N3b3JkJylcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjYXB0dXJlLmV4Y2VwdGlvbihlKVxuICAgIHJldHVybiBub3RpZnlJbnRlcm5hbEVycm9yKHdzKVxuICB9XG5cbiAgd3MuYXV0aFBhc3N3b3JkID0gaGFzaGVkUGFzc3dvcmRcbiAgd3MuYXV0aENvbnRyb2wgPSBhdXRoQ29udHJvbFxuXG4gIGQoJ2lkZW50aWZpZWQnKVxuXG4gIHdzLmFvYyA9IHNlcnZlci5vcGVuQWxnb1NlcnZlckNsaWVudCgpXG4gIHdzLmFvYy5pZGVudGlmeSh3cywgYXV0aENvbnRyb2wpXG5cbiAgYXdhaXQgc2VuZEF1dGhlbnRpY2F0ZWQod3MsIGRiLCBkKVxuICBhd2FpdCBzZW5kU3RyYXRlZ2llcyh3cywgZGIsIGQpXG59XG4iXX0=