'use strict';

const capture = require('../../../capture');
const send = require('../../../util/ws/send');
const sendError = require('../../../util/ws/send_error');
const validateParams = require('../../../util/ws/validate_params');
const queryCandles = require('../../../db/query_candles');
const { notifyInternalError } = require('../../../util/ws/notify');

module.exports = async (server, ws, msg) => {
  const { hfDSClients } = server;
  const [, exID, market, tf, start, end] = msg;
  const valid = validateParams(ws, {
    exID: { type: 'string', v: exID },
    market: { type: 'object', v: market },
    tf: { type: 'string', v: tf },
    start: { type: 'number', v: start },
    end: { type: 'number', v: end } });


  if (!valid) {
    return;
  }

  const hfDS = hfDSClients[exID];

  if (!hfDS) {
    return sendError(ws, `unknown exchange: ${exID}`);
  }

  if (!hfDS.isOpen()) {
    return sendError(ws, `data server not connected for ${exID}`);
  }

  let candles;

  try {
    candles = await queryCandles({ ws, exID, market, tf, start, end, hfDS });
  } catch (e) {
    capture.exception(e);
    return notifyInternalError(ws);
  }

  if (candles === null) {
    return; // already sent by ds
  }

  send(ws, ['data.candles', exID, market.uiID, tf, start, end, candles.map(c => ({
    open: +c.open,
    high: +c.high,
    low: +c.low,
    close: +c.close,
    volume: +c.volume,
    mts: +c.mts }))]);

};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93c19zZXJ2ZXJzL2FwaS9oYW5kbGVycy9vbl9jYW5kbGVfcmVxdWVzdC5qcyJdLCJuYW1lcyI6WyJjYXB0dXJlIiwicmVxdWlyZSIsInNlbmQiLCJzZW5kRXJyb3IiLCJ2YWxpZGF0ZVBhcmFtcyIsInF1ZXJ5Q2FuZGxlcyIsIm5vdGlmeUludGVybmFsRXJyb3IiLCJtb2R1bGUiLCJleHBvcnRzIiwic2VydmVyIiwid3MiLCJtc2ciLCJoZkRTQ2xpZW50cyIsImV4SUQiLCJtYXJrZXQiLCJ0ZiIsInN0YXJ0IiwiZW5kIiwidmFsaWQiLCJ0eXBlIiwidiIsImhmRFMiLCJpc09wZW4iLCJjYW5kbGVzIiwiZSIsImV4Y2VwdGlvbiIsInVpSUQiLCJtYXAiLCJjIiwib3BlbiIsImhpZ2giLCJsb3ciLCJjbG9zZSIsInZvbHVtZSIsIm10cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsTUFBTUEsT0FBTyxHQUFHQyxPQUFPLENBQUMsa0JBQUQsQ0FBdkI7QUFDQSxNQUFNQyxJQUFJLEdBQUdELE9BQU8sQ0FBQyx1QkFBRCxDQUFwQjtBQUNBLE1BQU1FLFNBQVMsR0FBR0YsT0FBTyxDQUFDLDZCQUFELENBQXpCO0FBQ0EsTUFBTUcsY0FBYyxHQUFHSCxPQUFPLENBQUMsa0NBQUQsQ0FBOUI7QUFDQSxNQUFNSSxZQUFZLEdBQUdKLE9BQU8sQ0FBQywyQkFBRCxDQUE1QjtBQUNBLE1BQU0sRUFBRUssbUJBQUYsS0FBMEJMLE9BQU8sQ0FBQyx5QkFBRCxDQUF2Qzs7QUFFQU0sTUFBTSxDQUFDQyxPQUFQLEdBQWlCLE9BQU9DLE1BQVAsRUFBZUMsRUFBZixFQUFtQkMsR0FBbkIsS0FBMkI7QUFDMUMsUUFBTSxFQUFFQyxXQUFGLEtBQWtCSCxNQUF4QjtBQUNBLFFBQU0sR0FBR0ksSUFBSCxFQUFTQyxNQUFULEVBQWlCQyxFQUFqQixFQUFxQkMsS0FBckIsRUFBNEJDLEdBQTVCLElBQW1DTixHQUF6QztBQUNBLFFBQU1PLEtBQUssR0FBR2QsY0FBYyxDQUFDTSxFQUFELEVBQUs7QUFDL0JHLElBQUFBLElBQUksRUFBRSxFQUFFTSxJQUFJLEVBQUUsUUFBUixFQUFrQkMsQ0FBQyxFQUFFUCxJQUFyQixFQUR5QjtBQUUvQkMsSUFBQUEsTUFBTSxFQUFFLEVBQUVLLElBQUksRUFBRSxRQUFSLEVBQWtCQyxDQUFDLEVBQUVOLE1BQXJCLEVBRnVCO0FBRy9CQyxJQUFBQSxFQUFFLEVBQUUsRUFBRUksSUFBSSxFQUFFLFFBQVIsRUFBa0JDLENBQUMsRUFBRUwsRUFBckIsRUFIMkI7QUFJL0JDLElBQUFBLEtBQUssRUFBRSxFQUFFRyxJQUFJLEVBQUUsUUFBUixFQUFrQkMsQ0FBQyxFQUFFSixLQUFyQixFQUp3QjtBQUsvQkMsSUFBQUEsR0FBRyxFQUFFLEVBQUVFLElBQUksRUFBRSxRQUFSLEVBQWtCQyxDQUFDLEVBQUVILEdBQXJCLEVBTDBCLEVBQUwsQ0FBNUI7OztBQVFBLE1BQUksQ0FBQ0MsS0FBTCxFQUFZO0FBQ1Y7QUFDRDs7QUFFRCxRQUFNRyxJQUFJLEdBQUdULFdBQVcsQ0FBQ0MsSUFBRCxDQUF4Qjs7QUFFQSxNQUFJLENBQUNRLElBQUwsRUFBVztBQUNULFdBQU9sQixTQUFTLENBQUNPLEVBQUQsRUFBTSxxQkFBb0JHLElBQUssRUFBL0IsQ0FBaEI7QUFDRDs7QUFFRCxNQUFJLENBQUNRLElBQUksQ0FBQ0MsTUFBTCxFQUFMLEVBQW9CO0FBQ2xCLFdBQU9uQixTQUFTLENBQUNPLEVBQUQsRUFBTSxpQ0FBZ0NHLElBQUssRUFBM0MsQ0FBaEI7QUFDRDs7QUFFRCxNQUFJVSxPQUFKOztBQUVBLE1BQUk7QUFDRkEsSUFBQUEsT0FBTyxHQUFHLE1BQU1sQixZQUFZLENBQUMsRUFBRUssRUFBRixFQUFNRyxJQUFOLEVBQVlDLE1BQVosRUFBb0JDLEVBQXBCLEVBQXdCQyxLQUF4QixFQUErQkMsR0FBL0IsRUFBb0NJLElBQXBDLEVBQUQsQ0FBNUI7QUFDRCxHQUZELENBRUUsT0FBT0csQ0FBUCxFQUFVO0FBQ1Z4QixJQUFBQSxPQUFPLENBQUN5QixTQUFSLENBQWtCRCxDQUFsQjtBQUNBLFdBQU9sQixtQkFBbUIsQ0FBQ0ksRUFBRCxDQUExQjtBQUNEOztBQUVELE1BQUlhLE9BQU8sS0FBSyxJQUFoQixFQUFzQjtBQUNwQixXQURvQixDQUNiO0FBQ1I7O0FBRURyQixFQUFBQSxJQUFJLENBQUNRLEVBQUQsRUFBSyxDQUFDLGNBQUQsRUFBaUJHLElBQWpCLEVBQXVCQyxNQUFNLENBQUNZLElBQTlCLEVBQW9DWCxFQUFwQyxFQUF3Q0MsS0FBeEMsRUFBK0NDLEdBQS9DLEVBQW9ETSxPQUFPLENBQUNJLEdBQVIsQ0FBWUMsQ0FBQyxLQUFLO0FBQzdFQyxJQUFBQSxJQUFJLEVBQUUsQ0FBQ0QsQ0FBQyxDQUFDQyxJQURvRTtBQUU3RUMsSUFBQUEsSUFBSSxFQUFFLENBQUNGLENBQUMsQ0FBQ0UsSUFGb0U7QUFHN0VDLElBQUFBLEdBQUcsRUFBRSxDQUFDSCxDQUFDLENBQUNHLEdBSHFFO0FBSTdFQyxJQUFBQSxLQUFLLEVBQUUsQ0FBQ0osQ0FBQyxDQUFDSSxLQUptRTtBQUs3RUMsSUFBQUEsTUFBTSxFQUFFLENBQUNMLENBQUMsQ0FBQ0ssTUFMa0U7QUFNN0VDLElBQUFBLEdBQUcsRUFBRSxDQUFDTixDQUFDLENBQUNNLEdBTnFFLEVBQUwsQ0FBYixDQUFwRCxDQUFMLENBQUo7O0FBUUQsQ0E5Q0QiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgY2FwdHVyZSA9IHJlcXVpcmUoJy4uLy4uLy4uL2NhcHR1cmUnKVxuY29uc3Qgc2VuZCA9IHJlcXVpcmUoJy4uLy4uLy4uL3V0aWwvd3Mvc2VuZCcpXG5jb25zdCBzZW5kRXJyb3IgPSByZXF1aXJlKCcuLi8uLi8uLi91dGlsL3dzL3NlbmRfZXJyb3InKVxuY29uc3QgdmFsaWRhdGVQYXJhbXMgPSByZXF1aXJlKCcuLi8uLi8uLi91dGlsL3dzL3ZhbGlkYXRlX3BhcmFtcycpXG5jb25zdCBxdWVyeUNhbmRsZXMgPSByZXF1aXJlKCcuLi8uLi8uLi9kYi9xdWVyeV9jYW5kbGVzJylcbmNvbnN0IHsgbm90aWZ5SW50ZXJuYWxFcnJvciB9ID0gcmVxdWlyZSgnLi4vLi4vLi4vdXRpbC93cy9ub3RpZnknKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFzeW5jIChzZXJ2ZXIsIHdzLCBtc2cpID0+IHtcbiAgY29uc3QgeyBoZkRTQ2xpZW50cyB9ID0gc2VydmVyXG4gIGNvbnN0IFssIGV4SUQsIG1hcmtldCwgdGYsIHN0YXJ0LCBlbmRdID0gbXNnXG4gIGNvbnN0IHZhbGlkID0gdmFsaWRhdGVQYXJhbXMod3MsIHtcbiAgICBleElEOiB7IHR5cGU6ICdzdHJpbmcnLCB2OiBleElEIH0sXG4gICAgbWFya2V0OiB7IHR5cGU6ICdvYmplY3QnLCB2OiBtYXJrZXQgfSxcbiAgICB0ZjogeyB0eXBlOiAnc3RyaW5nJywgdjogdGYgfSxcbiAgICBzdGFydDogeyB0eXBlOiAnbnVtYmVyJywgdjogc3RhcnQgfSxcbiAgICBlbmQ6IHsgdHlwZTogJ251bWJlcicsIHY6IGVuZCB9XG4gIH0pXG5cbiAgaWYgKCF2YWxpZCkge1xuICAgIHJldHVyblxuICB9XG5cbiAgY29uc3QgaGZEUyA9IGhmRFNDbGllbnRzW2V4SURdXG5cbiAgaWYgKCFoZkRTKSB7XG4gICAgcmV0dXJuIHNlbmRFcnJvcih3cywgYHVua25vd24gZXhjaGFuZ2U6ICR7ZXhJRH1gKVxuICB9XG5cbiAgaWYgKCFoZkRTLmlzT3BlbigpKSB7XG4gICAgcmV0dXJuIHNlbmRFcnJvcih3cywgYGRhdGEgc2VydmVyIG5vdCBjb25uZWN0ZWQgZm9yICR7ZXhJRH1gKVxuICB9XG5cbiAgbGV0IGNhbmRsZXNcblxuICB0cnkge1xuICAgIGNhbmRsZXMgPSBhd2FpdCBxdWVyeUNhbmRsZXMoeyB3cywgZXhJRCwgbWFya2V0LCB0Ziwgc3RhcnQsIGVuZCwgaGZEUyB9KVxuICB9IGNhdGNoIChlKSB7XG4gICAgY2FwdHVyZS5leGNlcHRpb24oZSlcbiAgICByZXR1cm4gbm90aWZ5SW50ZXJuYWxFcnJvcih3cylcbiAgfVxuXG4gIGlmIChjYW5kbGVzID09PSBudWxsKSB7XG4gICAgcmV0dXJuIC8vIGFscmVhZHkgc2VudCBieSBkc1xuICB9XG5cbiAgc2VuZCh3cywgWydkYXRhLmNhbmRsZXMnLCBleElELCBtYXJrZXQudWlJRCwgdGYsIHN0YXJ0LCBlbmQsIGNhbmRsZXMubWFwKGMgPT4gKHtcbiAgICBvcGVuOiArYy5vcGVuLFxuICAgIGhpZ2g6ICtjLmhpZ2gsXG4gICAgbG93OiArYy5sb3csXG4gICAgY2xvc2U6ICtjLmNsb3NlLFxuICAgIHZvbHVtZTogK2Mudm9sdW1lLFxuICAgIG10czogK2MubXRzXG4gIH0pKV0pXG59XG4iXX0=