'use strict';

const _capitalize = require('lodash/capitalize');
const sendError = require('../../../util/ws/send_error');
const validateParams = require('../../../util/ws/validate_params');
const isAuthorized = require('../../../util/ws/is_authorized');

const cancelOrderBitfinex = require('../cancel_order_bitfinex');
const cancelOrderBinance = require('../cancel_order_binance');

module.exports = async (server, ws, msg) => {
  const { d } = server;
  const [, authToken, exID, symbol, id] = msg;
  const validRequest = validateParams(ws, {
    exID: { type: 'string', v: exID },
    authToken: { type: 'string', v: authToken },
    symbol: { type: 'string', v: symbol },
    id: { type: 'number', v: id } });


  if (!validRequest) {
    return;
  }

  if (!isAuthorized(ws, authToken)) {
    return sendError(ws, 'Unauthorized');
  } else if (exID !== 'bitfinex' && exID !== 'binance') {
    return sendError(ws, 'Unrecognised exchange, cannot submit order');
  } else if (!ws.clients[exID]) {
    return sendError(ws, `No client open for ${_capitalize(exID)}`);
  }

  switch (exID) {
    case 'bitfinex':{
        await cancelOrderBitfinex(d, ws, ws.clients.bitfinex, symbol, id);
        break;
      }

    case 'binance':{
        await cancelOrderBinance(d, ws, ws.clients.binance, symbol, id);
        break;
      }

    default:{
        d('unknown exID broke through: %s', exID);
      }}

};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93c19zZXJ2ZXJzL2FwaS9oYW5kbGVycy9vbl9vcmRlcl9jYW5jZWwuanMiXSwibmFtZXMiOlsiX2NhcGl0YWxpemUiLCJyZXF1aXJlIiwic2VuZEVycm9yIiwidmFsaWRhdGVQYXJhbXMiLCJpc0F1dGhvcml6ZWQiLCJjYW5jZWxPcmRlckJpdGZpbmV4IiwiY2FuY2VsT3JkZXJCaW5hbmNlIiwibW9kdWxlIiwiZXhwb3J0cyIsInNlcnZlciIsIndzIiwibXNnIiwiZCIsImF1dGhUb2tlbiIsImV4SUQiLCJzeW1ib2wiLCJpZCIsInZhbGlkUmVxdWVzdCIsInR5cGUiLCJ2IiwiY2xpZW50cyIsImJpdGZpbmV4IiwiYmluYW5jZSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsTUFBTUEsV0FBVyxHQUFHQyxPQUFPLENBQUMsbUJBQUQsQ0FBM0I7QUFDQSxNQUFNQyxTQUFTLEdBQUdELE9BQU8sQ0FBQyw2QkFBRCxDQUF6QjtBQUNBLE1BQU1FLGNBQWMsR0FBR0YsT0FBTyxDQUFDLGtDQUFELENBQTlCO0FBQ0EsTUFBTUcsWUFBWSxHQUFHSCxPQUFPLENBQUMsZ0NBQUQsQ0FBNUI7O0FBRUEsTUFBTUksbUJBQW1CLEdBQUdKLE9BQU8sQ0FBQywwQkFBRCxDQUFuQztBQUNBLE1BQU1LLGtCQUFrQixHQUFHTCxPQUFPLENBQUMseUJBQUQsQ0FBbEM7O0FBRUFNLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixPQUFPQyxNQUFQLEVBQWVDLEVBQWYsRUFBbUJDLEdBQW5CLEtBQTJCO0FBQzFDLFFBQU0sRUFBRUMsQ0FBRixLQUFRSCxNQUFkO0FBQ0EsUUFBTSxHQUFHSSxTQUFILEVBQWNDLElBQWQsRUFBb0JDLE1BQXBCLEVBQTRCQyxFQUE1QixJQUFrQ0wsR0FBeEM7QUFDQSxRQUFNTSxZQUFZLEdBQUdkLGNBQWMsQ0FBQ08sRUFBRCxFQUFLO0FBQ3RDSSxJQUFBQSxJQUFJLEVBQUUsRUFBRUksSUFBSSxFQUFFLFFBQVIsRUFBa0JDLENBQUMsRUFBRUwsSUFBckIsRUFEZ0M7QUFFdENELElBQUFBLFNBQVMsRUFBRSxFQUFFSyxJQUFJLEVBQUUsUUFBUixFQUFrQkMsQ0FBQyxFQUFFTixTQUFyQixFQUYyQjtBQUd0Q0UsSUFBQUEsTUFBTSxFQUFFLEVBQUVHLElBQUksRUFBRSxRQUFSLEVBQWtCQyxDQUFDLEVBQUVKLE1BQXJCLEVBSDhCO0FBSXRDQyxJQUFBQSxFQUFFLEVBQUUsRUFBRUUsSUFBSSxFQUFFLFFBQVIsRUFBa0JDLENBQUMsRUFBRUgsRUFBckIsRUFKa0MsRUFBTCxDQUFuQzs7O0FBT0EsTUFBSSxDQUFDQyxZQUFMLEVBQW1CO0FBQ2pCO0FBQ0Q7O0FBRUQsTUFBSSxDQUFDYixZQUFZLENBQUNNLEVBQUQsRUFBS0csU0FBTCxDQUFqQixFQUFrQztBQUNoQyxXQUFPWCxTQUFTLENBQUNRLEVBQUQsRUFBSyxjQUFMLENBQWhCO0FBQ0QsR0FGRCxNQUVPLElBQUlJLElBQUksS0FBSyxVQUFULElBQXVCQSxJQUFJLEtBQUssU0FBcEMsRUFBK0M7QUFDcEQsV0FBT1osU0FBUyxDQUFDUSxFQUFELEVBQUssNENBQUwsQ0FBaEI7QUFDRCxHQUZNLE1BRUEsSUFBSSxDQUFDQSxFQUFFLENBQUNVLE9BQUgsQ0FBV04sSUFBWCxDQUFMLEVBQXVCO0FBQzVCLFdBQU9aLFNBQVMsQ0FBQ1EsRUFBRCxFQUFNLHNCQUFxQlYsV0FBVyxDQUFDYyxJQUFELENBQU8sRUFBN0MsQ0FBaEI7QUFDRDs7QUFFRCxVQUFRQSxJQUFSO0FBQ0UsU0FBSyxVQUFMLENBQWlCO0FBQ2YsY0FBTVQsbUJBQW1CLENBQUNPLENBQUQsRUFBSUYsRUFBSixFQUFRQSxFQUFFLENBQUNVLE9BQUgsQ0FBV0MsUUFBbkIsRUFBNkJOLE1BQTdCLEVBQXFDQyxFQUFyQyxDQUF6QjtBQUNBO0FBQ0Q7O0FBRUQsU0FBSyxTQUFMLENBQWdCO0FBQ2QsY0FBTVYsa0JBQWtCLENBQUNNLENBQUQsRUFBSUYsRUFBSixFQUFRQSxFQUFFLENBQUNVLE9BQUgsQ0FBV0UsT0FBbkIsRUFBNEJQLE1BQTVCLEVBQW9DQyxFQUFwQyxDQUF4QjtBQUNBO0FBQ0Q7O0FBRUQsWUFBUztBQUNQSixRQUFBQSxDQUFDLENBQUMsZ0NBQUQsRUFBbUNFLElBQW5DLENBQUQ7QUFDRCxPQWJIOztBQWVELENBckNEIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IF9jYXBpdGFsaXplID0gcmVxdWlyZSgnbG9kYXNoL2NhcGl0YWxpemUnKVxuY29uc3Qgc2VuZEVycm9yID0gcmVxdWlyZSgnLi4vLi4vLi4vdXRpbC93cy9zZW5kX2Vycm9yJylcbmNvbnN0IHZhbGlkYXRlUGFyYW1zID0gcmVxdWlyZSgnLi4vLi4vLi4vdXRpbC93cy92YWxpZGF0ZV9wYXJhbXMnKVxuY29uc3QgaXNBdXRob3JpemVkID0gcmVxdWlyZSgnLi4vLi4vLi4vdXRpbC93cy9pc19hdXRob3JpemVkJylcblxuY29uc3QgY2FuY2VsT3JkZXJCaXRmaW5leCA9IHJlcXVpcmUoJy4uL2NhbmNlbF9vcmRlcl9iaXRmaW5leCcpXG5jb25zdCBjYW5jZWxPcmRlckJpbmFuY2UgPSByZXF1aXJlKCcuLi9jYW5jZWxfb3JkZXJfYmluYW5jZScpXG5cbm1vZHVsZS5leHBvcnRzID0gYXN5bmMgKHNlcnZlciwgd3MsIG1zZykgPT4ge1xuICBjb25zdCB7IGQgfSA9IHNlcnZlclxuICBjb25zdCBbLCBhdXRoVG9rZW4sIGV4SUQsIHN5bWJvbCwgaWRdID0gbXNnXG4gIGNvbnN0IHZhbGlkUmVxdWVzdCA9IHZhbGlkYXRlUGFyYW1zKHdzLCB7XG4gICAgZXhJRDogeyB0eXBlOiAnc3RyaW5nJywgdjogZXhJRCB9LFxuICAgIGF1dGhUb2tlbjogeyB0eXBlOiAnc3RyaW5nJywgdjogYXV0aFRva2VuIH0sXG4gICAgc3ltYm9sOiB7IHR5cGU6ICdzdHJpbmcnLCB2OiBzeW1ib2wgfSxcbiAgICBpZDogeyB0eXBlOiAnbnVtYmVyJywgdjogaWQgfVxuICB9KVxuXG4gIGlmICghdmFsaWRSZXF1ZXN0KSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICBpZiAoIWlzQXV0aG9yaXplZCh3cywgYXV0aFRva2VuKSkge1xuICAgIHJldHVybiBzZW5kRXJyb3Iod3MsICdVbmF1dGhvcml6ZWQnKVxuICB9IGVsc2UgaWYgKGV4SUQgIT09ICdiaXRmaW5leCcgJiYgZXhJRCAhPT0gJ2JpbmFuY2UnKSB7XG4gICAgcmV0dXJuIHNlbmRFcnJvcih3cywgJ1VucmVjb2duaXNlZCBleGNoYW5nZSwgY2Fubm90IHN1Ym1pdCBvcmRlcicpXG4gIH0gZWxzZSBpZiAoIXdzLmNsaWVudHNbZXhJRF0pIHtcbiAgICByZXR1cm4gc2VuZEVycm9yKHdzLCBgTm8gY2xpZW50IG9wZW4gZm9yICR7X2NhcGl0YWxpemUoZXhJRCl9YClcbiAgfVxuXG4gIHN3aXRjaCAoZXhJRCkge1xuICAgIGNhc2UgJ2JpdGZpbmV4Jzoge1xuICAgICAgYXdhaXQgY2FuY2VsT3JkZXJCaXRmaW5leChkLCB3cywgd3MuY2xpZW50cy5iaXRmaW5leCwgc3ltYm9sLCBpZClcbiAgICAgIGJyZWFrXG4gICAgfVxuXG4gICAgY2FzZSAnYmluYW5jZSc6IHtcbiAgICAgIGF3YWl0IGNhbmNlbE9yZGVyQmluYW5jZShkLCB3cywgd3MuY2xpZW50cy5iaW5hbmNlLCBzeW1ib2wsIGlkKVxuICAgICAgYnJlYWtcbiAgICB9XG5cbiAgICBkZWZhdWx0OiB7XG4gICAgICBkKCd1bmtub3duIGV4SUQgYnJva2UgdGhyb3VnaDogJXMnLCBleElEKVxuICAgIH1cbiAgfVxufVxuIl19