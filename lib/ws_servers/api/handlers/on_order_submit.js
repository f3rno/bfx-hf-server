'use strict';

const { _default: DEFAULT_SETTINGS } = require('bfx-hf-ui-config').UserSettings;
const _capitalize = require('lodash/capitalize');
const sendError = require('../../../util/ws/send_error');
const validateParams = require('../../../util/ws/validate_params');
const isAuthorized = require('../../../util/ws/is_authorized');

const submitOrderBitfinex = require('../submit_order_bitfinex');
const submitOrderBinance = require('../submit_order_binance');

module.exports = async (server, ws, msg) => {
  const { d, db } = server;
  const { UserSettings } = db;
  const [, authToken, exID, packet] = msg;
  const validRequest = validateParams(ws, {
    exID: { type: 'string', v: exID },
    authToken: { type: 'string', v: authToken },
    packet: { type: 'object', v: packet } });


  if (!validRequest) {
    return;
  }

  if (!isAuthorized(ws, authToken)) {
    return sendError(ws, 'Unauthorized');
  } else if (exID !== 'bitfinex' && exID !== 'binance') {
    return sendError(ws, 'Unrecognised exchange, cannot submit order');
  } else if (!ws.clients[exID]) {
    return sendError(ws, `No client open for ${_capitalize(exID)}`);
  }

  switch (exID) {
    case 'bitfinex':{
        const { userSettings = DEFAULT_SETTINGS } = await UserSettings.getAll();

        if (!packet.meta) {
          packet.meta = {};
        }

        packet.meta.aff_code = userSettings.affiliateCode; // eslint-disable-line

        await submitOrderBitfinex(d, ws, ws.clients.bitfinex, packet);
        break;
      }

    case 'binance':{
        await submitOrderBinance(d, ws, ws.clients.binance, packet);
        break;
      }

    default:{
        d('unknown exID broke through: %s', exID);
      }}

};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93c19zZXJ2ZXJzL2FwaS9oYW5kbGVycy9vbl9vcmRlcl9zdWJtaXQuanMiXSwibmFtZXMiOlsiX2RlZmF1bHQiLCJERUZBVUxUX1NFVFRJTkdTIiwicmVxdWlyZSIsIlVzZXJTZXR0aW5ncyIsIl9jYXBpdGFsaXplIiwic2VuZEVycm9yIiwidmFsaWRhdGVQYXJhbXMiLCJpc0F1dGhvcml6ZWQiLCJzdWJtaXRPcmRlckJpdGZpbmV4Iiwic3VibWl0T3JkZXJCaW5hbmNlIiwibW9kdWxlIiwiZXhwb3J0cyIsInNlcnZlciIsIndzIiwibXNnIiwiZCIsImRiIiwiYXV0aFRva2VuIiwiZXhJRCIsInBhY2tldCIsInZhbGlkUmVxdWVzdCIsInR5cGUiLCJ2IiwiY2xpZW50cyIsInVzZXJTZXR0aW5ncyIsImdldEFsbCIsIm1ldGEiLCJhZmZfY29kZSIsImFmZmlsaWF0ZUNvZGUiLCJiaXRmaW5leCIsImJpbmFuY2UiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLE1BQU0sRUFBRUEsUUFBUSxFQUFFQyxnQkFBWixLQUFpQ0MsT0FBTyxDQUFDLGtCQUFELENBQVAsQ0FBNEJDLFlBQW5FO0FBQ0EsTUFBTUMsV0FBVyxHQUFHRixPQUFPLENBQUMsbUJBQUQsQ0FBM0I7QUFDQSxNQUFNRyxTQUFTLEdBQUdILE9BQU8sQ0FBQyw2QkFBRCxDQUF6QjtBQUNBLE1BQU1JLGNBQWMsR0FBR0osT0FBTyxDQUFDLGtDQUFELENBQTlCO0FBQ0EsTUFBTUssWUFBWSxHQUFHTCxPQUFPLENBQUMsZ0NBQUQsQ0FBNUI7O0FBRUEsTUFBTU0sbUJBQW1CLEdBQUdOLE9BQU8sQ0FBQywwQkFBRCxDQUFuQztBQUNBLE1BQU1PLGtCQUFrQixHQUFHUCxPQUFPLENBQUMseUJBQUQsQ0FBbEM7O0FBRUFRLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixPQUFPQyxNQUFQLEVBQWVDLEVBQWYsRUFBbUJDLEdBQW5CLEtBQTJCO0FBQzFDLFFBQU0sRUFBRUMsQ0FBRixFQUFLQyxFQUFMLEtBQVlKLE1BQWxCO0FBQ0EsUUFBTSxFQUFFVCxZQUFGLEtBQW1CYSxFQUF6QjtBQUNBLFFBQU0sR0FBR0MsU0FBSCxFQUFjQyxJQUFkLEVBQW9CQyxNQUFwQixJQUE4QkwsR0FBcEM7QUFDQSxRQUFNTSxZQUFZLEdBQUdkLGNBQWMsQ0FBQ08sRUFBRCxFQUFLO0FBQ3RDSyxJQUFBQSxJQUFJLEVBQUUsRUFBRUcsSUFBSSxFQUFFLFFBQVIsRUFBa0JDLENBQUMsRUFBRUosSUFBckIsRUFEZ0M7QUFFdENELElBQUFBLFNBQVMsRUFBRSxFQUFFSSxJQUFJLEVBQUUsUUFBUixFQUFrQkMsQ0FBQyxFQUFFTCxTQUFyQixFQUYyQjtBQUd0Q0UsSUFBQUEsTUFBTSxFQUFFLEVBQUVFLElBQUksRUFBRSxRQUFSLEVBQWtCQyxDQUFDLEVBQUVILE1BQXJCLEVBSDhCLEVBQUwsQ0FBbkM7OztBQU1BLE1BQUksQ0FBQ0MsWUFBTCxFQUFtQjtBQUNqQjtBQUNEOztBQUVELE1BQUksQ0FBQ2IsWUFBWSxDQUFDTSxFQUFELEVBQUtJLFNBQUwsQ0FBakIsRUFBa0M7QUFDaEMsV0FBT1osU0FBUyxDQUFDUSxFQUFELEVBQUssY0FBTCxDQUFoQjtBQUNELEdBRkQsTUFFTyxJQUFJSyxJQUFJLEtBQUssVUFBVCxJQUF1QkEsSUFBSSxLQUFLLFNBQXBDLEVBQStDO0FBQ3BELFdBQU9iLFNBQVMsQ0FBQ1EsRUFBRCxFQUFLLDRDQUFMLENBQWhCO0FBQ0QsR0FGTSxNQUVBLElBQUksQ0FBQ0EsRUFBRSxDQUFDVSxPQUFILENBQVdMLElBQVgsQ0FBTCxFQUF1QjtBQUM1QixXQUFPYixTQUFTLENBQUNRLEVBQUQsRUFBTSxzQkFBcUJULFdBQVcsQ0FBQ2MsSUFBRCxDQUFPLEVBQTdDLENBQWhCO0FBQ0Q7O0FBRUQsVUFBUUEsSUFBUjtBQUNFLFNBQUssVUFBTCxDQUFpQjtBQUNmLGNBQU0sRUFBRU0sWUFBWSxHQUFHdkIsZ0JBQWpCLEtBQXNDLE1BQU1FLFlBQVksQ0FBQ3NCLE1BQWIsRUFBbEQ7O0FBRUEsWUFBSSxDQUFDTixNQUFNLENBQUNPLElBQVosRUFBa0I7QUFDaEJQLFVBQUFBLE1BQU0sQ0FBQ08sSUFBUCxHQUFjLEVBQWQ7QUFDRDs7QUFFRFAsUUFBQUEsTUFBTSxDQUFDTyxJQUFQLENBQVlDLFFBQVosR0FBdUJILFlBQVksQ0FBQ0ksYUFBcEMsQ0FQZSxDQU9tQzs7QUFFbEQsY0FBTXBCLG1CQUFtQixDQUFDTyxDQUFELEVBQUlGLEVBQUosRUFBUUEsRUFBRSxDQUFDVSxPQUFILENBQVdNLFFBQW5CLEVBQTZCVixNQUE3QixDQUF6QjtBQUNBO0FBQ0Q7O0FBRUQsU0FBSyxTQUFMLENBQWdCO0FBQ2QsY0FBTVYsa0JBQWtCLENBQUNNLENBQUQsRUFBSUYsRUFBSixFQUFRQSxFQUFFLENBQUNVLE9BQUgsQ0FBV08sT0FBbkIsRUFBNEJYLE1BQTVCLENBQXhCO0FBQ0E7QUFDRDs7QUFFRCxZQUFTO0FBQ1BKLFFBQUFBLENBQUMsQ0FBQyxnQ0FBRCxFQUFtQ0csSUFBbkMsQ0FBRDtBQUNELE9BckJIOztBQXVCRCxDQTdDRCIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5jb25zdCB7IF9kZWZhdWx0OiBERUZBVUxUX1NFVFRJTkdTIH0gPSByZXF1aXJlKCdiZngtaGYtdWktY29uZmlnJykuVXNlclNldHRpbmdzXG5jb25zdCBfY2FwaXRhbGl6ZSA9IHJlcXVpcmUoJ2xvZGFzaC9jYXBpdGFsaXplJylcbmNvbnN0IHNlbmRFcnJvciA9IHJlcXVpcmUoJy4uLy4uLy4uL3V0aWwvd3Mvc2VuZF9lcnJvcicpXG5jb25zdCB2YWxpZGF0ZVBhcmFtcyA9IHJlcXVpcmUoJy4uLy4uLy4uL3V0aWwvd3MvdmFsaWRhdGVfcGFyYW1zJylcbmNvbnN0IGlzQXV0aG9yaXplZCA9IHJlcXVpcmUoJy4uLy4uLy4uL3V0aWwvd3MvaXNfYXV0aG9yaXplZCcpXG5cbmNvbnN0IHN1Ym1pdE9yZGVyQml0ZmluZXggPSByZXF1aXJlKCcuLi9zdWJtaXRfb3JkZXJfYml0ZmluZXgnKVxuY29uc3Qgc3VibWl0T3JkZXJCaW5hbmNlID0gcmVxdWlyZSgnLi4vc3VibWl0X29yZGVyX2JpbmFuY2UnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFzeW5jIChzZXJ2ZXIsIHdzLCBtc2cpID0+IHtcbiAgY29uc3QgeyBkLCBkYiB9ID0gc2VydmVyXG4gIGNvbnN0IHsgVXNlclNldHRpbmdzIH0gPSBkYlxuICBjb25zdCBbLCBhdXRoVG9rZW4sIGV4SUQsIHBhY2tldF0gPSBtc2dcbiAgY29uc3QgdmFsaWRSZXF1ZXN0ID0gdmFsaWRhdGVQYXJhbXMod3MsIHtcbiAgICBleElEOiB7IHR5cGU6ICdzdHJpbmcnLCB2OiBleElEIH0sXG4gICAgYXV0aFRva2VuOiB7IHR5cGU6ICdzdHJpbmcnLCB2OiBhdXRoVG9rZW4gfSxcbiAgICBwYWNrZXQ6IHsgdHlwZTogJ29iamVjdCcsIHY6IHBhY2tldCB9XG4gIH0pXG5cbiAgaWYgKCF2YWxpZFJlcXVlc3QpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIGlmICghaXNBdXRob3JpemVkKHdzLCBhdXRoVG9rZW4pKSB7XG4gICAgcmV0dXJuIHNlbmRFcnJvcih3cywgJ1VuYXV0aG9yaXplZCcpXG4gIH0gZWxzZSBpZiAoZXhJRCAhPT0gJ2JpdGZpbmV4JyAmJiBleElEICE9PSAnYmluYW5jZScpIHtcbiAgICByZXR1cm4gc2VuZEVycm9yKHdzLCAnVW5yZWNvZ25pc2VkIGV4Y2hhbmdlLCBjYW5ub3Qgc3VibWl0IG9yZGVyJylcbiAgfSBlbHNlIGlmICghd3MuY2xpZW50c1tleElEXSkge1xuICAgIHJldHVybiBzZW5kRXJyb3Iod3MsIGBObyBjbGllbnQgb3BlbiBmb3IgJHtfY2FwaXRhbGl6ZShleElEKX1gKVxuICB9XG5cbiAgc3dpdGNoIChleElEKSB7XG4gICAgY2FzZSAnYml0ZmluZXgnOiB7XG4gICAgICBjb25zdCB7IHVzZXJTZXR0aW5ncyA9IERFRkFVTFRfU0VUVElOR1MgfSA9IGF3YWl0IFVzZXJTZXR0aW5ncy5nZXRBbGwoKVxuXG4gICAgICBpZiAoIXBhY2tldC5tZXRhKSB7XG4gICAgICAgIHBhY2tldC5tZXRhID0ge31cbiAgICAgIH1cblxuICAgICAgcGFja2V0Lm1ldGEuYWZmX2NvZGUgPSB1c2VyU2V0dGluZ3MuYWZmaWxpYXRlQ29kZSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgICAgIGF3YWl0IHN1Ym1pdE9yZGVyQml0ZmluZXgoZCwgd3MsIHdzLmNsaWVudHMuYml0ZmluZXgsIHBhY2tldClcbiAgICAgIGJyZWFrXG4gICAgfVxuXG4gICAgY2FzZSAnYmluYW5jZSc6IHtcbiAgICAgIGF3YWl0IHN1Ym1pdE9yZGVyQmluYW5jZShkLCB3cywgd3MuY2xpZW50cy5iaW5hbmNlLCBwYWNrZXQpXG4gICAgICBicmVha1xuICAgIH1cblxuICAgIGRlZmF1bHQ6IHtcbiAgICAgIGQoJ3Vua25vd24gZXhJRCBicm9rZSB0aHJvdWdoOiAlcycsIGV4SUQpXG4gICAgfVxuICB9XG59XG4iXX0=