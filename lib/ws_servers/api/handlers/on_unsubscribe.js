'use strict';

const _isEqual = require('lodash/isEqual');
const removePoolClient = require('../../../ws_clients/ex_pool/remove_client');
const validateParams = require('../../../util/ws/validate_params');

module.exports = (server, ws, msg) => {
  const [, exID, channelData] = msg;
  const validRequest = validateParams(ws, {
    exID: { type: 'string', v: exID },
    channelData: { type: 'object', v: channelData } });


  if (!validRequest) {
    return;
  }

  const poolMessage = ['unsub', exID, channelData];
  const { pc, d } = server;

  if (!(ws.subscriptions || {})[exID]) {
    return d(
    'warning: client %s tried to unsub from channel %j when not on exchange %s',
    ws.id, channelData, exID);

  }

  const subIndex = ws.subscriptions[exID].findIndex((cd) =>
  _isEqual(cd, channelData));


  if (subIndex < 0) {
    return d(
    'error: client %s tried to unsub from non-subscribed channel on %s: %j',
    ws.id, exID, channelData);

  }

  ws.subscriptions[exID].splice(subIndex, 1);

  removePoolClient(pc, ws);
  pc.send(poolMessage);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93c19zZXJ2ZXJzL2FwaS9oYW5kbGVycy9vbl91bnN1YnNjcmliZS5qcyJdLCJuYW1lcyI6WyJfaXNFcXVhbCIsInJlcXVpcmUiLCJyZW1vdmVQb29sQ2xpZW50IiwidmFsaWRhdGVQYXJhbXMiLCJtb2R1bGUiLCJleHBvcnRzIiwic2VydmVyIiwid3MiLCJtc2ciLCJleElEIiwiY2hhbm5lbERhdGEiLCJ2YWxpZFJlcXVlc3QiLCJ0eXBlIiwidiIsInBvb2xNZXNzYWdlIiwicGMiLCJkIiwic3Vic2NyaXB0aW9ucyIsImlkIiwic3ViSW5kZXgiLCJmaW5kSW5kZXgiLCJjZCIsInNwbGljZSIsInNlbmQiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLE1BQU1BLFFBQVEsR0FBR0MsT0FBTyxDQUFDLGdCQUFELENBQXhCO0FBQ0EsTUFBTUMsZ0JBQWdCLEdBQUdELE9BQU8sQ0FBQywyQ0FBRCxDQUFoQztBQUNBLE1BQU1FLGNBQWMsR0FBR0YsT0FBTyxDQUFDLGtDQUFELENBQTlCOztBQUVBRyxNQUFNLENBQUNDLE9BQVAsR0FBaUIsQ0FBQ0MsTUFBRCxFQUFTQyxFQUFULEVBQWFDLEdBQWIsS0FBcUI7QUFDcEMsUUFBTSxHQUFHQyxJQUFILEVBQVNDLFdBQVQsSUFBd0JGLEdBQTlCO0FBQ0EsUUFBTUcsWUFBWSxHQUFHUixjQUFjLENBQUNJLEVBQUQsRUFBSztBQUN0Q0UsSUFBQUEsSUFBSSxFQUFFLEVBQUVHLElBQUksRUFBRSxRQUFSLEVBQWtCQyxDQUFDLEVBQUVKLElBQXJCLEVBRGdDO0FBRXRDQyxJQUFBQSxXQUFXLEVBQUUsRUFBRUUsSUFBSSxFQUFFLFFBQVIsRUFBa0JDLENBQUMsRUFBRUgsV0FBckIsRUFGeUIsRUFBTCxDQUFuQzs7O0FBS0EsTUFBSSxDQUFDQyxZQUFMLEVBQW1CO0FBQ2pCO0FBQ0Q7O0FBRUQsUUFBTUcsV0FBVyxHQUFHLENBQUMsT0FBRCxFQUFVTCxJQUFWLEVBQWdCQyxXQUFoQixDQUFwQjtBQUNBLFFBQU0sRUFBRUssRUFBRixFQUFNQyxDQUFOLEtBQVlWLE1BQWxCOztBQUVBLE1BQUksQ0FBQyxDQUFDQyxFQUFFLENBQUNVLGFBQUgsSUFBb0IsRUFBckIsRUFBeUJSLElBQXpCLENBQUwsRUFBcUM7QUFDbkMsV0FBT08sQ0FBQztBQUNOLCtFQURNO0FBRU5ULElBQUFBLEVBQUUsQ0FBQ1csRUFGRyxFQUVDUixXQUZELEVBRWNELElBRmQsQ0FBUjs7QUFJRDs7QUFFRCxRQUFNVSxRQUFRLEdBQUdaLEVBQUUsQ0FBQ1UsYUFBSCxDQUFpQlIsSUFBakIsRUFBdUJXLFNBQXZCLENBQWlDLENBQUFDLEVBQUU7QUFDbERyQixFQUFBQSxRQUFRLENBQUNxQixFQUFELEVBQUtYLFdBQUwsQ0FETyxDQUFqQjs7O0FBSUEsTUFBSVMsUUFBUSxHQUFHLENBQWYsRUFBa0I7QUFDaEIsV0FBT0gsQ0FBQztBQUNOLDJFQURNO0FBRU5ULElBQUFBLEVBQUUsQ0FBQ1csRUFGRyxFQUVDVCxJQUZELEVBRU9DLFdBRlAsQ0FBUjs7QUFJRDs7QUFFREgsRUFBQUEsRUFBRSxDQUFDVSxhQUFILENBQWlCUixJQUFqQixFQUF1QmEsTUFBdkIsQ0FBOEJILFFBQTlCLEVBQXdDLENBQXhDOztBQUVBakIsRUFBQUEsZ0JBQWdCLENBQUNhLEVBQUQsRUFBS1IsRUFBTCxDQUFoQjtBQUNBUSxFQUFBQSxFQUFFLENBQUNRLElBQUgsQ0FBUVQsV0FBUjtBQUNELENBcENEIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IF9pc0VxdWFsID0gcmVxdWlyZSgnbG9kYXNoL2lzRXF1YWwnKVxuY29uc3QgcmVtb3ZlUG9vbENsaWVudCA9IHJlcXVpcmUoJy4uLy4uLy4uL3dzX2NsaWVudHMvZXhfcG9vbC9yZW1vdmVfY2xpZW50JylcbmNvbnN0IHZhbGlkYXRlUGFyYW1zID0gcmVxdWlyZSgnLi4vLi4vLi4vdXRpbC93cy92YWxpZGF0ZV9wYXJhbXMnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IChzZXJ2ZXIsIHdzLCBtc2cpID0+IHtcbiAgY29uc3QgWywgZXhJRCwgY2hhbm5lbERhdGFdID0gbXNnXG4gIGNvbnN0IHZhbGlkUmVxdWVzdCA9IHZhbGlkYXRlUGFyYW1zKHdzLCB7XG4gICAgZXhJRDogeyB0eXBlOiAnc3RyaW5nJywgdjogZXhJRCB9LFxuICAgIGNoYW5uZWxEYXRhOiB7IHR5cGU6ICdvYmplY3QnLCB2OiBjaGFubmVsRGF0YSB9XG4gIH0pXG5cbiAgaWYgKCF2YWxpZFJlcXVlc3QpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIGNvbnN0IHBvb2xNZXNzYWdlID0gWyd1bnN1YicsIGV4SUQsIGNoYW5uZWxEYXRhXVxuICBjb25zdCB7IHBjLCBkIH0gPSBzZXJ2ZXJcblxuICBpZiAoISh3cy5zdWJzY3JpcHRpb25zIHx8IHt9KVtleElEXSkge1xuICAgIHJldHVybiBkKFxuICAgICAgJ3dhcm5pbmc6IGNsaWVudCAlcyB0cmllZCB0byB1bnN1YiBmcm9tIGNoYW5uZWwgJWogd2hlbiBub3Qgb24gZXhjaGFuZ2UgJXMnLFxuICAgICAgd3MuaWQsIGNoYW5uZWxEYXRhLCBleElEXG4gICAgKVxuICB9XG5cbiAgY29uc3Qgc3ViSW5kZXggPSB3cy5zdWJzY3JpcHRpb25zW2V4SURdLmZpbmRJbmRleChjZCA9PiAoXG4gICAgX2lzRXF1YWwoY2QsIGNoYW5uZWxEYXRhKVxuICApKVxuXG4gIGlmIChzdWJJbmRleCA8IDApIHtcbiAgICByZXR1cm4gZChcbiAgICAgICdlcnJvcjogY2xpZW50ICVzIHRyaWVkIHRvIHVuc3ViIGZyb20gbm9uLXN1YnNjcmliZWQgY2hhbm5lbCBvbiAlczogJWonLFxuICAgICAgd3MuaWQsIGV4SUQsIGNoYW5uZWxEYXRhXG4gICAgKVxuICB9XG5cbiAgd3Muc3Vic2NyaXB0aW9uc1tleElEXS5zcGxpY2Uoc3ViSW5kZXgsIDEpXG5cbiAgcmVtb3ZlUG9vbENsaWVudChwYywgd3MpXG4gIHBjLnNlbmQocG9vbE1lc3NhZ2UpXG59XG4iXX0=