'use strict';

const AES = require('aes-js');
const hash = require('../../../util/hash');
const validateParams = require('../../../util/ws/validate_params');
const { notifyError, notifyInternalError } = require('../../../util/ws/notify');
const genAESKey = require('../../../util/gen_aes_key');
const {
  get: getCredentials,
  set: setCredentials } =
require('../../../db/credentials');

const sendStrategies = require('../send_strategies');
const sendAuthenticated = require('../send_authenticated');

module.exports = async (server, ws, msg) => {
  if (ws.authPassword) {
    return notifyError(ws, 'Already authenticated');
  }

  const { d, db } = server;
  const [, password] = msg;
  const validRequest = validateParams(ws, {
    password: { type: 'string', v: password } });


  if (!validRequest) {
    return;
  }

  const hashedPassword = hash(password);
  const existingCredentials = await getCredentials(db);

  if (existingCredentials) {
    return notifyError(ws,
    'Credentials already configured; reset them before re-initializing');

  }

  let key;

  try {
    key = await genAESKey(hashedPassword);
  } catch (e) {
    d('error creating encryption key: %s', e.message);
    return notifyInternalError(ws);
  }

  const aesCTR = new AES.ModeOfOperation.ctr(key); // eslint-disable-line
  const hashedPasswordBytes = AES.utils.utf8.toBytes(hashedPassword);
  const controlBytes = AES.utils.utf8.toBytes('control');
  const cipherText = AES.utils.hex.fromBytes(aesCTR.encrypt(hashedPasswordBytes));
  const cipherControl = AES.utils.hex.fromBytes(aesCTR.encrypt(controlBytes));

  await setCredentials(db, cipherControl, cipherText);

  d('initialized credentials');

  ws.authPassword = hashedPassword;
  ws.authControl = cipherControl;

  ws.aoc = server.openAlgoServerClient();
  ws.aoc.identify(ws, cipherControl);

  await sendAuthenticated(ws, db, d);
  await sendStrategies(ws, db, d);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93c19zZXJ2ZXJzL2FwaS9oYW5kbGVycy9vbl9hdXRoX2luaXQuanMiXSwibmFtZXMiOlsiQUVTIiwicmVxdWlyZSIsImhhc2giLCJ2YWxpZGF0ZVBhcmFtcyIsIm5vdGlmeUVycm9yIiwibm90aWZ5SW50ZXJuYWxFcnJvciIsImdlbkFFU0tleSIsImdldCIsImdldENyZWRlbnRpYWxzIiwic2V0Iiwic2V0Q3JlZGVudGlhbHMiLCJzZW5kU3RyYXRlZ2llcyIsInNlbmRBdXRoZW50aWNhdGVkIiwibW9kdWxlIiwiZXhwb3J0cyIsInNlcnZlciIsIndzIiwibXNnIiwiYXV0aFBhc3N3b3JkIiwiZCIsImRiIiwicGFzc3dvcmQiLCJ2YWxpZFJlcXVlc3QiLCJ0eXBlIiwidiIsImhhc2hlZFBhc3N3b3JkIiwiZXhpc3RpbmdDcmVkZW50aWFscyIsImtleSIsImUiLCJtZXNzYWdlIiwiYWVzQ1RSIiwiTW9kZU9mT3BlcmF0aW9uIiwiY3RyIiwiaGFzaGVkUGFzc3dvcmRCeXRlcyIsInV0aWxzIiwidXRmOCIsInRvQnl0ZXMiLCJjb250cm9sQnl0ZXMiLCJjaXBoZXJUZXh0IiwiaGV4IiwiZnJvbUJ5dGVzIiwiZW5jcnlwdCIsImNpcGhlckNvbnRyb2wiLCJhdXRoQ29udHJvbCIsImFvYyIsIm9wZW5BbGdvU2VydmVyQ2xpZW50IiwiaWRlbnRpZnkiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLE1BQU1BLEdBQUcsR0FBR0MsT0FBTyxDQUFDLFFBQUQsQ0FBbkI7QUFDQSxNQUFNQyxJQUFJLEdBQUdELE9BQU8sQ0FBQyxvQkFBRCxDQUFwQjtBQUNBLE1BQU1FLGNBQWMsR0FBR0YsT0FBTyxDQUFDLGtDQUFELENBQTlCO0FBQ0EsTUFBTSxFQUFFRyxXQUFGLEVBQWVDLG1CQUFmLEtBQXVDSixPQUFPLENBQUMseUJBQUQsQ0FBcEQ7QUFDQSxNQUFNSyxTQUFTLEdBQUdMLE9BQU8sQ0FBQywyQkFBRCxDQUF6QjtBQUNBLE1BQU07QUFDSk0s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QUFNUixjQUFjLENBQUNLLEVBQUQsRUFBS0ksRUFBTCxFQUFTRCxDQUFULENBQXBCO0FBQ0QsQ0FuREQiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgQUVTID0gcmVxdWlyZSgnYWVzLWpzJylcbmNvbnN0IGhhc2ggPSByZXF1aXJlKCcuLi8uLi8uLi91dGlsL2hhc2gnKVxuY29uc3QgdmFsaWRhdGVQYXJhbXMgPSByZXF1aXJlKCcuLi8uLi8uLi91dGlsL3dzL3ZhbGlkYXRlX3BhcmFtcycpXG5jb25zdCB7IG5vdGlmeUVycm9yLCBub3RpZnlJbnRlcm5hbEVycm9yIH0gPSByZXF1aXJlKCcuLi8uLi8uLi91dGlsL3dzL25vdGlmeScpXG5jb25zdCBnZW5BRVNLZXkgPSByZXF1aXJlKCcuLi8uLi8uLi91dGlsL2dlbl9hZXNfa2V5JylcbmNvbnN0IHtcbiAgZ2V0OiBnZXRDcmVkZW50aWFscyxcbiAgc2V0OiBzZXRDcmVkZW50aWFsc1xufSA9IHJlcXVpcmUoJy4uLy4uLy4uL2RiL2NyZWRlbnRpYWxzJylcblxuY29uc3Qgc2VuZFN0cmF0ZWdpZXMgPSByZXF1aXJlKCcuLi9zZW5kX3N0cmF0ZWdpZXMnKVxuY29uc3Qgc2VuZEF1dGhlbnRpY2F0ZWQgPSByZXF1aXJlKCcuLi9zZW5kX2F1dGhlbnRpY2F0ZWQnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFzeW5jIChzZXJ2ZXIsIHdzLCBtc2cpID0+IHtcbiAgaWYgKHdzLmF1dGhQYXNzd29yZCkge1xuICAgIHJldHVybiBub3RpZnlFcnJvcih3cywgJ0FscmVhZHkgYXV0aGVudGljYXRlZCcpXG4gIH1cblxuICBjb25zdCB7IGQsIGRiIH0gPSBzZXJ2ZXJcbiAgY29uc3QgWywgcGFzc3dvcmRdID0gbXNnXG4gIGNvbnN0IHZhbGlkUmVxdWVzdCA9IHZhbGlkYXRlUGFyYW1zKHdzLCB7XG4gICAgcGFzc3dvcmQ6IHsgdHlwZTogJ3N0cmluZycsIHY6IHBhc3N3b3JkIH1cbiAgfSlcblxuICBpZiAoIXZhbGlkUmVxdWVzdCkge1xuICAgIHJldHVyblxuICB9XG5cbiAgY29uc3QgaGFzaGVkUGFzc3dvcmQgPSBoYXNoKHBhc3N3b3JkKVxuICBjb25zdCBleGlzdGluZ0NyZWRlbnRpYWxzID0gYXdhaXQgZ2V0Q3JlZGVudGlhbHMoZGIpXG5cbiAgaWYgKGV4aXN0aW5nQ3JlZGVudGlhbHMpIHtcbiAgICByZXR1cm4gbm90aWZ5RXJyb3Iod3MsXG4gICAgICAnQ3JlZGVudGlhbHMgYWxyZWFkeSBjb25maWd1cmVkOyByZXNldCB0aGVtIGJlZm9yZSByZS1pbml0aWFsaXppbmcnXG4gICAgKVxuICB9XG5cbiAgbGV0IGtleVxuXG4gIHRyeSB7XG4gICAga2V5ID0gYXdhaXQgZ2VuQUVTS2V5KGhhc2hlZFBhc3N3b3JkKVxuICB9IGNhdGNoIChlKSB7XG4gICAgZCgnZXJyb3IgY3JlYXRpbmcgZW5jcnlwdGlvbiBrZXk6ICVzJywgZS5tZXNzYWdlKVxuICAgIHJldHVybiBub3RpZnlJbnRlcm5hbEVycm9yKHdzKVxuICB9XG5cbiAgY29uc3QgYWVzQ1RSID0gbmV3IEFFUy5Nb2RlT2ZPcGVyYXRpb24uY3RyKGtleSkgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICBjb25zdCBoYXNoZWRQYXNzd29yZEJ5dGVzID0gQUVTLnV0aWxzLnV0ZjgudG9CeXRlcyhoYXNoZWRQYXNzd29yZClcbiAgY29uc3QgY29udHJvbEJ5dGVzID0gQUVTLnV0aWxzLnV0ZjgudG9CeXRlcygnY29udHJvbCcpXG4gIGNvbnN0IGNpcGhlclRleHQgPSBBRVMudXRpbHMuaGV4LmZyb21CeXRlcyhhZXNDVFIuZW5jcnlwdChoYXNoZWRQYXNzd29yZEJ5dGVzKSlcbiAgY29uc3QgY2lwaGVyQ29udHJvbCA9IEFFUy51dGlscy5oZXguZnJvbUJ5dGVzKGFlc0NUUi5lbmNyeXB0KGNvbnRyb2xCeXRlcykpXG5cbiAgYXdhaXQgc2V0Q3JlZGVudGlhbHMoZGIsIGNpcGhlckNvbnRyb2wsIGNpcGhlclRleHQpXG5cbiAgZCgnaW5pdGlhbGl6ZWQgY3JlZGVudGlhbHMnKVxuXG4gIHdzLmF1dGhQYXNzd29yZCA9IGhhc2hlZFBhc3N3b3JkXG4gIHdzLmF1dGhDb250cm9sID0gY2lwaGVyQ29udHJvbFxuXG4gIHdzLmFvYyA9IHNlcnZlci5vcGVuQWxnb1NlcnZlckNsaWVudCgpXG4gIHdzLmFvYy5pZGVudGlmeSh3cywgY2lwaGVyQ29udHJvbClcblxuICBhd2FpdCBzZW5kQXV0aGVudGljYXRlZCh3cywgZGIsIGQpXG4gIGF3YWl0IHNlbmRTdHJhdGVnaWVzKHdzLCBkYiwgZClcbn1cbiJdfQ==