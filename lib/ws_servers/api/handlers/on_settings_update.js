"use strict";const { _default, CHARTS } = require('bfx-hf-ui-config').UserSettings;
const { affiliateCode } = _default;

const send = require('../../../util/ws/send');
const sendError = require('../../../util/ws/send_error');
const validateParams = require('../../../util/ws/validate_params');
const isAuthorized = require('../../../util/ws/is_authorized');
const {
  notifySuccess, notifyInfo } =
require('../../../util/ws/notify');

module.exports = async (server, ws, msg) => {
  const { d, db } = server;
  const { UserSettings } = db;
  const [, authToken, chart, dms, theme] = msg;

  const validRequest = validateParams(ws, {
    chart: { type: 'string', v: chart },
    theme: { type: 'string', v: theme },
    dms: { type: 'bool', v: dms } });


  if (!validRequest) {
    return;
  }if (!isAuthorized(ws, authToken)) {
    return sendError(ws, 'Unauthorized');
  }

  const { userSettings: oldSettings = {} } = await UserSettings.getAll();
  const settings = {
    chart,
    theme,
    dms,
    affiliateCode };


  await UserSettings.set(settings);

  d('UI settings has been updated');

  ws.UserSettings = settings;

  notifySuccess(ws, 'Settings successfully updated');

  if (chart === CHARTS.TRADING_VIEW) {
    notifyInfo(ws, 'Warning: The Trading View chart does not support rendering of order and position lines');
  }

  send(ws, ['data.settings.updated', settings]);

  if (oldSettings.dms !== settings.dms) {
    d('issuing API & Algo reconnect due to DMS change [dms %s]', settings.dms);

    if (ws.clients.bitfinex) {
      ws.clients.bitfinex.setDMS(settings.dms);
    }

    Object.values(ws.clients).forEach(ex => ex.reconnect());

    if (ws.aoc) {
      ws.aoc.reconnect();
    }

    notifySuccess(ws, 'Reconnecting with new DMS setting...');
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93c19zZXJ2ZXJzL2FwaS9oYW5kbGVycy9vbl9zZXR0aW5nc191cGRhdGUuanMiXSwibmFtZXMiOlsiX2RlZmF1bHQiLCJDSEFSVFMiLCJyZXF1aXJlIiwiVXNlclNldHRpbmdzIiwiYWZmaWxpYXRlQ29kZSIsInNlbmQiLCJzZW5kRXJyb3IiLCJ2YWxpZGF0ZVBhcmFtcyIsImlzQXV0aG9yaXplZCIsIm5vdGlmeVN1Y2Nlc3MiLCJub3RpZnlJbmZvIiwibW9kdWxlIiwiZXhwb3J0cyIsInNlcnZlciIsIndzIiwibXNnIiwiZCIsImRiIiwiYXV0aFRva2VuIiwiY2hhcnQiLCJkbXMiLCJ0aGVtZSIsInZhbGlkUmVxdWVzdCIsInR5cGUiLCJ2IiwidXNlclNldHRpbmdzIiwib2xkU2V0dGluZ3MiLCJnZXRBbGwiLCJzZXR0aW5ncyIsInNldCIsIlRSQURJTkdfVklFVyIsImNsaWVudHMiLCJiaXRmaW5leCIsInNldERNUyIsIk9iamVjdCIsInZhbHVlcyIsImZvckVhY2giLCJleCIsInJlY29ubmVjdCIsImFvYyJdLCJtYXBwaW5ncyI6ImFBQUEsTUFBTSxFQUFFQSxRQUFGLEVBQVlDLE1BQVosS0FBdUJDLE9BQU8sQ0FBQyxrQkFBRCxDQUFQLENBQTRCQyxZQUF6RDtBQUNBLE1BQU0sRUFBRUMsYUFBRixLQUFvQkosUUFBMUI7O0FBRUEsTUFBTUssSUFBSSxHQUFHSCxPQUFPLENBQUMsdUJBQUQsQ0FBcEI7QUFDQSxNQUFNSSxTQUFTLEdBQUdKLE9BQU8sQ0FBQyw2QkFBRCxDQUF6QjtBQUNBLE1BQU1LLGNBQWMsR0FBR0wsT0FBTyxDQUFDLGtDQUFELENBQTlCO0FBQ0EsTUFBTU0sWUFBWSxHQUFHTixPQUFPLENBQUMsZ0NBQUQsQ0FBNUI7QUFDQSxNQUFNO0FBQ0pPLEVBQUFBLGFBREksRUFDV0MsVUFEWDtBQUVGUixPQUFPLENBQUMseUJBQUQsQ0FGWDs7QUFJQVMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLE9BQU9DLE1BQVAsRUFBZUMsRUFBZixFQUFtQkMsR0FBbkIsS0FBMkI7QUFDMUMsUUFBTSxFQUFFQyxDQUFGLEVBQUtDLEVBQUwsS0FBWUosTUFBbEI7QUFDQSxRQUFNLEVBQUVWLFlBQUYsS0FBbUJjLEVBQXpCO0FBQ0EsUUFBTSxHQUFHQyxTQUFILEVBQWNDLEtBQWQsRUFBcUJDLEdBQXJCLEVBQTBCQyxLQUExQixJQUFtQ04sR0FBekM7O0FBRUEsUUFBTU8sWUFBWSxHQUFHZixjQUFjLENBQUNPLEVBQUQsRUFBSztBQUN0Q0ssSUFBQUEsS0FBSyxFQUFFLEVBQUVJLElBQUksRUFBRSxRQUFSLEVBQWtCQyxDQUFDLEVBQUVMLEtBQXJCLEVBRCtCO0FBRXRDRSxJQUFBQSxLQUFLLEVBQUUsRUFBRUUsSUFBSSxFQUFFLFFBQVIsRUFBa0JDLENBQUMsRUFBRUgsS0FBckIsRUFGK0I7QUFHdENELElBQUFBLEdBQUcsRUFBRSxFQUFFRyxJQUFJLEVBQUUsTUFBUixFQUFnQkMsQ0FBQyxFQUFFSixHQUFuQixFQUhpQyxFQUFMLENBQW5DOzs7QUFNQSxNQUFJLENBQUNFLFlBQUwsRUFBbUI7QUFDakI7QUFDRCxHQUFDLElBQUksQ0FBQ2QsWUFBWSxDQUFDTSxFQUFELEVBQUtJLFNBQUwsQ0FBakIsRUFBa0M7QUFDbEMsV0FBT1osU0FBUyxDQUFDUSxFQUFELEVBQUssY0FBTCxDQUFoQjtBQUNEOztBQUVELFFBQU0sRUFBRVcsWUFBWSxFQUFFQyxXQUFXLEdBQUcsRUFBOUIsS0FBcUMsTUFBTXZCLFlBQVksQ0FBQ3dCLE1BQWIsRUFBakQ7QUFDQSxRQUFNQyxRQUFRLEdBQUc7QUFDZlQsSUFBQUEsS0FEZTtBQUVmRSxJQUFBQSxLQUZlO0FBR2ZELElBQUFBLEdBSGU7QUFJZmhCLElBQUFBLGFBSmUsRUFBakI7OztBQU9BLFFBQU1ELFlBQVksQ0FBQzBCLEdBQWIsQ0FBaUJELFFBQWpCLENBQU47O0FBRUFaLEVBQUFBLENBQUMsQ0FBQyw4QkFBRCxDQUFEOztBQUVBRixFQUFBQSxFQUFFLENBQUNYLFlBQUgsR0FBa0J5QixRQUFsQjs7QUFFQW5CLEVBQUFBLGFBQWEsQ0FBQ0ssRUFBRCxFQUFLLCtCQUFMLENBQWI7O0FBRUEsTUFBSUssS0FBSyxLQUFLbEIsTUFBTSxDQUFDNkIsWUFBckIsRUFBbUM7QUFDakNwQixJQUFBQSxVQUFVLENBQUNJLEVBQUQsRUFBSyx3RkFBTCxDQUFWO0FBQ0Q7O0FBRURULEVBQUFBLElBQUksQ0FBQ1MsRUFBRCxFQUFLLENBQUMsdUJBQUQsRUFBMEJjLFFBQTFCLENBQUwsQ0FBSjs7QUFFQSxNQUFJRixXQUFXLENBQUNOLEdBQVosS0FBb0JRLFFBQVEsQ0FBQ1IsR0FBakMsRUFBc0M7QUFDcENKLElBQUFBLENBQUMsQ0FBQyx5REFBRCxFQUE0RFksUUFBUSxDQUFDUixHQUFyRSxDQUFEOztBQUVBLFFBQUlOLEVBQUUsQ0FBQ2lCLE9BQUgsQ0FBV0MsUUFBZixFQUF5QjtBQUN2QmxCLE1BQUFBLEVBQUUsQ0FBQ2lCLE9BQUgsQ0FBV0MsUUFBWCxDQUFvQkMsTUFBcEIsQ0FBMkJMLFFBQVEsQ0FBQ1IsR0FBcEM7QUFDRDs7QUFFRGMsSUFBQUEsTUFBTSxDQUFDQyxNQUFQLENBQWNyQixFQUFFLENBQUNpQixPQUFqQixFQUEwQkssT0FBMUIsQ0FBa0NDLEVBQUUsSUFBSUEsRUFBRSxDQUFDQyxTQUFILEVBQXhDOztBQUVBLFFBQUl4QixFQUFFLENBQUN5QixHQUFQLEVBQVk7QUFDVnpCLE1BQUFBLEVBQUUsQ0FBQ3lCLEdBQUgsQ0FBT0QsU0FBUDtBQUNEOztBQUVEN0IsSUFBQUEsYUFBYSxDQUFDSyxFQUFELEVBQUssc0NBQUwsQ0FBYjtBQUNEO0FBQ0YsQ0F0REQiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IF9kZWZhdWx0LCBDSEFSVFMgfSA9IHJlcXVpcmUoJ2JmeC1oZi11aS1jb25maWcnKS5Vc2VyU2V0dGluZ3NcbmNvbnN0IHsgYWZmaWxpYXRlQ29kZSB9ID0gX2RlZmF1bHRcblxuY29uc3Qgc2VuZCA9IHJlcXVpcmUoJy4uLy4uLy4uL3V0aWwvd3Mvc2VuZCcpXG5jb25zdCBzZW5kRXJyb3IgPSByZXF1aXJlKCcuLi8uLi8uLi91dGlsL3dzL3NlbmRfZXJyb3InKVxuY29uc3QgdmFsaWRhdGVQYXJhbXMgPSByZXF1aXJlKCcuLi8uLi8uLi91dGlsL3dzL3ZhbGlkYXRlX3BhcmFtcycpXG5jb25zdCBpc0F1dGhvcml6ZWQgPSByZXF1aXJlKCcuLi8uLi8uLi91dGlsL3dzL2lzX2F1dGhvcml6ZWQnKVxuY29uc3Qge1xuICBub3RpZnlTdWNjZXNzLCBub3RpZnlJbmZvXG59ID0gcmVxdWlyZSgnLi4vLi4vLi4vdXRpbC93cy9ub3RpZnknKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFzeW5jIChzZXJ2ZXIsIHdzLCBtc2cpID0+IHtcbiAgY29uc3QgeyBkLCBkYiB9ID0gc2VydmVyXG4gIGNvbnN0IHsgVXNlclNldHRpbmdzIH0gPSBkYlxuICBjb25zdCBbLCBhdXRoVG9rZW4sIGNoYXJ0LCBkbXMsIHRoZW1lXSA9IG1zZ1xuXG4gIGNvbnN0IHZhbGlkUmVxdWVzdCA9IHZhbGlkYXRlUGFyYW1zKHdzLCB7XG4gICAgY2hhcnQ6IHsgdHlwZTogJ3N0cmluZycsIHY6IGNoYXJ0IH0sXG4gICAgdGhlbWU6IHsgdHlwZTogJ3N0cmluZycsIHY6IHRoZW1lIH0sXG4gICAgZG1zOiB7IHR5cGU6ICdib29sJywgdjogZG1zIH1cbiAgfSlcblxuICBpZiAoIXZhbGlkUmVxdWVzdCkge1xuICAgIHJldHVyblxuICB9IGlmICghaXNBdXRob3JpemVkKHdzLCBhdXRoVG9rZW4pKSB7XG4gICAgcmV0dXJuIHNlbmRFcnJvcih3cywgJ1VuYXV0aG9yaXplZCcpXG4gIH1cblxuICBjb25zdCB7IHVzZXJTZXR0aW5nczogb2xkU2V0dGluZ3MgPSB7fSB9ID0gYXdhaXQgVXNlclNldHRpbmdzLmdldEFsbCgpXG4gIGNvbnN0IHNldHRpbmdzID0ge1xuICAgIGNoYXJ0LFxuICAgIHRoZW1lLFxuICAgIGRtcyxcbiAgICBhZmZpbGlhdGVDb2RlXG4gIH1cblxuICBhd2FpdCBVc2VyU2V0dGluZ3Muc2V0KHNldHRpbmdzKVxuXG4gIGQoJ1VJIHNldHRpbmdzIGhhcyBiZWVuIHVwZGF0ZWQnKVxuXG4gIHdzLlVzZXJTZXR0aW5ncyA9IHNldHRpbmdzXG5cbiAgbm90aWZ5U3VjY2Vzcyh3cywgJ1NldHRpbmdzIHN1Y2Nlc3NmdWxseSB1cGRhdGVkJylcblxuICBpZiAoY2hhcnQgPT09IENIQVJUUy5UUkFESU5HX1ZJRVcpIHtcbiAgICBub3RpZnlJbmZvKHdzLCAnV2FybmluZzogVGhlIFRyYWRpbmcgVmlldyBjaGFydCBkb2VzIG5vdCBzdXBwb3J0IHJlbmRlcmluZyBvZiBvcmRlciBhbmQgcG9zaXRpb24gbGluZXMnKVxuICB9XG5cbiAgc2VuZCh3cywgWydkYXRhLnNldHRpbmdzLnVwZGF0ZWQnLCBzZXR0aW5nc10pXG5cbiAgaWYgKG9sZFNldHRpbmdzLmRtcyAhPT0gc2V0dGluZ3MuZG1zKSB7XG4gICAgZCgnaXNzdWluZyBBUEkgJiBBbGdvIHJlY29ubmVjdCBkdWUgdG8gRE1TIGNoYW5nZSBbZG1zICVzXScsIHNldHRpbmdzLmRtcylcblxuICAgIGlmICh3cy5jbGllbnRzLmJpdGZpbmV4KSB7XG4gICAgICB3cy5jbGllbnRzLmJpdGZpbmV4LnNldERNUyhzZXR0aW5ncy5kbXMpXG4gICAgfVxuXG4gICAgT2JqZWN0LnZhbHVlcyh3cy5jbGllbnRzKS5mb3JFYWNoKGV4ID0+IGV4LnJlY29ubmVjdCgpKVxuXG4gICAgaWYgKHdzLmFvYykge1xuICAgICAgd3MuYW9jLnJlY29ubmVjdCgpXG4gICAgfVxuXG4gICAgbm90aWZ5U3VjY2Vzcyh3cywgJ1JlY29ubmVjdGluZyB3aXRoIG5ldyBETVMgc2V0dGluZy4uLicpXG4gIH1cbn1cbiJdfQ==