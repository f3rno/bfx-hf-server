'use strict';

const sendError = require('../../../util/ws/send_error');
const validateParams = require('../../../util/ws/validate_params');

const getHostKey = require('../util/get_host_key');

module.exports = async (server, ws, msg) => {
  const { d, hosts } = server;
  const [, userID, exID, gid] = msg;
  const validRequest = validateParams(ws, {
    exID: { type: 'string', v: exID },
    userID: { type: 'string', v: userID },
    gid: { type: 'string', v: gid } });


  if (!validRequest) {
    return;
  } else if (!ws.userID) {
    return sendError(ws, 'Not identified');
  } else if (ws.userID !== userID) {
    d('tried to submit AO for user that differs from ws ident (%s)', userID);
    return sendError(ws, 'Unauthorised');
  }

  const key = getHostKey(userID, exID);
  const host = hosts[key];

  if (!host) {
    return sendError(ws, `Host not open for user ${userID} on exchange ${exID}`);
  }

  if (!host.getAOInstance(gid)) {
    return sendError(ws, 'Requested algo order not running, cannot stop');
  }

  await host.stopAO(gid);

  d('stopped AO for user %s on exchange %s [%s]', userID, exID, gid);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93c19zZXJ2ZXJzL2FsZ29zL2hhbmRsZXJzL29uX2NhbmNlbC5qcyJdLCJuYW1lcyI6WyJzZW5kRXJyb3IiLCJyZXF1aXJlIiwidmFsaWRhdGVQYXJhbXMiLCJnZXRIb3N0S2V5IiwibW9kdWxlIiwiZXhwb3J0cyIsInNlcnZlciIsIndzIiwibXNnIiwiZCIsImhvc3RzIiwidXNlcklEIiwiZXhJRCIsImdpZCIsInZhbGlkUmVxdWVzdCIsInR5cGUiLCJ2Iiwia2V5IiwiaG9zdCIsImdldEFPSW5zdGFuY2UiLCJzdG9wQU8iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLE1BQU1BLFNBQVMsR0FBR0MsT0FBTyxDQUFDLDZCQUFELENBQXpCO0FBQ0EsTUFBTUMsY0FBYyxHQUFHRCxPQUFPLENBQUMsa0NBQUQsQ0FBOUI7O0FBRUEsTUFBTUUsVUFBVSxHQUFHRixPQUFPLENBQUMsc0JBQUQsQ0FBMUI7O0FBRUFHLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixPQUFPQyxNQUFQLEVBQWVDLEVBQWYsRUFBbUJDLEdBQW5CLEtBQTJCO0FBQzFDLFFBQU0sRUFBRUMsQ0FBRixFQUFLQyxLQUFMLEtBQWVKLE1BQXJCO0FBQ0EsUUFBTSxHQUFHSyxNQUFILEVBQVdDLElBQVgsRUFBaUJDLEdBQWpCLElBQXdCTCxHQUE5QjtBQUNBLFFBQU1NLFlBQVksR0FBR1osY0FBYyxDQUFDSyxFQUFELEVBQUs7QUFDdENLLElBQUFBLElBQUksRUFBRSxFQUFFRyxJQUFJLEVBQUUsUUFBUixFQUFrQkMsQ0FBQyxFQUFFSixJQUFyQixFQURnQztBQUV0Q0QsSUFBQUEsTUFBTSxFQUFFLEVBQUVJLElBQUksRUFBRSxRQUFSLEVBQWtCQyxDQUFDLEVBQUVMLE1BQXJCLEVBRjhCO0FBR3RDRSxJQUFBQSxHQUFHLEVBQUUsRUFBRUUsSUFBSSxFQUFFLFFBQVIsRUFBa0JDLENBQUMsRUFBRUgsR0FBckIsRUFIaUMsRUFBTCxDQUFuQzs7O0FBTUEsTUFBSSxDQUFDQyxZQUFMLEVBQW1CO0FBQ2pCO0FBQ0QsR0FGRCxNQUVPLElBQUksQ0FBQ1AsRUFBRSxDQUFDSSxNQUFSLEVBQWdCO0FBQ3JCLFdBQU9YLFNBQVMsQ0FBQ08sRUFBRCxFQUFLLGdCQUFMLENBQWhCO0FBQ0QsR0FGTSxNQUVBLElBQUlBLEVBQUUsQ0FBQ0ksTUFBSCxLQUFjQSxNQUFsQixFQUEwQjtBQUMvQkYsSUFBQUEsQ0FBQyxDQUFDLDZEQUFELEVBQWdFRSxNQUFoRSxDQUFEO0FBQ0EsV0FBT1gsU0FBUyxDQUFDTyxFQUFELEVBQUssY0FBTCxDQUFoQjtBQUNEOztBQUVELFFBQU1VLEdBQUcsR0FBR2QsVUFBVSxDQUFDUSxNQUFELEVBQVNDLElBQVQsQ0FBdEI7QUFDQSxRQUFNTSxJQUFJLEdBQUdSLEtBQUssQ0FBQ08sR0FBRCxDQUFsQjs7QUFFQSxNQUFJLENBQUNDLElBQUwsRUFBVztBQUNULFdBQU9sQixTQUFTLENBQUNPLEVBQUQsRUFBTSwwQkFBeUJJLE1BQU8sZ0JBQWVDLElBQUssRUFBMUQsQ0FBaEI7QUFDRDs7QUFFRCxNQUFJLENBQUNNLElBQUksQ0FBQ0MsYUFBTCxDQUFtQk4sR0FBbkIsQ0FBTCxFQUE4QjtBQUM1QixXQUFPYixTQUFTLENBQUNPLEVBQUQsRUFBSywrQ0FBTCxDQUFoQjtBQUNEOztBQUVELFFBQU1XLElBQUksQ0FBQ0UsTUFBTCxDQUFZUCxHQUFaLENBQU47O0FBRUFKLEVBQUFBLENBQUMsQ0FBQyw0Q0FBRCxFQUErQ0UsTUFBL0MsRUFBdURDLElBQXZELEVBQTZEQyxHQUE3RCxDQUFEO0FBQ0QsQ0FoQ0QiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3Qgc2VuZEVycm9yID0gcmVxdWlyZSgnLi4vLi4vLi4vdXRpbC93cy9zZW5kX2Vycm9yJylcbmNvbnN0IHZhbGlkYXRlUGFyYW1zID0gcmVxdWlyZSgnLi4vLi4vLi4vdXRpbC93cy92YWxpZGF0ZV9wYXJhbXMnKVxuXG5jb25zdCBnZXRIb3N0S2V5ID0gcmVxdWlyZSgnLi4vdXRpbC9nZXRfaG9zdF9rZXknKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFzeW5jIChzZXJ2ZXIsIHdzLCBtc2cpID0+IHtcbiAgY29uc3QgeyBkLCBob3N0cyB9ID0gc2VydmVyXG4gIGNvbnN0IFssIHVzZXJJRCwgZXhJRCwgZ2lkXSA9IG1zZ1xuICBjb25zdCB2YWxpZFJlcXVlc3QgPSB2YWxpZGF0ZVBhcmFtcyh3cywge1xuICAgIGV4SUQ6IHsgdHlwZTogJ3N0cmluZycsIHY6IGV4SUQgfSxcbiAgICB1c2VySUQ6IHsgdHlwZTogJ3N0cmluZycsIHY6IHVzZXJJRCB9LFxuICAgIGdpZDogeyB0eXBlOiAnc3RyaW5nJywgdjogZ2lkIH1cbiAgfSlcblxuICBpZiAoIXZhbGlkUmVxdWVzdCkge1xuICAgIHJldHVyblxuICB9IGVsc2UgaWYgKCF3cy51c2VySUQpIHtcbiAgICByZXR1cm4gc2VuZEVycm9yKHdzLCAnTm90IGlkZW50aWZpZWQnKVxuICB9IGVsc2UgaWYgKHdzLnVzZXJJRCAhPT0gdXNlcklEKSB7XG4gICAgZCgndHJpZWQgdG8gc3VibWl0IEFPIGZvciB1c2VyIHRoYXQgZGlmZmVycyBmcm9tIHdzIGlkZW50ICglcyknLCB1c2VySUQpXG4gICAgcmV0dXJuIHNlbmRFcnJvcih3cywgJ1VuYXV0aG9yaXNlZCcpXG4gIH1cblxuICBjb25zdCBrZXkgPSBnZXRIb3N0S2V5KHVzZXJJRCwgZXhJRClcbiAgY29uc3QgaG9zdCA9IGhvc3RzW2tleV1cblxuICBpZiAoIWhvc3QpIHtcbiAgICByZXR1cm4gc2VuZEVycm9yKHdzLCBgSG9zdCBub3Qgb3BlbiBmb3IgdXNlciAke3VzZXJJRH0gb24gZXhjaGFuZ2UgJHtleElEfWApXG4gIH1cblxuICBpZiAoIWhvc3QuZ2V0QU9JbnN0YW5jZShnaWQpKSB7XG4gICAgcmV0dXJuIHNlbmRFcnJvcih3cywgJ1JlcXVlc3RlZCBhbGdvIG9yZGVyIG5vdCBydW5uaW5nLCBjYW5ub3Qgc3RvcCcpXG4gIH1cblxuICBhd2FpdCBob3N0LnN0b3BBTyhnaWQpXG5cbiAgZCgnc3RvcHBlZCBBTyBmb3IgdXNlciAlcyBvbiBleGNoYW5nZSAlcyBbJXNdJywgdXNlcklELCBleElELCBnaWQpXG59XG4iXX0=