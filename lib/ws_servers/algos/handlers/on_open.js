'use strict';

const _capitalize = require('lodash/capitalize');
const send = require('../../../util/ws/send');
const sendError = require('../../../util/ws/send_error');
const validateParams = require('../../../util/ws/validate_params');

const getHostKey = require('../util/get_host_key');
const spawnBitfinexAOHost = require('../spawn_bitfinex_ao_host');
const spawnBinanceAOHost = require('../spawn_binance_ao_host');

module.exports = async (server, ws, msg) => {
  const { d, hosts } = server;
  const [, userID, exID, apiKey, apiSecret] = msg;
  const validRequest = validateParams(ws, {
    exID: { type: 'string', v: exID },
    userID: { type: 'string', v: userID },
    apiKey: { type: 'string', v: apiKey },
    apiSecret: { type: 'string', v: apiSecret } });


  if (!validRequest) {
    return;
  } else if (exID !== 'bitfinex' && exID !== 'binance') {
    return sendError(ws, 'Only Bitfinex and Binance are currently supported for algo orders');
  } else if (!ws.userID) {
    return sendError(ws, 'Not identified');
  } else if (ws.userID !== userID) {
    d('tried to open host for user that differs from ws ident (%s)', userID);
    return sendError(ws, 'Unauthorised');
  }

  const key = getHostKey(userID, exID);
  const existingHost = hosts[key];

  if (existingHost) {
    return; // sendError(ws, `Algo order host already open for user on ${exID}`)
  }

  switch (exID) {
    case 'bitfinex':{
        hosts[key] = await spawnBitfinexAOHost(server, apiKey, apiSecret);
        break;
      }

    case 'binance':{
        hosts[key] = await spawnBinanceAOHost(server, apiKey, apiSecret);
        break;
      }

    default:{
        d('Unknown exchange broke through: %s', exID);
        return sendError(ws, `Unknown exchange: ${exID}`);
      }}


  d('spawned host for user %s on exchange %s', userID, exID);

  hosts[key].on('error', error => {
    server.broadcast(userID, ['error', `${_capitalize(exID)} error: ${error}`]);
  });

  hosts[key].on('ao:start', instance => {
    const { state = {} } = instance;
    const { name, label, args, gid } = state;

    d('ao started: %s %s', name, label);
    server.broadcast(userID, ['started', userID, exID, name, label, gid, args]);
  });

  hosts[key].on('ao:stop', instance => {
    const { state = {} } = instance;
    const { gid } = state;

    d('ao stopped: %s', gid);
    server.broadcast(userID, ['stopped', userID, exID, gid]);
  });

  send(ws, ['opened', userID, exID]);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93c19zZXJ2ZXJzL2FsZ29zL2hhbmRsZXJzL29uX29wZW4uanMiXSwibmFtZXMiOlsiX2NhcGl0YWxpemUiLCJyZXF1aXJlIiwic2VuZCIsInNlbmRFcnJvciIsInZhbGlkYXRlUGFyYW1zIiwiZ2V0SG9zdEtleSIsInNwYXduQml0ZmluZXhBT0hvc3QiLCJzcGF3bkJpbmFuY2VBT0hvc3QiLCJtb2R1bGUiLCJleHBvcnRzIiwic2VydmVyIiwid3MiLCJtc2ciLCJkIiwiaG9zdHMiLCJ1c2VySUQiLCJleElEIiwiYXBpS2V5IiwiYXBpU2VjcmV0IiwidmFsaWRSZXF1ZXN0IiwidHlwZSIsInYiLCJrZXkiLCJleGlzdGluZ0hvc3QiLCJvbiIsImVycm9yIiwiYnJvYWRjYXN0IiwiaW5zdGFuY2UiLCJzdGF0ZSIsIm5hbWUiLCJsYWJlbCIsImFyZ3MiLCJnaWQiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLE1BQU1BLFdBQVcsR0FBR0MsT0FBTyxDQUFDLG1CQUFELENBQTNCO0FBQ0EsTUFBTUMsSUFBSSxHQUFHRCxPQUFPLENBQUMsdUJBQUQsQ0FBcEI7QUFDQSxNQUFNRSxTQUFTLEdBQUdGLE9BQU8sQ0FBQyw2QkFBRCxDQUF6QjtBQUNBLE1BQU1HLGNBQWMsR0FBR0gsT0FBTyxDQUFDLGtDQUFELENBQTlCOztBQUVBLE1BQU1JLFVBQVUsR0FBR0osT0FBTyxDQUFDLHNCQUFELENBQTFCO0FBQ0EsTUFBTUssbUJBQW1CLEdBQUdMLE9BQU8sQ0FBQywyQkFBRCxDQUFuQztBQUNBLE1BQU1NLGtCQUFrQixHQUFHTixPQUFPLENBQUMsMEJBQUQsQ0FBbEM7O0FBRUFPLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixPQUFPQyxNQUFQLEVBQWVDLEVBQWYsRUFBbUJDLEdBQW5CLEtBQTJCO0FBQzFDLFFBQU0sRUFBRUMsQ0FBRixFQUFLQyxLQUFMLEtBQWVKLE1BQXJCO0FBQ0EsUUFBTSxHQUFHSyxNQUFILEVBQVdDLElBQVgsRUFBaUJDLE1B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QTVCLENBQUQ7QUFDQXBCLElBQUFBLE1BQU0sQ0FBQ2dCLFNBQVAsQ0FBaUJYLE1BQWpCLEVBQXlCLENBQUMsU0FBRCxFQUFZQSxNQUFaLEVBQW9CQyxJQUFwQixFQUEwQmEsSUFBMUIsRUFBZ0NDLEtBQWhDLEVBQXVDRSxHQUF2QyxFQUE0Q0QsSUFBNUMsQ0FBekI7QUFDRCxHQU5EOztBQVFBakIsRUFBQUEsS0FBSyxDQUFDUSxHQUFELENBQUwsQ0FBV0UsRUFBWCxDQUFjLFNBQWQsRUFBMEJHLFFBQUQsSUFBYztBQUNyQyxVQUFNLEVBQUVDLEtBQUssR0FBRyxFQUFWLEtBQWlCRCxRQUF2QjtBQUNBLFVBQU0sRUFBRUssR0FBRixLQUFVSixLQUFoQjs7QUFFQWYsSUFBQUEsQ0FBQyxDQUFDLGdCQUFELEVBQW1CbUIsR0FBbkIsQ0FBRDtBQUNBdEIsSUFBQUEsTUFBTSxDQUFDZ0IsU0FBUCxDQUFpQlgsTUFBakIsRUFBeUIsQ0FBQyxTQUFELEVBQVlBLE1BQVosRUFBb0JDLElBQXBCLEVBQTBCZ0IsR0FBMUIsQ0FBekI7QUFDRCxHQU5EOztBQVFBOUIsRUFBQUEsSUFBSSxDQUFDUyxFQUFELEVBQUssQ0FBQyxRQUFELEVBQVdJLE1BQVgsRUFBbUJDLElBQW5CLENBQUwsQ0FBSjtBQUNELENBcEVEIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IF9jYXBpdGFsaXplID0gcmVxdWlyZSgnbG9kYXNoL2NhcGl0YWxpemUnKVxuY29uc3Qgc2VuZCA9IHJlcXVpcmUoJy4uLy4uLy4uL3V0aWwvd3Mvc2VuZCcpXG5jb25zdCBzZW5kRXJyb3IgPSByZXF1aXJlKCcuLi8uLi8uLi91dGlsL3dzL3NlbmRfZXJyb3InKVxuY29uc3QgdmFsaWRhdGVQYXJhbXMgPSByZXF1aXJlKCcuLi8uLi8uLi91dGlsL3dzL3ZhbGlkYXRlX3BhcmFtcycpXG5cbmNvbnN0IGdldEhvc3RLZXkgPSByZXF1aXJlKCcuLi91dGlsL2dldF9ob3N0X2tleScpXG5jb25zdCBzcGF3bkJpdGZpbmV4QU9Ib3N0ID0gcmVxdWlyZSgnLi4vc3Bhd25fYml0ZmluZXhfYW9faG9zdCcpXG5jb25zdCBzcGF3bkJpbmFuY2VBT0hvc3QgPSByZXF1aXJlKCcuLi9zcGF3bl9iaW5hbmNlX2FvX2hvc3QnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFzeW5jIChzZXJ2ZXIsIHdzLCBtc2cpID0+IHtcbiAgY29uc3QgeyBkLCBob3N0cyB9ID0gc2VydmVyXG4gIGNvbnN0IFssIHVzZXJJRCwgZXhJRCwgYXBpS2V5LCBhcGlTZWNyZXRdID0gbXNnXG4gIGNvbnN0IHZhbGlkUmVxdWVzdCA9IHZhbGlkYXRlUGFyYW1zKHdzLCB7XG4gICAgZXhJRDogeyB0eXBlOiAnc3RyaW5nJywgdjogZXhJRCB9LFxuICAgIHVzZXJJRDogeyB0eXBlOiAnc3RyaW5nJywgdjogdXNlcklEIH0sXG4gICAgYXBpS2V5OiB7IHR5cGU6ICdzdHJpbmcnLCB2OiBhcGlLZXkgfSxcbiAgICBhcGlTZWNyZXQ6IHsgdHlwZTogJ3N0cmluZycsIHY6IGFwaVNlY3JldCB9XG4gIH0pXG5cbiAgaWYgKCF2YWxpZFJlcXVlc3QpIHtcbiAgICByZXR1cm5cbiAgfSBlbHNlIGlmIChleElEICE9PSAnYml0ZmluZXgnICYmIGV4SUQgIT09ICdiaW5hbmNlJykge1xuICAgIHJldHVybiBzZW5kRXJyb3Iod3MsICdPbmx5IEJpdGZpbmV4IGFuZCBCaW5hbmNlIGFyZSBjdXJyZW50bHkgc3VwcG9ydGVkIGZvciBhbGdvIG9yZGVycycpXG4gIH0gZWxzZSBpZiAoIXdzLnVzZXJJRCkge1xuICAgIHJldHVybiBzZW5kRXJyb3Iod3MsICdOb3QgaWRlbnRpZmllZCcpXG4gIH0gZWxzZSBpZiAod3MudXNlcklEICE9PSB1c2VySUQpIHtcbiAgICBkKCd0cmllZCB0byBvcGVuIGhvc3QgZm9yIHVzZXIgdGhhdCBkaWZmZXJzIGZyb20gd3MgaWRlbnQgKCVzKScsIHVzZXJJRClcbiAgICByZXR1cm4gc2VuZEVycm9yKHdzLCAnVW5hdXRob3Jpc2VkJylcbiAgfVxuXG4gIGNvbnN0IGtleSA9IGdldEhvc3RLZXkodXNlcklELCBleElEKVxuICBjb25zdCBleGlzdGluZ0hvc3QgPSBob3N0c1trZXldXG5cbiAgaWYgKGV4aXN0aW5nSG9zdCkge1xuICAgIHJldHVybiAvLyBzZW5kRXJyb3Iod3MsIGBBbGdvIG9yZGVyIGhvc3QgYWxyZWFkeSBvcGVuIGZvciB1c2VyIG9uICR7ZXhJRH1gKVxuICB9XG5cbiAgc3dpdGNoIChleElEKSB7XG4gICAgY2FzZSAnYml0ZmluZXgnOiB7XG4gICAgICBob3N0c1trZXldID0gYXdhaXQgc3Bhd25CaXRmaW5leEFPSG9zdChzZXJ2ZXIsIGFwaUtleSwgYXBpU2VjcmV0KVxuICAgICAgYnJlYWtcbiAgICB9XG5cbiAgICBjYXNlICdiaW5hbmNlJzoge1xuICAgICAgaG9zdHNba2V5XSA9IGF3YWl0IHNwYXduQmluYW5jZUFPSG9zdChzZXJ2ZXIsIGFwaUtleSwgYXBpU2VjcmV0KVxuICAgICAgYnJlYWtcbiAgICB9XG5cbiAgICBkZWZhdWx0OiB7XG4gICAgICBkKCdVbmtub3duIGV4Y2hhbmdlIGJyb2tlIHRocm91Z2g6ICVzJywgZXhJRClcbiAgICAgIHJldHVybiBzZW5kRXJyb3Iod3MsIGBVbmtub3duIGV4Y2hhbmdlOiAke2V4SUR9YClcbiAgICB9XG4gIH1cblxuICBkKCdzcGF3bmVkIGhvc3QgZm9yIHVzZXIgJXMgb24gZXhjaGFuZ2UgJXMnLCB1c2VySUQsIGV4SUQpXG5cbiAgaG9zdHNba2V5XS5vbignZXJyb3InLCAoZXJyb3IpID0+IHtcbiAgICBzZXJ2ZXIuYnJvYWRjYXN0KHVzZXJJRCwgWydlcnJvcicsIGAke19jYXBpdGFsaXplKGV4SUQpfSBlcnJvcjogJHtlcnJvcn1gXSlcbiAgfSlcblxuICBob3N0c1trZXldLm9uKCdhbzpzdGFydCcsIChpbnN0YW5jZSkgPT4ge1xuICAgIGNvbnN0IHsgc3RhdGUgPSB7fSB9ID0gaW5zdGFuY2VcbiAgICBjb25zdCB7IG5hbWUsIGxhYmVsLCBhcmdzLCBnaWQgfSA9IHN0YXRlXG5cbiAgICBkKCdhbyBzdGFydGVkOiAlcyAlcycsIG5hbWUsIGxhYmVsKVxuICAgIHNlcnZlci5icm9hZGNhc3QodXNlcklELCBbJ3N0YXJ0ZWQnLCB1c2VySUQsIGV4SUQsIG5hbWUsIGxhYmVsLCBnaWQsIGFyZ3NdKVxuICB9KVxuXG4gIGhvc3RzW2tleV0ub24oJ2FvOnN0b3AnLCAoaW5zdGFuY2UpID0+IHtcbiAgICBjb25zdCB7IHN0YXRlID0ge30gfSA9IGluc3RhbmNlXG4gICAgY29uc3QgeyBnaWQgfSA9IHN0YXRlXG5cbiAgICBkKCdhbyBzdG9wcGVkOiAlcycsIGdpZClcbiAgICBzZXJ2ZXIuYnJvYWRjYXN0KHVzZXJJRCwgWydzdG9wcGVkJywgdXNlcklELCBleElELCBnaWRdKVxuICB9KVxuXG4gIHNlbmQod3MsIFsnb3BlbmVkJywgdXNlcklELCBleElEXSlcbn1cbiJdfQ==