'use strict';

const sendError = require('../../../util/ws/send_error');
const validateParams = require('../../../util/ws/validate_params');

const getHostKey = require('../util/get_host_key');
const validateAO = require('../util/validate_ao');

module.exports = async (server, ws, msg) => {
  const { d, hosts } = server;
  const [, userID, exID, aoID, packet] = msg;
  const validRequest = validateParams(ws, {
    exID: { type: 'string', v: exID },
    userID: { type: 'string', v: userID },
    aoID: { type: 'string', v: aoID },
    packet: { type: 'object', v: packet } });


  if (!validRequest) {
    return;
  } else if (!ws.userID) {
    return sendError(ws, 'Not identified');
  } else if (ws.userID !== userID) {
    d('tried to submit AO for user that differs from ws ident (%s)', userID);
    return sendError(ws, 'Unauthorised');
  }

  const key = getHostKey(userID, exID);
  const host = hosts[key];

  if (!host) {
    return sendError(ws, `Host not open for user ${userID} on exchange ${exID}`);
  }

  const validationError = validateAO(host, aoID, packet);

  if (validationError) {
    return sendError(ws, validationError);
  }

  try {
    const gid = await host.startAO(aoID, packet);
    d('started AO for user %s on exchange %s [%s]', userID, exID, gid);
  } catch (e) {
    d('error starting AO %s for %s: %s', aoID, exID, e.stack);
    return sendError(ws, 'Failed to start algo order');
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93c19zZXJ2ZXJzL2FsZ29zL2hhbmRsZXJzL29uX3N1Ym1pdC5qcyJdLCJuYW1lcyI6WyJzZW5kRXJyb3IiLCJyZXF1aXJlIiwidmFsaWRhdGVQYXJhbXMiLCJnZXRIb3N0S2V5IiwidmFsaWRhdGVBTyIsIm1vZHVsZSIsImV4cG9ydHMiLCJzZXJ2ZXIiLCJ3cyIsIm1zZyIsImQiLCJob3N0cyIsInVzZXJJRCIsImV4SUQiLCJhb0lEIiwicGFja2V0IiwidmFsaWRSZXF1ZXN0IiwidHlwZSIsInYiLCJrZXkiLCJob3N0IiwidmFsaWRhdGlvbkVycm9yIiwiZ2lkIiwic3RhcnRBTyIsImUiLCJzdGFjayJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsTUFBTUEsU0FBUyxHQUFHQyxPQUFPLENBQUMsNkJBQUQsQ0FBekI7QUFDQSxNQUFNQyxjQUFjLEdBQUdELE9BQU8sQ0FBQyxrQ0FBRCxDQUE5Qjs7QUFFQSxNQUFNRSxVQUFVLEdBQUdGLE9BQU8sQ0FBQyxzQkFBRCxDQUExQjtBQUNBLE1BQU1HLFVBQVUsR0FBR0gsT0FBTyxDQUFDLHFCQUFELENBQTFCOztBQUVBSSxNQUFNLENBQUNDLE9BQVAsR0FBaUIsT0FBT0MsTUFBUCxFQUFlQyxFQUFmLEVBQW1CQyxHQUFuQixLQUEyQjtBQUMxQyxRQUFNLEVBQUVDLENBQUYsRUFBS0MsS0FBTCxLQUFlSixNQUFyQjtBQUNBLFFBQU0sR0FBR0ssTUFBSCxFQUFXQyxJQUFYLEVBQWlCQyxJQUFqQixFQUF1QkMsTUFBdkIsSUFBaUNOLEdBQXZDO0FBQ0EsUUFBTU8sWUFBWSxHQUFHZCxjQUFjLENBQUNNLEVBQUQsRUFBSztBQUN0Q0ssSUFBQUEsSUFBSSxFQUFFLEVBQUVJLElBQUksRUFBRSxRQUFSLEVBQWtCQyxDQUFDLEVBQUVMLElBQXJCLEVBRGdDO0FBRXRDRCxJQUFBQSxNQUFNLEVBQUUsRUFBRUssSUFBSSxFQUFFLFFBQVIsRUFBa0JDLENBQUMsRUFBRU4sTUFBckIsRUFGOEI7QUFHdENFLElBQUFBLElBQUksRUFBRSxFQUFFRyxJQUFJLEVBQUUsUUFBUixFQUFrQkMsQ0FBQyxFQUFFSixJQUFyQixFQUhnQztBQUl0Q0MsSUFBQUEsTUFBTSxFQUFFLEVBQUVFLElBQUksRUFBRSxRQUFSLEVBQWtCQyxDQUFDLEVBQUVILE1BQXJCLEVBSjhCLEVBQUwsQ0FBbkM7OztBQU9BLE1BQUksQ0FBQ0MsWUFBTCxFQUFtQjtBQUNqQjtBQUNELEdBRkQsTUFFTyxJQUFJLENBQUNSLEVBQUUsQ0FBQ0ksTUFBUixFQUFnQjtBQUNyQixXQUFPWixTQUFTLENBQUNRLEVBQUQsRUFBSyxnQkFBTCxDQUFoQjtBQUNELEdBRk0sTUFFQSxJQUFJQSxFQUFFLENBQUNJLE1BQUgsS0FBY0EsTUFBbEIsRUFBMEI7QUFDL0JGLElBQUFBLENBQUMsQ0FBQyw2REFBRCxFQUFnRUUsTUFBaEUsQ0FBRDtBQUNBLFdBQU9aLFNBQVMsQ0FBQ1EsRUFBRCxFQUFLLGNBQUwsQ0FBaEI7QUFDRDs7QUFFRCxRQUFNVyxHQUFHLEdBQUdoQixVQUFVLENBQUNTLE1BQUQsRUFBU0MsSUFBVCxDQUF0QjtBQUNBLFFBQU1PLElBQUksR0FBR1QsS0FBSyxDQUFDUSxHQUFELENBQWxCOztBQUVBLE1BQUksQ0FBQ0MsSUFBTCxFQUFXO0FBQ1QsV0FBT3BCLFNBQVMsQ0FBQ1EsRUFBRCxFQUFNLDBCQUF5QkksTUFBTyxnQkFBZUMsSUFBSyxFQUExRCxDQUFoQjtBQUNEOztBQUVELFFBQU1RLGVBQWUsR0FBR2pCLFVBQVUsQ0FBQ2dCLElBQUQsRUFBT04sSUFBUCxFQUFhQyxNQUFiLENBQWxDOztBQUVBLE1BQUlNLGVBQUosRUFBcUI7QUFDbkIsV0FBT3JCLFNBQVMsQ0FBQ1EsRUFBRCxFQUFLYSxlQUFMLENBQWhCO0FBQ0Q7O0FBRUQsTUFBSTtBQUNGLFVBQU1DLEdBQUcsR0FBRyxNQUFNRixJQUFJLENBQUNHLE9BQUwsQ0FBYVQsSUFBYixFQUFtQkMsTUFBbkIsQ0FBbEI7QUFDQUwsSUFBQUEsQ0FBQyxDQUFDLDRDQUFELEVBQStDRSxNQUEvQyxFQUF1REMsSUFBdkQsRUFBNkRTLEdBQTdELENBQUQ7QUFDRCxHQUhELENBR0UsT0FBT0UsQ0FBUCxFQUFVO0FBQ1ZkLElBQUFBLENBQUMsQ0FBQyxpQ0FBRCxFQUFvQ0ksSUFBcEMsRUFBMENELElBQTFDLEVBQWdEVyxDQUFDLENBQUNDLEtBQWxELENBQUQ7QUFDQSxXQUFPekIsU0FBUyxDQUFDUSxFQUFELEVBQUssNEJBQUwsQ0FBaEI7QUFDRDtBQUNGLENBdkNEIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IHNlbmRFcnJvciA9IHJlcXVpcmUoJy4uLy4uLy4uL3V0aWwvd3Mvc2VuZF9lcnJvcicpXG5jb25zdCB2YWxpZGF0ZVBhcmFtcyA9IHJlcXVpcmUoJy4uLy4uLy4uL3V0aWwvd3MvdmFsaWRhdGVfcGFyYW1zJylcblxuY29uc3QgZ2V0SG9zdEtleSA9IHJlcXVpcmUoJy4uL3V0aWwvZ2V0X2hvc3Rfa2V5JylcbmNvbnN0IHZhbGlkYXRlQU8gPSByZXF1aXJlKCcuLi91dGlsL3ZhbGlkYXRlX2FvJylcblxubW9kdWxlLmV4cG9ydHMgPSBhc3luYyAoc2VydmVyLCB3cywgbXNnKSA9PiB7XG4gIGNvbnN0IHsgZCwgaG9zdHMgfSA9IHNlcnZlclxuICBjb25zdCBbLCB1c2VySUQsIGV4SUQsIGFvSUQsIHBhY2tldF0gPSBtc2dcbiAgY29uc3QgdmFsaWRSZXF1ZXN0ID0gdmFsaWRhdGVQYXJhbXMod3MsIHtcbiAgICBleElEOiB7IHR5cGU6ICdzdHJpbmcnLCB2OiBleElEIH0sXG4gICAgdXNlcklEOiB7IHR5cGU6ICdzdHJpbmcnLCB2OiB1c2VySUQgfSxcbiAgICBhb0lEOiB7IHR5cGU6ICdzdHJpbmcnLCB2OiBhb0lEIH0sXG4gICAgcGFja2V0OiB7IHR5cGU6ICdvYmplY3QnLCB2OiBwYWNrZXQgfVxuICB9KVxuXG4gIGlmICghdmFsaWRSZXF1ZXN0KSB7XG4gICAgcmV0dXJuXG4gIH0gZWxzZSBpZiAoIXdzLnVzZXJJRCkge1xuICAgIHJldHVybiBzZW5kRXJyb3Iod3MsICdOb3QgaWRlbnRpZmllZCcpXG4gIH0gZWxzZSBpZiAod3MudXNlcklEICE9PSB1c2VySUQpIHtcbiAgICBkKCd0cmllZCB0byBzdWJtaXQgQU8gZm9yIHVzZXIgdGhhdCBkaWZmZXJzIGZyb20gd3MgaWRlbnQgKCVzKScsIHVzZXJJRClcbiAgICByZXR1cm4gc2VuZEVycm9yKHdzLCAnVW5hdXRob3Jpc2VkJylcbiAgfVxuXG4gIGNvbnN0IGtleSA9IGdldEhvc3RLZXkodXNlcklELCBleElEKVxuICBjb25zdCBob3N0ID0gaG9zdHNba2V5XVxuXG4gIGlmICghaG9zdCkge1xuICAgIHJldHVybiBzZW5kRXJyb3Iod3MsIGBIb3N0IG5vdCBvcGVuIGZvciB1c2VyICR7dXNlcklEfSBvbiBleGNoYW5nZSAke2V4SUR9YClcbiAgfVxuXG4gIGNvbnN0IHZhbGlkYXRpb25FcnJvciA9IHZhbGlkYXRlQU8oaG9zdCwgYW9JRCwgcGFja2V0KVxuXG4gIGlmICh2YWxpZGF0aW9uRXJyb3IpIHtcbiAgICByZXR1cm4gc2VuZEVycm9yKHdzLCB2YWxpZGF0aW9uRXJyb3IpXG4gIH1cblxuICB0cnkge1xuICAgIGNvbnN0IGdpZCA9IGF3YWl0IGhvc3Quc3RhcnRBTyhhb0lELCBwYWNrZXQpXG4gICAgZCgnc3RhcnRlZCBBTyBmb3IgdXNlciAlcyBvbiBleGNoYW5nZSAlcyBbJXNdJywgdXNlcklELCBleElELCBnaWQpXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBkKCdlcnJvciBzdGFydGluZyBBTyAlcyBmb3IgJXM6ICVzJywgYW9JRCwgZXhJRCwgZS5zdGFjaylcbiAgICByZXR1cm4gc2VuZEVycm9yKHdzLCAnRmFpbGVkIHRvIHN0YXJ0IGFsZ28gb3JkZXInKVxuICB9XG59XG4iXX0=