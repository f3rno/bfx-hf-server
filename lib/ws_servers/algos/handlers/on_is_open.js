'use strict';

const send = require('../../../util/ws/send');
const sendError = require('../../../util/ws/send_error');
const validateParams = require('../../../util/ws/validate_params');
const getHostKey = require('../util/get_host_key');

module.exports = async (server, ws, msg) => {
  const { d, hosts } = server;
  const [, userID, exID, reqID] = msg;
  const validRequest = validateParams(ws, {
    exID: { type: 'string', v: exID },
    userID: { type: 'string', v: userID },
    reqID: { type: 'string', v: reqID } });


  if (!validRequest) {
    return;
  } else if (exID !== 'bitfinex' && exID !== 'binance') {
    return sendError(ws, 'Only Bitfinex and Binance are currently supported for algo orders');
  } else if (!ws.userID) {
    return sendError(ws, 'Not identified');
  } else if (ws.userID !== userID) {
    d('tried to query host for user that differs from ws ident (%s)', userID);
    return sendError(ws, 'Unauthorised');
  }

  const key = getHostKey(userID, exID);
  const existingHost = hosts[key];

  return send(ws, ['is.open.res', reqID, !!existingHost]);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93c19zZXJ2ZXJzL2FsZ29zL2hhbmRsZXJzL29uX2lzX29wZW4uanMiXSwibmFtZXMiOlsic2VuZCIsInJlcXVpcmUiLCJzZW5kRXJyb3IiLCJ2YWxpZGF0ZVBhcmFtcyIsImdldEhvc3RLZXkiLCJtb2R1bGUiLCJleHBvcnRzIiwic2VydmVyIiwid3MiLCJtc2ciLCJkIiwiaG9zdHMiLCJ1c2VySUQiLCJleElEIiwicmVxSUQiLCJ2YWxpZFJlcXVlc3QiLCJ0eXBlIiwidiIsImtleSIsImV4aXN0aW5nSG9zdCJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsTUFBTUEsSUFBSSxHQUFHQyxPQUFPLENBQUMsdUJBQUQsQ0FBcEI7QUFDQSxNQUFNQyxTQUFTLEdBQUdELE9BQU8sQ0FBQyw2QkFBRCxDQUF6QjtBQUNBLE1BQU1FLGNBQWMsR0FBR0YsT0FBTyxDQUFDLGtDQUFELENBQTlCO0FBQ0EsTUFBTUcsVUFBVSxHQUFHSCxPQUFPLENBQUMsc0JBQUQsQ0FBMUI7O0FBRUFJLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixPQUFPQyxNQUFQLEVBQWVDLEVBQWYsRUFBbUJDLEdBQW5CLEtBQTJCO0FBQzFDLFFBQU0sRUFBRUMsQ0FBRixFQUFLQyxLQUFMLEtBQWVKLE1BQXJCO0FBQ0EsUUFBTSxHQUFHSyxNQUFILEVBQVdDLElBQVgsRUFBaUJDLEtBQWpCLElBQTBCTCxHQUFoQztBQUNBLFFBQU1NLFlBQVksR0FBR1osY0FBYyxDQUFDSyxFQUFELEVBQUs7QUFDdENLLElBQUFBLElBQUksRUFBRSxFQUFFRyxJQUFJLEVBQUUsUUFBUixFQUFrQkMsQ0FBQyxFQUFFSixJQUFyQixFQURnQztBQUV0Q0QsSUFBQUEsTUFBTSxFQUFFLEVBQUVJLElBQUksRUFBRSxRQUFSLEVBQWtCQyxDQUFDLEVBQUVMLE1BQXJCLEVBRjhCO0FBR3RDRSxJQUFBQSxLQUFLLEVBQUUsRUFBRUUsSUFBSSxFQUFFLFFBQVIsRUFBa0JDLENBQUMsRUFBRUgsS0FBckIsRUFIK0IsRUFBTCxDQUFuQzs7O0FBTUEsTUFBSSxDQUFDQyxZQUFMLEVBQW1CO0FBQ2pCO0FBQ0QsR0FGRCxNQUVPLElBQUlGLElBQUksS0FBSyxVQUFULElBQXVCQSxJQUFJLEtBQUssU0FBcEMsRUFBK0M7QUFDcEQsV0FBT1gsU0FBUyxDQUFDTSxFQUFELEVBQUssbUVBQUwsQ0FBaEI7QUFDRCxHQUZNLE1BRUEsSUFBSSxDQUFDQSxFQUFFLENBQUNJLE1BQVIsRUFBZ0I7QUFDckIsV0FBT1YsU0FBUyxDQUFDTSxFQUFELEVBQUssZ0JBQUwsQ0FBaEI7QUFDRCxHQUZNLE1BRUEsSUFBSUEsRUFBRSxDQUFDSSxNQUFILEtBQWNBLE1BQWxCLEVBQTBCO0FBQy9CRixJQUFBQSxDQUFDLENBQUMsOERBQUQsRUFBaUVFLE1BQWpFLENBQUQ7QUFDQSxXQUFPVixTQUFTLENBQUNNLEVBQUQsRUFBSyxjQUFMLENBQWhCO0FBQ0Q7O0FBRUQsUUFBTVUsR0FBRyxHQUFHZCxVQUFVLENBQUNRLE1BQUQsRUFBU0MsSUFBVCxDQUF0QjtBQUNBLFFBQU1NLFlBQVksR0FBR1IsS0FBSyxDQUFDTyxHQUFELENBQTFCOztBQUVBLFNBQU9sQixJQUFJLENBQUNRLEVBQUQsRUFBSyxDQUFDLGFBQUQsRUFBZ0JNLEtBQWhCLEVBQXVCLENBQUMsQ0FBQ0ssWUFBekIsQ0FBTCxDQUFYO0FBQ0QsQ0F4QkQiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3Qgc2VuZCA9IHJlcXVpcmUoJy4uLy4uLy4uL3V0aWwvd3Mvc2VuZCcpXG5jb25zdCBzZW5kRXJyb3IgPSByZXF1aXJlKCcuLi8uLi8uLi91dGlsL3dzL3NlbmRfZXJyb3InKVxuY29uc3QgdmFsaWRhdGVQYXJhbXMgPSByZXF1aXJlKCcuLi8uLi8uLi91dGlsL3dzL3ZhbGlkYXRlX3BhcmFtcycpXG5jb25zdCBnZXRIb3N0S2V5ID0gcmVxdWlyZSgnLi4vdXRpbC9nZXRfaG9zdF9rZXknKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFzeW5jIChzZXJ2ZXIsIHdzLCBtc2cpID0+IHtcbiAgY29uc3QgeyBkLCBob3N0cyB9ID0gc2VydmVyXG4gIGNvbnN0IFssIHVzZXJJRCwgZXhJRCwgcmVxSURdID0gbXNnXG4gIGNvbnN0IHZhbGlkUmVxdWVzdCA9IHZhbGlkYXRlUGFyYW1zKHdzLCB7XG4gICAgZXhJRDogeyB0eXBlOiAnc3RyaW5nJywgdjogZXhJRCB9LFxuICAgIHVzZXJJRDogeyB0eXBlOiAnc3RyaW5nJywgdjogdXNlcklEIH0sXG4gICAgcmVxSUQ6IHsgdHlwZTogJ3N0cmluZycsIHY6IHJlcUlEIH1cbiAgfSlcblxuICBpZiAoIXZhbGlkUmVxdWVzdCkge1xuICAgIHJldHVyblxuICB9IGVsc2UgaWYgKGV4SUQgIT09ICdiaXRmaW5leCcgJiYgZXhJRCAhPT0gJ2JpbmFuY2UnKSB7XG4gICAgcmV0dXJuIHNlbmRFcnJvcih3cywgJ09ubHkgQml0ZmluZXggYW5kIEJpbmFuY2UgYXJlIGN1cnJlbnRseSBzdXBwb3J0ZWQgZm9yIGFsZ28gb3JkZXJzJylcbiAgfSBlbHNlIGlmICghd3MudXNlcklEKSB7XG4gICAgcmV0dXJuIHNlbmRFcnJvcih3cywgJ05vdCBpZGVudGlmaWVkJylcbiAgfSBlbHNlIGlmICh3cy51c2VySUQgIT09IHVzZXJJRCkge1xuICAgIGQoJ3RyaWVkIHRvIHF1ZXJ5IGhvc3QgZm9yIHVzZXIgdGhhdCBkaWZmZXJzIGZyb20gd3MgaWRlbnQgKCVzKScsIHVzZXJJRClcbiAgICByZXR1cm4gc2VuZEVycm9yKHdzLCAnVW5hdXRob3Jpc2VkJylcbiAgfVxuXG4gIGNvbnN0IGtleSA9IGdldEhvc3RLZXkodXNlcklELCBleElEKVxuICBjb25zdCBleGlzdGluZ0hvc3QgPSBob3N0c1trZXldXG5cbiAgcmV0dXJuIHNlbmQod3MsIFsnaXMub3Blbi5yZXMnLCByZXFJRCwgISFleGlzdGluZ0hvc3RdKVxufVxuIl19