'use strict';

const send = require('../../../util/ws/send');
const sendError = require('../../../util/ws/send_error');
const validateParams = require('../../../util/ws/validate_params');
const exClients = require('../../../exchange_clients');

const getHostKey = require('../util/get_host_key');

const EX_IDS = exClients.map(exc => exc.id);

module.exports = (server, ws, msg) => {
  const { hosts } = server;
  const [, userID] = msg;
  const validRequest = validateParams(ws, {
    userID: { type: 'string', v: userID } });


  if (!validRequest) {
    return;
  }

  if (ws.userID) {
    return sendError(ws, `Already identified as ${userID}`);
  }

  ws.userID = userID;

  send(ws, ['identified', userID]);

  EX_IDS.forEach(exID => {
    const key = getHostKey(userID, exID);
    const host = hosts[key];

    if (!host) {
      return;
    }

    const instances = host.getAOInstances();
    const activeInstances = instances.filter(aoInstance => {
      const { state = {} } = aoInstance;
      const { active } = state;
      return active;
    });

    if (activeInstances.length === 0) {
      return;
    }

    send(ws, ['data.aos', exID, activeInstances.map(aoInstance => {
      const { state = {} } = aoInstance;
      const { gid, name, args, label } = state;
      return [gid, name, label, args];
    })]);
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93c19zZXJ2ZXJzL2FsZ29zL2hhbmRsZXJzL29uX2lkZW50aWZ5LmpzIl0sIm5hbWVzIjpbInNlbmQiLCJyZXF1aXJlIiwic2VuZEVycm9yIiwidmFsaWRhdGVQYXJhbXMiLCJleENsaWVudHMiLCJnZXRIb3N0S2V5IiwiRVhfSURTIiwibWFwIiwiZXhjIiwiaWQiLCJtb2R1bGUiLCJleHBvcnRzIiwic2VydmVyIiwid3MiLCJtc2ciLCJob3N0cyIsInVzZXJJRCIsInZhbGlkUmVxdWVzdCIsInR5cGUiLCJ2IiwiZm9yRWFjaCIsImV4SUQiLCJrZXkiLCJob3N0IiwiaW5zdGFuY2VzIiwiZ2V0QU9JbnN0YW5jZXMiLCJhY3RpdmVJbnN0YW5jZXMiLCJmaWx0ZXIiLCJhb0luc3RhbmNlIiwic3RhdGUiLCJhY3RpdmUiLCJsZW5ndGgiLCJnaWQiLCJuYW1lIiwiYXJncyIsImxhYmVsIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxNQUFNQSxJQUFJLEdBQUdDLE9BQU8sQ0FBQyx1QkFBRCxDQUFwQjtBQUNBLE1BQU1DLFNBQVMsR0FBR0QsT0FBTyxDQUFDLDZCQUFELENBQXpCO0FBQ0EsTUFBTUUsY0FBYyxHQUFHRixPQUFPLENBQUMsa0NBQUQsQ0FBOUI7QUFDQSxNQUFNRyxTQUFTLEdBQUdILE9BQU8sQ0FBQywyQkFBRCxDQUF6Qjs7QUFFQSxNQUFNSSxVQUFVLEdBQUdKLE9BQU8sQ0FBQyxzQkFBRCxDQUExQjs7QUFFQSxNQUFNSyxNQUFNLEdBQUdGLFNBQVMsQ0FBQ0csR0FBVixDQUFjQyxHQUFHLElBQUlBLEdBQUcsQ0FBQ0MsRUFBekIsQ0FBZjs7QUFFQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLENBQUNDLE1BQUQsRUFBU0MsRUFBVCxFQUFhQyxHQUFiLEtBQXFCO0FBQ3BDLFFBQU0sRUFBRUMsS0FBRixLQUFZSCxNQUFsQjtBQUNBLFFBQU0sR0FBR0ksTUFBSCxJQUFhRixHQUFuQjtBQUNBLFFBQU1HLFlBQVksR0FBR2QsY0FBYyxDQUFDVSxFQUFELEVBQUs7QUFDdENHLElBQUFBLE1BQU0sRUFBRSxFQUFFRSxJQUFJLEVBQUUsUUFBUixFQUFrQkMsQ0FBQyxFQUFFSCxNQUFyQixFQUQ4QixFQUFMLENBQW5DOzs7QUFJQSxNQUFJLENBQUNDLFlBQUwsRUFBbUI7QUFDakI7QUFDRDs7QUFFRCxNQUFJSixFQUFFLENBQUNHLE1BQVAsRUFBZTtBQUNiLFdBQU9kLFNBQVMsQ0FBQ1csRUFBRCxFQUFNLHlCQUF3QkcsTUFBTyxFQUFyQyxDQUFoQjtBQUNEOztBQUVESCxFQUFBQSxFQUFFLENBQUNHLE1BQUgsR0FBWUEsTUFBWjs7QUFFQWhCLEVBQUFBLElBQUksQ0FBQ2EsRUFBRCxFQUFLLENBQUMsWUFBRCxFQUFlRyxNQUFmLENBQUwsQ0FBSjs7QUFFQVYsRUFBQUEsTUFBTSxDQUFDYyxPQUFQLENBQWdCQyxJQUFELElBQVU7QUFDdkIsVUFBTUMsR0FBRyxHQUFHakIsVUFBVSxDQUFDVyxNQUFELEVBQVNLLElBQVQsQ0FBdEI7QUFDQSxVQUFNRSxJQUFJLEdBQUdSLEtBQUssQ0FBQ08sR0FBRCxDQUFsQjs7QUFFQSxRQUFJLENBQUNDLElBQUwsRUFBVztBQUNUO0FBQ0Q7O0FBRUQsVUFBTUMsU0FBUyxHQUFHRCxJQUFJLENBQUNFLGNBQUwsRUFBbEI7QUFDQSxVQUFNQyxlQUFlLEdBQUdGLFNBQVMsQ0FBQ0csTUFBVixDQUFrQkMsVUFBRCxJQUFnQjtBQUN2RCxZQUFNLEVBQUVDLEtBQUssR0FBRyxFQUFWLEtBQWlCRCxVQUF2QjtBQUNBLFlBQU0sRUFBRUUsTUFBRixLQUFhRCxLQUFuQjtBQUNBLGFBQU9DLE1BQVA7QUFDRCxLQUp1QixDQUF4Qjs7QUFNQSxRQUFJSixlQUFlLENBQUNLLE1BQWhCLEtBQTJCLENBQS9CLEVBQWtDO0FBQ2hDO0FBQ0Q7O0FBRUQvQixJQUFBQSxJQUFJLENBQUNhLEVBQUQsRUFBSyxDQUFDLFVBQUQsRUFBYVEsSUFBYixFQUFtQkssZUFBZSxDQUFDbkIsR0FBaEIsQ0FBcUJxQixVQUFELElBQWdCO0FBQzlELFlBQU0sRUFBRUMsS0FBSyxHQUFHLEVBQVYsS0FBaUJELFVBQXZCO0FBQ0EsWUFBTSxFQUFFSSxHQUFGLEVBQU9DLElBQVAsRUFBYUMsSUFBYixFQUFtQkMsS0FBbkIsS0FBNkJOLEtBQW5DO0FBQ0EsYUFBTyxDQUFDRyxHQUFELEVBQU1DLElBQU4sRUFBWUUsS0FBWixFQUFtQkQsSUFBbkIsQ0FBUDtBQUNELEtBSjJCLENBQW5CLENBQUwsQ0FBSjtBQUtELEdBeEJEO0FBeUJELENBNUNEIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IHNlbmQgPSByZXF1aXJlKCcuLi8uLi8uLi91dGlsL3dzL3NlbmQnKVxuY29uc3Qgc2VuZEVycm9yID0gcmVxdWlyZSgnLi4vLi4vLi4vdXRpbC93cy9zZW5kX2Vycm9yJylcbmNvbnN0IHZhbGlkYXRlUGFyYW1zID0gcmVxdWlyZSgnLi4vLi4vLi4vdXRpbC93cy92YWxpZGF0ZV9wYXJhbXMnKVxuY29uc3QgZXhDbGllbnRzID0gcmVxdWlyZSgnLi4vLi4vLi4vZXhjaGFuZ2VfY2xpZW50cycpXG5cbmNvbnN0IGdldEhvc3RLZXkgPSByZXF1aXJlKCcuLi91dGlsL2dldF9ob3N0X2tleScpXG5cbmNvbnN0IEVYX0lEUyA9IGV4Q2xpZW50cy5tYXAoZXhjID0+IGV4Yy5pZClcblxubW9kdWxlLmV4cG9ydHMgPSAoc2VydmVyLCB3cywgbXNnKSA9PiB7XG4gIGNvbnN0IHsgaG9zdHMgfSA9IHNlcnZlclxuICBjb25zdCBbLCB1c2VySURdID0gbXNnXG4gIGNvbnN0IHZhbGlkUmVxdWVzdCA9IHZhbGlkYXRlUGFyYW1zKHdzLCB7XG4gICAgdXNlcklEOiB7IHR5cGU6ICdzdHJpbmcnLCB2OiB1c2VySUQgfVxuICB9KVxuXG4gIGlmICghdmFsaWRSZXF1ZXN0KSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICBpZiAod3MudXNlcklEKSB7XG4gICAgcmV0dXJuIHNlbmRFcnJvcih3cywgYEFscmVhZHkgaWRlbnRpZmllZCBhcyAke3VzZXJJRH1gKVxuICB9XG5cbiAgd3MudXNlcklEID0gdXNlcklEXG5cbiAgc2VuZCh3cywgWydpZGVudGlmaWVkJywgdXNlcklEXSlcblxuICBFWF9JRFMuZm9yRWFjaCgoZXhJRCkgPT4ge1xuICAgIGNvbnN0IGtleSA9IGdldEhvc3RLZXkodXNlcklELCBleElEKVxuICAgIGNvbnN0IGhvc3QgPSBob3N0c1trZXldXG5cbiAgICBpZiAoIWhvc3QpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IGluc3RhbmNlcyA9IGhvc3QuZ2V0QU9JbnN0YW5jZXMoKVxuICAgIGNvbnN0IGFjdGl2ZUluc3RhbmNlcyA9IGluc3RhbmNlcy5maWx0ZXIoKGFvSW5zdGFuY2UpID0+IHtcbiAgICAgIGNvbnN0IHsgc3RhdGUgPSB7fSB9ID0gYW9JbnN0YW5jZVxuICAgICAgY29uc3QgeyBhY3RpdmUgfSA9IHN0YXRlXG4gICAgICByZXR1cm4gYWN0aXZlXG4gICAgfSlcblxuICAgIGlmIChhY3RpdmVJbnN0YW5jZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBzZW5kKHdzLCBbJ2RhdGEuYW9zJywgZXhJRCwgYWN0aXZlSW5zdGFuY2VzLm1hcCgoYW9JbnN0YW5jZSkgPT4ge1xuICAgICAgY29uc3QgeyBzdGF0ZSA9IHt9IH0gPSBhb0luc3RhbmNlXG4gICAgICBjb25zdCB7IGdpZCwgbmFtZSwgYXJncywgbGFiZWwgfSA9IHN0YXRlXG4gICAgICByZXR1cm4gW2dpZCwgbmFtZSwgbGFiZWwsIGFyZ3NdXG4gICAgfSldKVxuICB9KVxufVxuIl19