'use strict';

const send = require('../../../util/ws/send');
const sendError = require('../../../util/ws/send_error');
const validateParams = require('../../../util/ws/validate_params');

module.exports = (server, ws, msg) => {
  const { d } = server;
  const [, userID] = msg;
  const validRequest = validateParams(ws, {
    userID: { type: 'string', v: userID } });


  if (!validRequest) {
    return;
  }

  if (!ws.userID) {
    return sendError(ws, 'Not identified');
  } else if (ws.userID !== userID) {
    d('tried to req status for user that differs from ws ident (%s)', userID);
    return sendError(ws, 'Unauthorised');
  }

  const hosts = server.getHostsForUser(ws.userID);

  send(ws, ['status', hosts]);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93c19zZXJ2ZXJzL2FsZ29zL2hhbmRsZXJzL29uX3N0YXR1cy5qcyJdLCJuYW1lcyI6WyJzZW5kIiwicmVxdWlyZSIsInNlbmRFcnJvciIsInZhbGlkYXRlUGFyYW1zIiwibW9kdWxlIiwiZXhwb3J0cyIsInNlcnZlciIsIndzIiwibXNnIiwiZCIsInVzZXJJRCIsInZhbGlkUmVxdWVzdCIsInR5cGUiLCJ2IiwiaG9zdHMiLCJnZXRIb3N0c0ZvclVzZXIiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLE1BQU1BLElBQUksR0FBR0MsT0FBTyxDQUFDLHVCQUFELENBQXBCO0FBQ0EsTUFBTUMsU0FBUyxHQUFHRCxPQUFPLENBQUMsNkJBQUQsQ0FBekI7QUFDQSxNQUFNRSxjQUFjLEdBQUdGLE9BQU8sQ0FBQyxrQ0FBRCxDQUE5Qjs7QUFFQUcsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLENBQUNDLE1BQUQsRUFBU0MsRUFBVCxFQUFhQyxHQUFiLEtBQXFCO0FBQ3BDLFFBQU0sRUFBRUMsQ0FBRixLQUFRSCxNQUFkO0FBQ0EsUUFBTSxHQUFHSSxNQUFILElBQWFGLEdBQW5CO0FBQ0EsUUFBTUcsWUFBWSxHQUFHUixjQUFjLENBQUNJLEVBQUQsRUFBSztBQUN0Q0csSUFBQUEsTUFBTSxFQUFFLEVBQUVFLElBQUksRUFBRSxRQUFSLEVBQWtCQyxDQUFDLEVBQUVILE1BQXJCLEVBRDhCLEVBQUwsQ0FBbkM7OztBQUlBLE1BQUksQ0FBQ0MsWUFBTCxFQUFtQjtBQUNqQjtBQUNEOztBQUVELE1BQUksQ0FBQ0osRUFBRSxDQUFDRyxNQUFSLEVBQWdCO0FBQ2QsV0FBT1IsU0FBUyxDQUFDSyxFQUFELEVBQUssZ0JBQUwsQ0FBaEI7QUFDRCxHQUZELE1BRU8sSUFBSUEsRUFBRSxDQUFDRyxNQUFILEtBQWNBLE1BQWxCLEVBQTBCO0FBQy9CRCxJQUFBQSxDQUFDLENBQUMsOERBQUQsRUFBaUVDLE1BQWpFLENBQUQ7QUFDQSxXQUFPUixTQUFTLENBQUNLLEVBQUQsRUFBSyxjQUFMLENBQWhCO0FBQ0Q7O0FBRUQsUUFBTU8sS0FBSyxHQUFHUixNQUFNLENBQUNTLGVBQVAsQ0FBdUJSLEVBQUUsQ0FBQ0csTUFBMUIsQ0FBZDs7QUFFQVYsRUFBQUEsSUFBSSxDQUFDTyxFQUFELEVBQUssQ0FBQyxRQUFELEVBQVdPLEtBQVgsQ0FBTCxDQUFKO0FBQ0QsQ0FyQkQiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3Qgc2VuZCA9IHJlcXVpcmUoJy4uLy4uLy4uL3V0aWwvd3Mvc2VuZCcpXG5jb25zdCBzZW5kRXJyb3IgPSByZXF1aXJlKCcuLi8uLi8uLi91dGlsL3dzL3NlbmRfZXJyb3InKVxuY29uc3QgdmFsaWRhdGVQYXJhbXMgPSByZXF1aXJlKCcuLi8uLi8uLi91dGlsL3dzL3ZhbGlkYXRlX3BhcmFtcycpXG5cbm1vZHVsZS5leHBvcnRzID0gKHNlcnZlciwgd3MsIG1zZykgPT4ge1xuICBjb25zdCB7IGQgfSA9IHNlcnZlclxuICBjb25zdCBbLCB1c2VySURdID0gbXNnXG4gIGNvbnN0IHZhbGlkUmVxdWVzdCA9IHZhbGlkYXRlUGFyYW1zKHdzLCB7XG4gICAgdXNlcklEOiB7IHR5cGU6ICdzdHJpbmcnLCB2OiB1c2VySUQgfVxuICB9KVxuXG4gIGlmICghdmFsaWRSZXF1ZXN0KSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICBpZiAoIXdzLnVzZXJJRCkge1xuICAgIHJldHVybiBzZW5kRXJyb3Iod3MsICdOb3QgaWRlbnRpZmllZCcpXG4gIH0gZWxzZSBpZiAod3MudXNlcklEICE9PSB1c2VySUQpIHtcbiAgICBkKCd0cmllZCB0byByZXEgc3RhdHVzIGZvciB1c2VyIHRoYXQgZGlmZmVycyBmcm9tIHdzIGlkZW50ICglcyknLCB1c2VySUQpXG4gICAgcmV0dXJuIHNlbmRFcnJvcih3cywgJ1VuYXV0aG9yaXNlZCcpXG4gIH1cblxuICBjb25zdCBob3N0cyA9IHNlcnZlci5nZXRIb3N0c0ZvclVzZXIod3MudXNlcklEKVxuXG4gIHNlbmQod3MsIFsnc3RhdHVzJywgaG9zdHNdKVxufVxuIl19