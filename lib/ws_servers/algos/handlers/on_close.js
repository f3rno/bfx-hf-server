'use strict';

const send = require('../../../util/ws/send');
const sendError = require('../../../util/ws/send_error');
const validateParams = require('../../../util/ws/validate_params');
const getHostKey = require('../util/get_host_key');

module.exports = (server, ws, msg) => {
  const { d, hosts } = server;
  const [, userID, exID] = msg;
  const validRequest = validateParams(ws, {
    exID: { type: 'string', v: exID },
    userID: { type: 'string', v: userID } });


  if (!validRequest) {
    return;
  }

  if (!ws.userID) {
    return sendError(ws, 'Not identified');
  } else if (ws.userID !== userID) {
    d('tried to close host for user that differs from ws ident (%s)', userID);
    return sendError(ws, 'Unauthorised');
  }

  const key = getHostKey(userID, exID);
  const host = hosts[key];

  if (!host) {
    return; // host not running
  }

  if (host.aosRunning()) {
    return send(ws, ['persisting', userID, exID]);
  }

  host.close();
  delete hosts[key];

  d('closed host for user %s on exchange %s', userID, exID);
  send(ws, ['closed', userID, exID]);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93c19zZXJ2ZXJzL2FsZ29zL2hhbmRsZXJzL29uX2Nsb3NlLmpzIl0sIm5hbWVzIjpbInNlbmQiLCJyZXF1aXJlIiwic2VuZEVycm9yIiwidmFsaWRhdGVQYXJhbXMiLCJnZXRIb3N0S2V5IiwibW9kdWxlIiwiZXhwb3J0cyIsInNlcnZlciIsIndzIiwibXNnIiwiZCIsImhvc3RzIiwidXNlcklEIiwiZXhJRCIsInZhbGlkUmVxdWVzdCIsInR5cGUiLCJ2Iiwia2V5IiwiaG9zdCIsImFvc1J1bm5pbmciLCJjbG9zZSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsTUFBTUEsSUFBSSxHQUFHQyxPQUFPLENBQUMsdUJBQUQsQ0FBcEI7QUFDQSxNQUFNQyxTQUFTLEdBQUdELE9BQU8sQ0FBQyw2QkFBRCxDQUF6QjtBQUNBLE1BQU1FLGNBQWMsR0FBR0YsT0FBTyxDQUFDLGtDQUFELENBQTlCO0FBQ0EsTUFBTUcsVUFBVSxHQUFHSCxPQUFPLENBQUMsc0JBQUQsQ0FBMUI7O0FBRUFJLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixDQUFDQyxNQUFELEVBQVNDLEVBQVQsRUFBYUMsR0FBYixLQUFxQjtBQUNwQyxRQUFNLEVBQUVDLENBQUYsRUFBS0MsS0FBTCxLQUFlSixNQUFyQjtBQUNBLFFBQU0sR0FBR0ssTUFBSCxFQUFXQyxJQUFYLElBQW1CSixHQUF6QjtBQUNBLFFBQU1LLFlBQVksR0FBR1gsY0FBYyxDQUFDSyxFQUFELEVBQUs7QUFDdENLLElBQUFBLElBQUksRUFBRSxFQUFFRSxJQUFJLEVBQUUsUUFBUixFQUFrQkMsQ0FBQyxFQUFFSCxJQUFyQixFQURnQztBQUV0Q0QsSUFBQUEsTUFBTSxFQUFFLEVBQUVHLElBQUksRUFBRSxRQUFSLEVBQWtCQyxDQUFDLEVBQUVKLE1BQXJCLEVBRjhCLEVBQUwsQ0FBbkM7OztBQUtBLE1BQUksQ0FBQ0UsWUFBTCxFQUFtQjtBQUNqQjtBQUNEOztBQUVELE1BQUksQ0FBQ04sRUFBRSxDQUFDSSxNQUFSLEVBQWdCO0FBQ2QsV0FBT1YsU0FBUyxDQUFDTSxFQUFELEVBQUssZ0JBQUwsQ0FBaEI7QUFDRCxHQUZELE1BRU8sSUFBSUEsRUFBRSxDQUFDSSxNQUFILEtBQWNBLE1BQWxCLEVBQTBCO0FBQy9CRixJQUFBQSxDQUFDLENBQUMsOERBQUQsRUFBaUVFLE1BQWpFLENBQUQ7QUFDQSxXQUFPVixTQUFTLENBQUNNLEVBQUQsRUFBSyxjQUFMLENBQWhCO0FBQ0Q7O0FBRUQsUUFBTVMsR0FBRyxHQUFHYixVQUFVLENBQUNRLE1BQUQsRUFBU0MsSUFBVCxDQUF0QjtBQUNBLFFBQU1LLElBQUksR0FBR1AsS0FBSyxDQUFDTSxHQUFELENBQWxCOztBQUVBLE1BQUksQ0FBQ0MsSUFBTCxFQUFXO0FBQ1QsV0FEUyxDQUNGO0FBQ1I7O0FBRUQsTUFBSUEsSUFBSSxDQUFDQyxVQUFMLEVBQUosRUFBdUI7QUFDckIsV0FBT25CLElBQUksQ0FBQ1EsRUFBRCxFQUFLLENBQUMsWUFBRCxFQUFlSSxNQUFmLEVBQXVCQyxJQUF2QixDQUFMLENBQVg7QUFDRDs7QUFFREssRUFBQUEsSUFBSSxDQUFDRSxLQUFMO0FBQ0EsU0FBT1QsS0FBSyxDQUFDTSxHQUFELENBQVo7O0FBRUFQLEVBQUFBLENBQUMsQ0FBQyx3Q0FBRCxFQUEyQ0UsTUFBM0MsRUFBbURDLElBQW5ELENBQUQ7QUFDQWIsRUFBQUEsSUFBSSxDQUFDUSxFQUFELEVBQUssQ0FBQyxRQUFELEVBQVdJLE1BQVgsRUFBbUJDLElBQW5CLENBQUwsQ0FBSjtBQUNELENBbkNEIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IHNlbmQgPSByZXF1aXJlKCcuLi8uLi8uLi91dGlsL3dzL3NlbmQnKVxuY29uc3Qgc2VuZEVycm9yID0gcmVxdWlyZSgnLi4vLi4vLi4vdXRpbC93cy9zZW5kX2Vycm9yJylcbmNvbnN0IHZhbGlkYXRlUGFyYW1zID0gcmVxdWlyZSgnLi4vLi4vLi4vdXRpbC93cy92YWxpZGF0ZV9wYXJhbXMnKVxuY29uc3QgZ2V0SG9zdEtleSA9IHJlcXVpcmUoJy4uL3V0aWwvZ2V0X2hvc3Rfa2V5JylcblxubW9kdWxlLmV4cG9ydHMgPSAoc2VydmVyLCB3cywgbXNnKSA9PiB7XG4gIGNvbnN0IHsgZCwgaG9zdHMgfSA9IHNlcnZlclxuICBjb25zdCBbLCB1c2VySUQsIGV4SURdID0gbXNnXG4gIGNvbnN0IHZhbGlkUmVxdWVzdCA9IHZhbGlkYXRlUGFyYW1zKHdzLCB7XG4gICAgZXhJRDogeyB0eXBlOiAnc3RyaW5nJywgdjogZXhJRCB9LFxuICAgIHVzZXJJRDogeyB0eXBlOiAnc3RyaW5nJywgdjogdXNlcklEIH1cbiAgfSlcblxuICBpZiAoIXZhbGlkUmVxdWVzdCkge1xuICAgIHJldHVyblxuICB9XG5cbiAgaWYgKCF3cy51c2VySUQpIHtcbiAgICByZXR1cm4gc2VuZEVycm9yKHdzLCAnTm90IGlkZW50aWZpZWQnKVxuICB9IGVsc2UgaWYgKHdzLnVzZXJJRCAhPT0gdXNlcklEKSB7XG4gICAgZCgndHJpZWQgdG8gY2xvc2UgaG9zdCBmb3IgdXNlciB0aGF0IGRpZmZlcnMgZnJvbSB3cyBpZGVudCAoJXMpJywgdXNlcklEKVxuICAgIHJldHVybiBzZW5kRXJyb3Iod3MsICdVbmF1dGhvcmlzZWQnKVxuICB9XG5cbiAgY29uc3Qga2V5ID0gZ2V0SG9zdEtleSh1c2VySUQsIGV4SUQpXG4gIGNvbnN0IGhvc3QgPSBob3N0c1trZXldXG5cbiAgaWYgKCFob3N0KSB7XG4gICAgcmV0dXJuIC8vIGhvc3Qgbm90IHJ1bm5pbmdcbiAgfVxuXG4gIGlmIChob3N0LmFvc1J1bm5pbmcoKSkge1xuICAgIHJldHVybiBzZW5kKHdzLCBbJ3BlcnNpc3RpbmcnLCB1c2VySUQsIGV4SURdKVxuICB9XG5cbiAgaG9zdC5jbG9zZSgpXG4gIGRlbGV0ZSBob3N0c1trZXldXG5cbiAgZCgnY2xvc2VkIGhvc3QgZm9yIHVzZXIgJXMgb24gZXhjaGFuZ2UgJXMnLCB1c2VySUQsIGV4SUQpXG4gIHNlbmQod3MsIFsnY2xvc2VkJywgdXNlcklELCBleElEXSlcbn1cbiJdfQ==