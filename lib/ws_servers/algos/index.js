'use strict';

const WSServer = require('../../ws_server');

const send = require('../../util/ws/send');
const onIdentify = require('./handlers/on_identify');
const onSubmit = require('./handlers/on_submit');
const onCancel = require('./handlers/on_cancel');
const onOpen = require('./handlers/on_open');
const onClose = require('./handlers/on_close');
const onStatus = require('./handlers/on_status');
const onReconnect = require('./handlers/on_reconnect');
const onIsOpen = require('./handlers/on_is_open');
const parseHostKey = require('./util/parse_host_key');

module.exports = class AlgoServer extends WSServer {
  constructor({
    apiDB,
    port,
    hfLowDBPath })
  {
    super({
      port,
      debugName: 'algos',
      msgHandlers: {
        identify: onIdentify,
        reconnect: onReconnect,
        submit: onSubmit,
        cancel: onCancel,
        open: onOpen,
        close: onClose,
        status: onStatus,
        'is.open': onIsOpen } });



    this.apiDB = apiDB;
    this.dbPath = hfLowDBPath;
    this.clients = {};
    this.hosts = {};
  }

  broadcast(userID, data) {
    Object.values(this.clients).forEach(ws => {
      if (ws.userID === userID) {
        send(ws, data);
      }
    });
  }

  onWSSConnection(ws) {
    super.onWSSConnection(ws);
    this.clients[ws.id] = ws;
  }

  onWSClose(ws) {
    super.onWSClose(ws);
    delete this.clients[ws.id];
  }

  getHostsForUser(userID) {
    const hostKeys = Object.keys(this.hosts);

    return hostKeys.
    map(parseHostKey).
    filter(key => key.userID === userID).
    map(({ exID }) => exID);
  }};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy93c19zZXJ2ZXJzL2FsZ29zL2luZGV4LmpzIl0sIm5hbWVzIjpbIldTU2VydmVyIiwicmVxdWlyZSIsInNlbmQiLCJvbklkZW50aWZ5Iiwib25TdWJtaXQiLCJvbkNhbmNlbCIsIm9uT3BlbiIsIm9uQ2xvc2UiLCJvblN0YXR1cyIsIm9uUmVjb25uZWN0Iiwib25Jc09wZW4iLCJwYXJzZUhvc3RLZXkiLCJtb2R1bGUiLCJleHBvcnRzIiwiQWxnb1NlcnZlciIsImNvbnN0cnVjdG9yIiwiYXBpREIiLCJwb3J0IiwiaGZMb3dEQlBhdGgiLCJkZWJ1Z05hbWUiLCJtc2dIYW5kbGVycyIsImlkZW50aWZ5IiwicmVjb25uZWN0Iiwic3VibWl0IiwiY2FuY2VsIiwib3BlbiIsImNsb3NlIiwic3RhdHVzIiwiZGJQYXRoIiwiY2xpZW50cyIsImhvc3RzIiwiYnJvYWRjYXN0IiwidXNlcklEIiwiZGF0YSIsIk9iamVjdCIsInZhbHVlcyIsImZvckVhY2giLCJ3cyIsIm9uV1NTQ29ubmVjdGlvbiIsImlkIiwib25XU0Nsb3NlIiwiZ2V0SG9zdHNGb3JVc2VyIiwiaG9zdEtleXMiLCJrZXlzIiwibWFwIiwiZmlsdGVyIiwia2V5IiwiZXhJRCJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsTUFBTUEsUUFBUSxHQUFHQyxPQUFPLENBQUMsaUJBQUQsQ0FBeEI7O0FBRUEsTUFBTUMsSUFBSSxHQUFHRCxPQUFPLENBQUMsb0JBQUQsQ0FBcEI7QUFDQSxNQUFNRSxVQUFVLEdBQUdGLE9BQU8sQ0FBQyx3QkFBRCxDQUExQjtBQUNBLE1BQU1HLFFBQVEsR0FBR0gsT0FBTyxDQUFDLHNCQUFELENBQXhCO0FBQ0EsTUFBTUksUUFBUSxHQUFHSixPQUFPLENBQUMsc0JBQUQsQ0FBeEI7QUFDQSxNQUFNSyxNQUFNLEdBQUdMLE9BQU8sQ0FBQyxvQkFBRCxDQUF0QjtBQUNBLE1BQU1NLE9BQU8sR0FBR04sT0FBTyxDQUFDLHFCQUFELENBQXZCO0FBQ0EsTUFBTU8sUUFBUSxHQUFHUCxPQUFPLENBQUMsc0JBQUQsQ0FBeEI7QUFDQSxNQUFNUSxXQUFXLEdBQUdSLE9BQU8sQ0FBQyx5QkFBRCxDQUEzQjtBQUNBLE1BQU1TLFFBQVEsR0FBR1QsT0FBTyxDQUFDLHVCQUFELENBQXhCO0FBQ0EsTUFBTVUsWUFBWSxHQUFHVixPQUFPLENBQUMsdUJBQUQsQ0FBNUI7O0FBRUFXLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixNQUFNQyxVQUFOLFNBQXlCZCxRQUF6QixDQUFrQztBQUNqRGUsRUFBQUEsV0FBVyxDQUFFO0FBQ1hDLElBQUFBLEtBRFc7QUFFWEMsSUFBQUEsSUFGVztBQUdYQyxJQUFBQSxXQUhXLEVBQUY7QUFJUjtBQUNELFVBQU07QUFDSkQsTUFBQUEsSUFESTtBQUVKRSxNQUFBQSxTQUFTLEVBQUUsT0FGUDtBQUdKQyxNQUFBQSxXQUFXLEVBQUU7QUFDWEMsUUFBQUEsUUFBUSxFQUFFbEIsVUFEQztBQUVYbUIsUUFBQUEsU0FBUyxFQUFFYixXQUZBO0FBR1hjLFFBQUFBLE1BQU0sRUFBRW5CLFFBSEc7QUFJWG9CLFFBQUFBLE1BQU0sRUFBRW5CLFFBSkc7QUFLWG9CLFFBQUFBLElBQUksRUFBRW5CLE1BTEs7QUFNWG9CLFFBQUFBLEtBQUssRUFBRW5CLE9BTkk7QUFPWG9CLFFBQUFBLE1BQU0sRUFBRW5CLFFBUEc7QUFRWCxtQkFBV0UsUUFSQSxFQUhULEVBQU47Ozs7QUFlQSxTQUFLTSxLQUFMLEdBQWFBLEtBQWI7QUFDQSxTQUFLWSxNQUFMLEdBQWNWLFdBQWQ7QUFDQSxTQUFLVyxPQUFMLEdBQWUsRUFBZjtBQUNBLFNBQUtDLEtBQUwsR0FBYSxFQUFiO0FBQ0Q7O0FBRURDLEVBQUFBLFNBQVMsQ0FBRUMsTUFBRixFQUFVQyxJQUFWLEVBQWdCO0FBQ3ZCQyxJQUFBQSxNQUFNLENBQUNDLE1BQVAsQ0FBYyxLQUFLTixPQUFuQixFQUE0Qk8sT0FBNUIsQ0FBcUNDLEVBQUQsSUFBUTtBQUMxQyxVQUFJQSxFQUFFLENBQUNMLE1BQUgsS0FBY0EsTUFBbEIsRUFBMEI7QUFDeEI5QixRQUFBQSxJQUFJLENBQUNtQyxFQUFELEVBQUtKLElBQUwsQ0FBSjtBQUNEO0FBQ0YsS0FKRDtBQUtEOztBQUVESyxFQUFBQSxlQUFlLENBQUVELEVBQUYsRUFBTTtBQUNuQixVQUFNQyxlQUFOLENBQXNCRCxFQUF0QjtBQUNBLFNBQUtSLE9BQUwsQ0FBYVEsRUFBRSxDQUFDRSxFQUFoQixJQUFzQkYsRUFBdEI7QUFDRDs7QUFFREcsRUFBQUEsU0FBUyxDQUFFSCxFQUFGLEVBQU07QUFDYixVQUFNRyxTQUFOLENBQWdCSCxFQUFoQjtBQUNBLFdBQU8sS0FBS1IsT0FBTCxDQUFhUSxFQUFFLENBQUNFLEVBQWhCLENBQVA7QUFDRDs7QUFFREUsRUFBQUEsZUFBZSxDQUFFVCxNQUFGLEVBQVU7QUFDdkIsVUFBTVUsUUFBUSxHQUFHUixNQUFNLENBQUNTLElBQVAsQ0FBWSxLQUFLYixLQUFqQixDQUFqQjs7QUFFQSxXQUFPWSxRQUFRO0FBQ1pFLElBQUFBLEdBREksQ0FDQWpDLFlBREE7QUFFSmtDLElBQUFBLE1BRkksQ0FFSUMsR0FBRCxJQUFTQSxHQUFHLENBQUNkLE1BQUosS0FBZUEsTUFGM0I7QUFHSlksSUFBQUEsR0FISSxDQUdBLENBQUMsRUFBRUcsSUFBRixFQUFELEtBQWNBLElBSGQsQ0FBUDtBQUlELEdBcERnRCxDQUFuRCIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5jb25zdCBXU1NlcnZlciA9IHJlcXVpcmUoJy4uLy4uL3dzX3NlcnZlcicpXG5cbmNvbnN0IHNlbmQgPSByZXF1aXJlKCcuLi8uLi91dGlsL3dzL3NlbmQnKVxuY29uc3Qgb25JZGVudGlmeSA9IHJlcXVpcmUoJy4vaGFuZGxlcnMvb25faWRlbnRpZnknKVxuY29uc3Qgb25TdWJtaXQgPSByZXF1aXJlKCcuL2hhbmRsZXJzL29uX3N1Ym1pdCcpXG5jb25zdCBvbkNhbmNlbCA9IHJlcXVpcmUoJy4vaGFuZGxlcnMvb25fY2FuY2VsJylcbmNvbnN0IG9uT3BlbiA9IHJlcXVpcmUoJy4vaGFuZGxlcnMvb25fb3BlbicpXG5jb25zdCBvbkNsb3NlID0gcmVxdWlyZSgnLi9oYW5kbGVycy9vbl9jbG9zZScpXG5jb25zdCBvblN0YXR1cyA9IHJlcXVpcmUoJy4vaGFuZGxlcnMvb25fc3RhdHVzJylcbmNvbnN0IG9uUmVjb25uZWN0ID0gcmVxdWlyZSgnLi9oYW5kbGVycy9vbl9yZWNvbm5lY3QnKVxuY29uc3Qgb25Jc09wZW4gPSByZXF1aXJlKCcuL2hhbmRsZXJzL29uX2lzX29wZW4nKVxuY29uc3QgcGFyc2VIb3N0S2V5ID0gcmVxdWlyZSgnLi91dGlsL3BhcnNlX2hvc3Rfa2V5JylcblxubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBBbGdvU2VydmVyIGV4dGVuZHMgV1NTZXJ2ZXIge1xuICBjb25zdHJ1Y3RvciAoe1xuICAgIGFwaURCLFxuICAgIHBvcnQsXG4gICAgaGZMb3dEQlBhdGhcbiAgfSkge1xuICAgIHN1cGVyKHtcbiAgICAgIHBvcnQsXG4gICAgICBkZWJ1Z05hbWU6ICdhbGdvcycsXG4gICAgICBtc2dIYW5kbGVyczoge1xuICAgICAgICBpZGVudGlmeTogb25JZGVudGlmeSxcbiAgICAgICAgcmVjb25uZWN0OiBvblJlY29ubmVjdCxcbiAgICAgICAgc3VibWl0OiBvblN1Ym1pdCxcbiAgICAgICAgY2FuY2VsOiBvbkNhbmNlbCxcbiAgICAgICAgb3Blbjogb25PcGVuLFxuICAgICAgICBjbG9zZTogb25DbG9zZSxcbiAgICAgICAgc3RhdHVzOiBvblN0YXR1cyxcbiAgICAgICAgJ2lzLm9wZW4nOiBvbklzT3BlblxuICAgICAgfVxuICAgIH0pXG5cbiAgICB0aGlzLmFwaURCID0gYXBpREJcbiAgICB0aGlzLmRiUGF0aCA9IGhmTG93REJQYXRoXG4gICAgdGhpcy5jbGllbnRzID0ge31cbiAgICB0aGlzLmhvc3RzID0ge31cbiAgfVxuXG4gIGJyb2FkY2FzdCAodXNlcklELCBkYXRhKSB7XG4gICAgT2JqZWN0LnZhbHVlcyh0aGlzLmNsaWVudHMpLmZvckVhY2goKHdzKSA9PiB7XG4gICAgICBpZiAod3MudXNlcklEID09PSB1c2VySUQpIHtcbiAgICAgICAgc2VuZCh3cywgZGF0YSlcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgb25XU1NDb25uZWN0aW9uICh3cykge1xuICAgIHN1cGVyLm9uV1NTQ29ubmVjdGlvbih3cylcbiAgICB0aGlzLmNsaWVudHNbd3MuaWRdID0gd3NcbiAgfVxuXG4gIG9uV1NDbG9zZSAod3MpIHtcbiAgICBzdXBlci5vbldTQ2xvc2Uod3MpXG4gICAgZGVsZXRlIHRoaXMuY2xpZW50c1t3cy5pZF1cbiAgfVxuXG4gIGdldEhvc3RzRm9yVXNlciAodXNlcklEKSB7XG4gICAgY29uc3QgaG9zdEtleXMgPSBPYmplY3Qua2V5cyh0aGlzLmhvc3RzKVxuXG4gICAgcmV0dXJuIGhvc3RLZXlzXG4gICAgICAubWFwKHBhcnNlSG9zdEtleSlcbiAgICAgIC5maWx0ZXIoKGtleSkgPT4ga2V5LnVzZXJJRCA9PT0gdXNlcklEKVxuICAgICAgLm1hcCgoeyBleElEIH0pID0+IGV4SUQpXG4gIH1cbn1cbiJdfQ==