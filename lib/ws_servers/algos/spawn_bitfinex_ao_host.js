'use strict';

const { _default: DEFAULT_SETTINGS } = require('bfx-hf-ui-config').UserSettings;
const HFDB = require('bfx-hf-models');
const { RESTv2 } = require('bfx-api-node-rest');
const HFDBLowDBAdapter = require('bfx-hf-models-adapter-lowdb');
const {
  AOAdapter: BFXAOAdapter,
  schema: HFDBBitfinexSchema } =
require('bfx-hf-ext-plugin-bitfinex');

const initAOHost = require('../../util/init_ao_host');
const BitfinexEXA = require('../../exchange_clients/bitfinex');

module.exports = async (server, apiKey, apiSecret) => {
  const { dbPath, apiDB, d } = server;
  const { UserSettings } = apiDB;
  const { userSettings: settings } = await UserSettings.getAll();
  const { dms, affiliateCode } = settings || DEFAULT_SETTINGS;

  d(
  'spawning bfx algo host (dms %s) [aff %s]',
  dms ? 'enabled' : 'disabled',
  affiliateCode);


  return initAOHost({
    adapter: new BFXAOAdapter({
      apiKey,
      apiSecret,
      dms: dms ? 4 : 0,
      withHeartbeat: true,
      affiliateCode }),


    db: new HFDB({
      schema: HFDBBitfinexSchema,
      adapter: HFDBLowDBAdapter({
        dbPath }) }),



    initCB: async aoHost => {
      const { aos } = aoHost;
      const rest = new RESTv2({
        apiKey,
        apiSecret });


      await BitfinexEXA.registerUIDefs(aos, rest);
    } });

};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy93c19zZXJ2ZXJzL2FsZ29zL3NwYXduX2JpdGZpbmV4X2FvX2hvc3QuanMiXSwibmFtZXMiOlsiX2RlZmF1bHQiLCJERUZBVUxUX1NFVFRJTkdTIiwicmVxdWlyZSIsIlVzZXJTZXR0aW5ncyIsIkhGREIiLCJSRVNUdjIiLCJIRkRCTG93REJBZGFwdGVyIiwiQU9BZGFwdGVyIiwiQkZYQU9BZGFwdGVyIiwic2NoZW1hIiwiSEZEQkJpdGZpbmV4U2NoZW1hIiwiaW5pdEFPSG9zdCIsIkJpdGZpbmV4RVhBIiwibW9kdWxlIiwiZXhwb3J0cyIsInNlcnZlciIsImFwaUtleSIsImFwaVNlY3JldCIsImRiUGF0aCIsImFwaURCIiwiZCIsInVzZXJTZXR0aW5ncyIsInNldHRpbmdzIiwiZ2V0QWxsIiwiZG1zIiwiYWZmaWxpYXRlQ29kZSIsImFkYXB0ZXIiLCJ3aXRoSGVhcnRiZWF0IiwiZGIiLCJpbml0Q0IiLCJhb0hvc3QiLCJhb3MiLCJyZXN0IiwicmVnaXN0ZXJVSURlZnMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLE1BQU0sRUFBRUEsUUFBUSxFQUFFQyxnQkFBWixLQUFpQ0MsT0FBTyxDQUFDLGtCQUFELENBQVAsQ0FBNEJDLFlBQW5FO0FBQ0EsTUFBTUMsSUFBSSxHQUFHRixPQUFPLENBQUMsZUFBRCxDQUFwQjtBQUNBLE1BQU0sRUFBRUcsTUFBRixLQUFhSCxPQUFPLENBQUMsbUJBQUQsQ0FBMUI7QUFDQSxNQUFNSSxnQkFBZ0IsR0FBR0osT0FBTyxDQUFDLDZCQUFELENBQWhDO0FBQ0EsTUFBTTtBQUNKSyxFQUFBQSxTQUFTLEVBQUVDLFlBRFA7QUFFSkMsRUFBQUEsTUFBTSxFQUFFQyxrQkFGSjtBQUdGUixPQUFPLENBQUMsNEJBQUQsQ0FIWDs7QUFLQSxNQUFNUyxVQUFVLEdBQUdULE9BQU8sQ0FBQyx5QkFBRCxDQUExQjtBQUNBLE1BQU1VLFdBQVcsR0FBR1YsT0FBTyxDQUFDLGlDQUFELENBQTNCOztBQUVBVyxNQUFNLENBQUNDLE9BQVAsR0FBaUIsT0FBT0MsTUFBUCxFQUFlQyxNQUFmLEVBQXVCQyxTQUF2QixLQUFxQztBQUNwRCxRQUFNLEVBQUVDLE1BQUYsRUFBVUMsS0FBVixFQUFpQkMsQ0FBakIsS0FBdUJMLE1BQTdCO0FBQ0EsUUFBTSxFQUFFWixZQUFGLEtBQW1CZ0IsS0FBekI7QUFDQSxRQUFNLEVBQUVFLFlBQVksRUFBRUMsUUFBaEIsS0FBNkIsTUFBTW5CLFlBQVksQ0FBQ29CLE1BQWIsRUFBekM7QUFDQSxRQUFNLEVBQUVDLEdBQUYsRUFBT0MsYUFBUCxLQUF5QkgsUUFBUSxJQUFJckIsZ0JBQTNDOztBQUVBbUIsRUFBQUEsQ0FBQztBQUNDLDRDQUREO0FBRUNJLEVBQUFBLEdBQUcsR0FBRyxTQUFILEdBQWUsVUFGbkI7QUFHQ0MsRUFBQUEsYUFIRCxDQUFEOzs7QUFNQSxTQUFPZCxVQUFVLENBQUM7QUFDaEJlLElBQUFBLE9BQU8sRUFBRSxJQUFJbEIsWUFBSixDQUFpQjtBQUN4QlEsTUFBQUEsTUFEd0I7QUFFeEJDLE1BQUFBLFNBRndCO0FBR3hCTyxNQUFBQSxHQUFHLEVBQUVBLEdBQUcsR0FBRyxDQUFILEdBQU8sQ0FIUztBQUl4QkcsTUFBQUEsYUFBYSxFQUFFLElBSlM7QUFLeEJGLE1BQUFBLGFBTHdCLEVBQWpCLENBRE87OztBQVNoQkcsSUFBQUEsRUFBRSxFQUFFLElBQUl4QixJQUFKLENBQVM7QUFDWEssTUFBQUEsTUFBTSxFQUFFQyxrQkFERztBQUVYZ0IsTUFBQUEsT0FBTyxFQUFFcEIsZ0JBQWdCLENBQUM7QUFDeEJZLFFBQUFBLE1BRHdCLEVBQUQsQ0FGZCxFQUFULENBVFk7Ozs7QUFnQmhCVyxJQUFBQSxNQUFNLEVBQUUsTUFBT0MsTUFBUCxJQUFrQjtBQUN4QixZQUFNLEVBQUVDLEdBQUYsS0FBVUQsTUFBaEI7QUFDQSxZQUFNRSxJQUFJLEdBQUcsSUFBSTNCLE1BQUosQ0FBVztBQUN0QlcsUUFBQUEsTUFEc0I7QUFFdEJDLFFBQUFBLFNBRnNCLEVBQVgsQ0FBYjs7O0FBS0EsWUFBTUwsV0FBVyxDQUFDcUIsY0FBWixDQUEyQkYsR0FBM0IsRUFBZ0NDLElBQWhDLENBQU47QUFDRCxLQXhCZSxFQUFELENBQWpCOztBQTBCRCxDQXRDRCIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5jb25zdCB7IF9kZWZhdWx0OiBERUZBVUxUX1NFVFRJTkdTIH0gPSByZXF1aXJlKCdiZngtaGYtdWktY29uZmlnJykuVXNlclNldHRpbmdzXG5jb25zdCBIRkRCID0gcmVxdWlyZSgnYmZ4LWhmLW1vZGVscycpXG5jb25zdCB7IFJFU1R2MiB9ID0gcmVxdWlyZSgnYmZ4LWFwaS1ub2RlLXJlc3QnKVxuY29uc3QgSEZEQkxvd0RCQWRhcHRlciA9IHJlcXVpcmUoJ2JmeC1oZi1tb2RlbHMtYWRhcHRlci1sb3dkYicpXG5jb25zdCB7XG4gIEFPQWRhcHRlcjogQkZYQU9BZGFwdGVyLFxuICBzY2hlbWE6IEhGREJCaXRmaW5leFNjaGVtYVxufSA9IHJlcXVpcmUoJ2JmeC1oZi1leHQtcGx1Z2luLWJpdGZpbmV4JylcblxuY29uc3QgaW5pdEFPSG9zdCA9IHJlcXVpcmUoJy4uLy4uL3V0aWwvaW5pdF9hb19ob3N0JylcbmNvbnN0IEJpdGZpbmV4RVhBID0gcmVxdWlyZSgnLi4vLi4vZXhjaGFuZ2VfY2xpZW50cy9iaXRmaW5leCcpXG5cbm1vZHVsZS5leHBvcnRzID0gYXN5bmMgKHNlcnZlciwgYXBpS2V5LCBhcGlTZWNyZXQpID0+IHtcbiAgY29uc3QgeyBkYlBhdGgsIGFwaURCLCBkIH0gPSBzZXJ2ZXJcbiAgY29uc3QgeyBVc2VyU2V0dGluZ3MgfSA9IGFwaURCXG4gIGNvbnN0IHsgdXNlclNldHRpbmdzOiBzZXR0aW5ncyB9ID0gYXdhaXQgVXNlclNldHRpbmdzLmdldEFsbCgpXG4gIGNvbnN0IHsgZG1zLCBhZmZpbGlhdGVDb2RlIH0gPSBzZXR0aW5ncyB8fCBERUZBVUxUX1NFVFRJTkdTXG5cbiAgZChcbiAgICAnc3Bhd25pbmcgYmZ4IGFsZ28gaG9zdCAoZG1zICVzKSBbYWZmICVzXScsXG4gICAgZG1zID8gJ2VuYWJsZWQnIDogJ2Rpc2FibGVkJyxcbiAgICBhZmZpbGlhdGVDb2RlXG4gIClcblxuICByZXR1cm4gaW5pdEFPSG9zdCh7XG4gICAgYWRhcHRlcjogbmV3IEJGWEFPQWRhcHRlcih7XG4gICAgICBhcGlLZXksXG4gICAgICBhcGlTZWNyZXQsXG4gICAgICBkbXM6IGRtcyA/IDQgOiAwLFxuICAgICAgd2l0aEhlYXJ0YmVhdDogdHJ1ZSxcbiAgICAgIGFmZmlsaWF0ZUNvZGVcbiAgICB9KSxcblxuICAgIGRiOiBuZXcgSEZEQih7XG4gICAgICBzY2hlbWE6IEhGREJCaXRmaW5leFNjaGVtYSxcbiAgICAgIGFkYXB0ZXI6IEhGREJMb3dEQkFkYXB0ZXIoe1xuICAgICAgICBkYlBhdGhcbiAgICAgIH0pXG4gICAgfSksXG5cbiAgICBpbml0Q0I6IGFzeW5jIChhb0hvc3QpID0+IHtcbiAgICAgIGNvbnN0IHsgYW9zIH0gPSBhb0hvc3RcbiAgICAgIGNvbnN0IHJlc3QgPSBuZXcgUkVTVHYyKHtcbiAgICAgICAgYXBpS2V5LFxuICAgICAgICBhcGlTZWNyZXRcbiAgICAgIH0pXG5cbiAgICAgIGF3YWl0IEJpdGZpbmV4RVhBLnJlZ2lzdGVyVUlEZWZzKGFvcywgcmVzdClcbiAgICB9XG4gIH0pXG59XG4iXX0=