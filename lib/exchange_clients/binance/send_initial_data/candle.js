'use strict';

const _last = require('lodash/last');
const capture = require('../../../capture');

const candleTransformer = require('../transformers/candle');
const propagateData = require('../propagate_data');

module.exports = async (exa, channelData, chanID) => {
  const { client, lastFinalCandleForChannel } = exa;
  const [, tf, market] = channelData;
  const symbol = market.restID;
  let recentCandles;

  try {
    recentCandles = await client.candles({
      symbol,
      interval: tf });

  } catch (e) {
    e.tags = { symbol, tf };
    capture.exception(e);
    return;
  }

  const candle = _last(recentCandles);

  lastFinalCandleForChannel[chanID] = recentCandles[recentCandles.length - 2];
  propagateData(exa, chanID, candleTransformer(candle, candle.openTime));
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9leGNoYW5nZV9jbGllbnRzL2JpbmFuY2Uvc2VuZF9pbml0aWFsX2RhdGEvY2FuZGxlLmpzIl0sIm5hbWVzIjpbIl9sYXN0IiwicmVxdWlyZSIsImNhcHR1cmUiLCJjYW5kbGVUcmFuc2Zvcm1lciIsInByb3BhZ2F0ZURhdGEiLCJtb2R1bGUiLCJleHBvcnRzIiwiZXhhIiwiY2hhbm5lbERhdGEiLCJjaGFuSUQiLCJjbGllbnQiLCJsYXN0RmluYWxDYW5kbGVGb3JDaGFubmVsIiwidGYiLCJtYXJrZXQiLCJzeW1ib2wiLCJyZXN0SUQiLCJyZWNlbnRDYW5kbGVzIiwiY2FuZGxlcyIsImludGVydmFsIiwiZSIsInRhZ3MiLCJleGNlcHRpb24iLCJjYW5kbGUiLCJsZW5ndGgiLCJvcGVuVGltZSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsYUFBRCxDQUFyQjtBQUNBLE1BQU1DLE9BQU8sR0FBR0QsT0FBTyxDQUFDLGtCQUFELENBQXZCOztBQUVBLE1BQU1FLGlCQUFpQixHQUFHRixPQUFPLENBQUMsd0JBQUQsQ0FBakM7QUFDQSxNQUFNRyxhQUFhLEdBQUdILE9BQU8sQ0FBQyxtQkFBRCxDQUE3Qjs7QUFFQUksTUFBTSxDQUFDQyxPQUFQLEdBQWlCLE9BQU9DLEdBQVAsRUFBWUMsV0FBWixFQUF5QkMsTUFBekIsS0FBb0M7QUFDbkQsUUFBTSxFQUFFQyxNQUFGLEVBQVVDLHlCQUFWLEtBQXdDSixHQUE5QztBQUNBLFFBQU0sR0FBR0ssRUFBSCxFQUFPQyxNQUFQLElBQWlCTCxXQUF2QjtBQUNBLFFBQU1NLE1BQU0sR0FBR0QsTUFBTSxDQUFDRSxNQUF0QjtBQUNBLE1BQUlDLGFBQUo7O0FBRUEsTUFBSTtBQUNGQSxJQUFBQSxhQUFhLEdBQUcsTUFBTU4sTUFBTSxDQUFDTyxPQUFQLENBQWU7QUFDbkNILE1BQUFBLE1BRG1DO0FBRW5DSSxNQUFBQSxRQUFRLEVBQUVOLEVBRnlCLEVBQWYsQ0FBdEI7O0FBSUQsR0FMRCxDQUtFLE9BQU9PLENBQVAsRUFBVTtBQUNWQSxJQUFBQSxDQUFDLENBQUNDLElBQUYsR0FBUyxFQUFFTixNQUFGLEVBQVVGLEVBQVYsRUFBVDtBQUNBVixJQUFBQSxPQUFPLENBQUNtQixTQUFSLENBQWtCRixDQUFsQjtBQUNBO0FBQ0Q7O0FBRUQsUUFBTUcsTUFBTSxHQUFHdEIsS0FBSyxDQUFDZ0IsYUFBRCxDQUFwQjs7QUFFQUwsRUFBQUEseUJBQXlCLENBQUNGLE1BQUQsQ0FBekIsR0FBb0NPLGFBQWEsQ0FBQ0EsYUFBYSxDQUFDTyxNQUFkLEdBQXVCLENBQXhCLENBQWpEO0FBQ0FuQixFQUFBQSxhQUFhLENBQUNHLEdBQUQsRUFBTUUsTUFBTixFQUFjTixpQkFBaUIsQ0FBQ21CLE1BQUQsRUFBU0EsTUFBTSxDQUFDRSxRQUFoQixDQUEvQixDQUFiO0FBQ0QsQ0FyQkQiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgX2xhc3QgPSByZXF1aXJlKCdsb2Rhc2gvbGFzdCcpXG5jb25zdCBjYXB0dXJlID0gcmVxdWlyZSgnLi4vLi4vLi4vY2FwdHVyZScpXG5cbmNvbnN0IGNhbmRsZVRyYW5zZm9ybWVyID0gcmVxdWlyZSgnLi4vdHJhbnNmb3JtZXJzL2NhbmRsZScpXG5jb25zdCBwcm9wYWdhdGVEYXRhID0gcmVxdWlyZSgnLi4vcHJvcGFnYXRlX2RhdGEnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFzeW5jIChleGEsIGNoYW5uZWxEYXRhLCBjaGFuSUQpID0+IHtcbiAgY29uc3QgeyBjbGllbnQsIGxhc3RGaW5hbENhbmRsZUZvckNoYW5uZWwgfSA9IGV4YVxuICBjb25zdCBbLCB0ZiwgbWFya2V0XSA9IGNoYW5uZWxEYXRhXG4gIGNvbnN0IHN5bWJvbCA9IG1hcmtldC5yZXN0SURcbiAgbGV0IHJlY2VudENhbmRsZXNcblxuICB0cnkge1xuICAgIHJlY2VudENhbmRsZXMgPSBhd2FpdCBjbGllbnQuY2FuZGxlcyh7XG4gICAgICBzeW1ib2wsXG4gICAgICBpbnRlcnZhbDogdGZcbiAgICB9KVxuICB9IGNhdGNoIChlKSB7XG4gICAgZS50YWdzID0geyBzeW1ib2wsIHRmIH1cbiAgICBjYXB0dXJlLmV4Y2VwdGlvbihlKVxuICAgIHJldHVyblxuICB9XG5cbiAgY29uc3QgY2FuZGxlID0gX2xhc3QocmVjZW50Q2FuZGxlcylcblxuICBsYXN0RmluYWxDYW5kbGVGb3JDaGFubmVsW2NoYW5JRF0gPSByZWNlbnRDYW5kbGVzW3JlY2VudENhbmRsZXMubGVuZ3RoIC0gMl1cbiAgcHJvcGFnYXRlRGF0YShleGEsIGNoYW5JRCwgY2FuZGxlVHJhbnNmb3JtZXIoY2FuZGxlLCBjYW5kbGUub3BlblRpbWUpKVxufVxuIl19