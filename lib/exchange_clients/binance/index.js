'use strict';

const Bluebird = require('bluebird');
const Binance = require('binance-api-node').default;
const debug = require('debug')('bfx:hf:server:exchange-clients:binance');
const PromiseThrottle = require('promise-throttle');
const _isFunction = require('lodash/isFunction');

const chanDataToKey = require('../../util/chan_data_to_key');
const orderTransformer = require('./transformers/order');
const balanceTransformer = require('./transformers/balance');
const candleTransformer = require('./transformers/candle');
const subscribeHandlers = require('./subscribe');
const getMarkets = require('./get_markets');

class BinanceEchangeConnection {
  constructor(opts = {}) {
    this.d = debug;
    // @ts-ignore
    this.client = Binance(opts);
    this.subs = {};
    this.unsubs = {}; // [chanKey]: unsubFunc
    this.userUnsubs = [];
    this.dataListeners = [];
    this.candleChannelData = {};
    this.lastFinalCandleForChannel = {};
  }

  reconnect() {
    this.client.ws.reconnect();
  }

  onData(cb) {
    this.dataListeners.push(cb);
  }

  async subscribe(channelData) {
    const [type] = channelData;

    if (subscribeHandlers[type]) {
      return subscribeHandlers[type](this, channelData);
    }

    throw new Error(`recv sub for unknown channel type: ${type}`);
  }

  unsubscribe(channelData) {
    const key = chanDataToKey(channelData);

    if (!this.unsubs[key]) {
      throw new Error('tried to unsub from unknown channel');
    }

    debug('unsubscribing from channel %j', channelData);

    const chanID = this.subs[key];

    this.unsubs[key]();

    delete this.unsubs[key];
    delete this.subs[key];

    return chanID;
  }

  isSubscribed(channelData) {
    const key = chanDataToKey(channelData);
    return !!this.unsubs[key];
  }

  getChannelID(channelData) {
    const key = chanDataToKey(channelData);
    return this.subs[key];
  }

  async getMarkets() {
    return getMarkets();
  }

  // Stub needed for compatbility
  close() {
    Object.values(this.unsubs).forEach(unsub => unsub());
    this.userUnsubs.forEach(unsub => _isFunction(unsub) && unsub());

    this.unsubs = {};
    this.userUnsubs = [];
  }

  async userStream(cb) {
    this.userUnsubs.push(this.client.ws.user(cb));
  }

  async getBalances() {
    const info = await this.client.accountInfo();
    const { balances } = info;
    return balances.map(balanceTransformer);
  }

  async getOrders() {
    const orders = await this.client.openOrders();
    return orders.map(orderTransformer);
  }

  async submitOrder(packet) {
    return this.client.order(packet);
  }

  async cancelOrder({ symbol, orderId }) {
    return this.client.cancelOrder({ symbol, orderId });
  }

  static getCandleTimeFrames() {
    return [
    '1m', '3m', '5m', '15m', '30m', '1h', '2h', '4h', '6h', '8h', '12h', '1d',
    '3d', '1w', '1M'];

  }

  static transformCandle(candle, mts) {
    if (!mts) {
      throw new Error('mts required');
    }

    return candleTransformer(candle, mts);
  }

  static transformOrder(order) {
    return orderTransformer(order);
  }

  static getWSThrottler() {
    return new PromiseThrottle({
      requestsPerSecond: 600 / 60.0, // 1200 from binance docs, a bit lower
      promiseImplementation: Bluebird });

  }}


BinanceEchangeConnection.id = 'binance';

module.exports = BinanceEchangeConnection;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9leGNoYW5nZV9jbGllbnRzL2JpbmFuY2UvaW5kZXguanMiXSwibmFtZXMiOlsiQmx1ZWJpcmQiLCJyZXF1aXJlIiwiQmluYW5jZSIsImRlZmF1bHQiLCJkZWJ1ZyIsIlByb21pc2VUaHJvdHRsZSIsIl9pc0Z1bmN0aW9uIiwiY2hhbkRhdGFUb0tleSIsIm9yZGVyVHJhbnNmb3JtZXIiLCJiYWxhbmNlVHJhbnNmb3JtZXIiLCJjYW5kbGVUcmFuc2Zvcm1lciIsInN1YnNjcmliZUhhbmRsZXJzIiwiZ2V0TWFya2V0cyIsIkJpbmFuY2VFY2hhbmdlQ29ubmVjdGlvbiIsImNvbnN0cnVjdG9yIiwib3B0cyIsImQiLCJjbGllbnQiLCJzdWJzIiwidW5zdWJzIiwidXNlclVuc3VicyIsImRhdGFMaXN0ZW5lcnMiLCJjYW5kbGVDaGFubmVsRGF0YSIsImxhc3RGaW5hbENhbmRsZUZvckNoYW5uZWwiLCJyZWNvbm5lY3QiLCJ3cyIsIm9uRGF0YSIsImNiIiwicHVzaCIsInN1YnNjcmliZSIsImNoYW5uZWxEYXRhIiwidHlwZSIsIkVycm9yIiwidW5zdWJzY3JpYmUiLCJrZXkiLCJjaGFuSUQiLCJpc1N1YnNjcmliZWQiLCJnZXRDaGFubmVsSUQiLCJjbG9zZSIsIk9iamVjdCIsInZhbHVlcyIsImZvckVhY2giLCJ1bnN1YiIsInVzZXJTdHJlYW0iLCJ1c2VyIiwiZ2V0QmFsYW5jZXMiLCJpbmZvIiwiYWNjb3VudEluZm8iLCJiYWxhbmNlcyIsIm1hcCIsImdldE9yZGVycyIsIm9yZGVycyIsIm9wZW5PcmRlcnMiLCJzdWJtaXRPcmRlciIsInBhY2tldCIsIm9yZGVyIiwiY2FuY2VsT3JkZXIiLCJzeW1ib2wiLCJvcmRlcklkIiwiZ2V0Q2FuZGxlVGltZUZyYW1lcyIsInRyYW5zZm9ybUNhbmRsZSIsImNhbmRsZSIsIm10cyIsInRyYW5zZm9ybU9yZGVyIiwiZ2V0V1NUaHJvdHRsZXIiLCJyZXF1ZXN0c1BlclNlY29uZCIsInByb21pc2VJbXBs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QUFQLEdBQWlCeEQsd0JBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IEJsdWViaXJkID0gcmVxdWlyZSgnYmx1ZWJpcmQnKVxuY29uc3QgQmluYW5jZSA9IHJlcXVpcmUoJ2JpbmFuY2UtYXBpLW5vZGUnKS5kZWZhdWx0XG5jb25zdCBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ2JmeDpoZjpzZXJ2ZXI6ZXhjaGFuZ2UtY2xpZW50czpiaW5hbmNlJylcbmNvbnN0IFByb21pc2VUaHJvdHRsZSA9IHJlcXVpcmUoJ3Byb21pc2UtdGhyb3R0bGUnKVxuY29uc3QgX2lzRnVuY3Rpb24gPSByZXF1aXJlKCdsb2Rhc2gvaXNGdW5jdGlvbicpXG5cbmNvbnN0IGNoYW5EYXRhVG9LZXkgPSByZXF1aXJlKCcuLi8uLi91dGlsL2NoYW5fZGF0YV90b19rZXknKVxuY29uc3Qgb3JkZXJUcmFuc2Zvcm1lciA9IHJlcXVpcmUoJy4vdHJhbnNmb3JtZXJzL29yZGVyJylcbmNvbnN0IGJhbGFuY2VUcmFuc2Zvcm1lciA9IHJlcXVpcmUoJy4vdHJhbnNmb3JtZXJzL2JhbGFuY2UnKVxuY29uc3QgY2FuZGxlVHJhbnNmb3JtZXIgPSByZXF1aXJlKCcuL3RyYW5zZm9ybWVycy9jYW5kbGUnKVxuY29uc3Qgc3Vic2NyaWJlSGFuZGxlcnMgPSByZXF1aXJlKCcuL3N1YnNjcmliZScpXG5jb25zdCBnZXRNYXJrZXRzID0gcmVxdWlyZSgnLi9nZXRfbWFya2V0cycpXG5cbmNsYXNzIEJpbmFuY2VFY2hhbmdlQ29ubmVjdGlvbiB7XG4gIGNvbnN0cnVjdG9yIChvcHRzID0ge30pIHtcbiAgICB0aGlzLmQgPSBkZWJ1Z1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICB0aGlzLmNsaWVudCA9IEJpbmFuY2Uob3B0cylcbiAgICB0aGlzLnN1YnMgPSB7fVxuICAgIHRoaXMudW5zdWJzID0ge30gLy8gW2NoYW5LZXldOiB1bnN1YkZ1bmNcbiAgICB0aGlzLnVzZXJVbnN1YnMgPSBbXVxuICAgIHRoaXMuZGF0YUxpc3RlbmVycyA9IFtdXG4gICAgdGhpcy5jYW5kbGVDaGFubmVsRGF0YSA9IHt9XG4gICAgdGhpcy5sYXN0RmluYWxDYW5kbGVGb3JDaGFubmVsID0ge31cbiAgfVxuXG4gIHJlY29ubmVjdCAoKSB7XG4gICAgdGhpcy5jbGllbnQud3MucmVjb25uZWN0KClcbiAgfVxuXG4gIG9uRGF0YSAoY2IpIHtcbiAgICB0aGlzLmRhdGFMaXN0ZW5lcnMucHVzaChjYilcbiAgfVxuXG4gIGFzeW5jIHN1YnNjcmliZSAoY2hhbm5lbERhdGEpIHtcbiAgICBjb25zdCBbdHlwZV0gPSBjaGFubmVsRGF0YVxuXG4gICAgaWYgKHN1YnNjcmliZUhhbmRsZXJzW3R5cGVdKSB7XG4gICAgICByZXR1cm4gc3Vic2NyaWJlSGFuZGxlcnNbdHlwZV0odGhpcywgY2hhbm5lbERhdGEpXG4gICAgfVxuXG4gICAgdGhyb3cgbmV3IEVycm9yKGByZWN2IHN1YiBmb3IgdW5rbm93biBjaGFubmVsIHR5cGU6ICR7dHlwZX1gKVxuICB9XG5cbiAgdW5zdWJzY3JpYmUgKGNoYW5uZWxEYXRhKSB7XG4gICAgY29uc3Qga2V5ID0gY2hhbkRhdGFUb0tleShjaGFubmVsRGF0YSlcblxuICAgIGlmICghdGhpcy51bnN1YnNba2V5XSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCd0cmllZCB0byB1bnN1YiBmcm9tIHVua25vd24gY2hhbm5lbCcpXG4gICAgfVxuXG4gICAgZGVidWcoJ3Vuc3Vic2NyaWJpbmcgZnJvbSBjaGFubmVsICVqJywgY2hhbm5lbERhdGEpXG5cbiAgICBjb25zdCBjaGFuSUQgPSB0aGlzLnN1YnNba2V5XVxuXG4gICAgdGhpcy51bnN1YnNba2V5XSgpXG5cbiAgICBkZWxldGUgdGhpcy51bnN1YnNba2V5XVxuICAgIGRlbGV0ZSB0aGlzLnN1YnNba2V5XVxuXG4gICAgcmV0dXJuIGNoYW5JRFxuICB9XG5cbiAgaXNTdWJzY3JpYmVkIChjaGFubmVsRGF0YSkge1xuICAgIGNvbnN0IGtleSA9IGNoYW5EYXRhVG9LZXkoY2hhbm5lbERhdGEpXG4gICAgcmV0dXJuICEhdGhpcy51bnN1YnNba2V5XVxuICB9XG5cbiAgZ2V0Q2hhbm5lbElEIChjaGFubmVsRGF0YSkge1xuICAgIGNvbnN0IGtleSA9IGNoYW5EYXRhVG9LZXkoY2hhbm5lbERhdGEpXG4gICAgcmV0dXJuIHRoaXMuc3Vic1trZXldXG4gIH1cblxuICBhc3luYyBnZXRNYXJrZXRzICgpIHtcbiAgICByZXR1cm4gZ2V0TWFya2V0cygpXG4gIH1cblxuICAvLyBTdHViIG5lZWRlZCBmb3IgY29tcGF0YmlsaXR5XG4gIGNsb3NlICgpIHtcbiAgICBPYmplY3QudmFsdWVzKHRoaXMudW5zdWJzKS5mb3JFYWNoKHVuc3ViID0+IHVuc3ViKCkpXG4gICAgdGhpcy51c2VyVW5zdWJzLmZvckVhY2godW5zdWIgPT4gX2lzRnVuY3Rpb24odW5zdWIpICYmIHVuc3ViKCkpXG5cbiAgICB0aGlzLnVuc3VicyA9IHt9XG4gICAgdGhpcy51c2VyVW5zdWJzID0gW11cbiAgfVxuXG4gIGFzeW5jIHVzZXJTdHJlYW0gKGNiKSB7XG4gICAgdGhpcy51c2VyVW5zdWJzLnB1c2godGhpcy5jbGllbnQud3MudXNlcihjYikpXG4gIH1cblxuICBhc3luYyBnZXRCYWxhbmNlcyAoKSB7XG4gICAgY29uc3QgaW5mbyA9IGF3YWl0IHRoaXMuY2xpZW50LmFjY291bnRJbmZvKClcbiAgICBjb25zdCB7IGJhbGFuY2VzIH0gPSBpbmZvXG4gICAgcmV0dXJuIGJhbGFuY2VzLm1hcChiYWxhbmNlVHJhbnNmb3JtZXIpXG4gIH1cblxuICBhc3luYyBnZXRPcmRlcnMgKCkge1xuICAgIGNvbnN0IG9yZGVycyA9IGF3YWl0IHRoaXMuY2xpZW50Lm9wZW5PcmRlcnMoKVxuICAgIHJldHVybiBvcmRlcnMubWFwKG9yZGVyVHJhbnNmb3JtZXIpXG4gIH1cblxuICBhc3luYyBzdWJtaXRPcmRlciAocGFja2V0KSB7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50Lm9yZGVyKHBhY2tldClcbiAgfVxuXG4gIGFzeW5jIGNhbmNlbE9yZGVyICh7IHN5bWJvbCwgb3JkZXJJZCB9KSB7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LmNhbmNlbE9yZGVyKHsgc3ltYm9sLCBvcmRlcklkIH0pXG4gIH1cblxuICBzdGF0aWMgZ2V0Q2FuZGxlVGltZUZyYW1lcyAoKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgICcxbScsICczbScsICc1bScsICcxNW0nLCAnMzBtJywgJzFoJywgJzJoJywgJzRoJywgJzZoJywgJzhoJywgJzEyaCcsICcxZCcsXG4gICAgICAnM2QnLCAnMXcnLCAnMU0nXG4gICAgXVxuICB9XG5cbiAgc3RhdGljIHRyYW5zZm9ybUNhbmRsZSAoY2FuZGxlLCBtdHMpIHtcbiAgICBpZiAoIW10cykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdtdHMgcmVxdWlyZWQnKVxuICAgIH1cblxuICAgIHJldHVybiBjYW5kbGVUcmFuc2Zvcm1lcihjYW5kbGUsIG10cylcbiAgfVxuXG4gIHN0YXRpYyB0cmFuc2Zvcm1PcmRlciAob3JkZXIpIHtcbiAgICByZXR1cm4gb3JkZXJUcmFuc2Zvcm1lcihvcmRlcilcbiAgfVxuXG4gIHN0YXRpYyBnZXRXU1Rocm90dGxlciAoKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlVGhyb3R0bGUoe1xuICAgICAgcmVxdWVzdHNQZXJTZWNvbmQ6IDYwMCAvIDYwLjAsIC8vIDEyMDAgZnJvbSBiaW5hbmNlIGRvY3MsIGEgYml0IGxvd2VyXG4gICAgICBwcm9taXNlSW1wbGVtZW50YXRpb246IEJsdWViaXJkXG4gICAgfSlcbiAgfVxufVxuXG5CaW5hbmNlRWNoYW5nZUNvbm5lY3Rpb24uaWQgPSAnYmluYW5jZSdcblxubW9kdWxlLmV4cG9ydHMgPSBCaW5hbmNlRWNoYW5nZUNvbm5lY3Rpb25cbiJdfQ==