'use strict';

const tickerTransformer = require('../transformers/ticker');
const tradeTransformer = require('../transformers/trade');
const candleTransformer = require('../transformers/candle');

module.exports = (exa, msg) => {
  const { d, channelMap, dataListeners } = exa;
  const [channelID] = msg;
  const channel = channelMap[`${channelID}`];

  if (!channel) {
    return d('recv data for unknown channel: %j', msg);
  }

  const { name } = channel;
  const payloads = [];

  switch (name) {
    case 'ticker':{
        payloads.push(tickerTransformer(msg[1]));
        break;
      }

    case 'trade':{
        msg[1].forEach(trade => {
          payloads.push(tradeTransformer(trade));
        });
        break;
      }

    case 'ohlc':{
        payloads.push(candleTransformer(msg[1]));
        break;
      }

    default:{
        console.log(msg);
      }}


  if (payloads.length === 0) {
    return;
  }

  for (let i = 0; i < dataListeners.length; i += 1) {
    for (let j = 0; j < payloads.length; j += 1) {
      dataListeners[i](channelID, payloads[j]);
    }
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9leGNoYW5nZV9jbGllbnRzL2tyYWtlbi9yZWN2L2NoYW5uZWxfZGF0YS5qcyJdLCJuYW1lcyI6WyJ0aWNrZXJUcmFuc2Zvcm1lciIsInJlcXVpcmUiLCJ0cmFkZVRyYW5zZm9ybWVyIiwiY2FuZGxlVHJhbnNmb3JtZXIiLCJtb2R1bGUiLCJleHBvcnRzIiwiZXhhIiwibXNnIiwiZCIsImNoYW5uZWxNYXAiLCJkYXRhTGlzdGVuZXJzIiwiY2hhbm5lbElEIiwiY2hhbm5lbCIsIm5hbWUiLCJwYXlsb2FkcyIsInB1c2giLCJmb3JFYWNoIiwidHJhZGUiLCJjb25zb2xlIiwibG9nIiwibGVuZ3RoIiwiaSIsImoiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLE1BQU1BLGlCQUFpQixHQUFHQyxPQUFPLENBQUMsd0JBQUQsQ0FBakM7QUFDQSxNQUFNQyxnQkFBZ0IsR0FBR0QsT0FBTyxDQUFDLHVCQUFELENBQWhDO0FBQ0EsTUFBTUUsaUJBQWlCLEdBQUdGLE9BQU8sQ0FBQyx3QkFBRCxDQUFqQzs7QUFFQUcsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLENBQUNDLEdBQUQsRUFBTUMsR0FBTixLQUFjO0FBQzdCLFFBQU0sRUFBRUMsQ0FBRixFQUFLQyxVQUFMLEVBQWlCQyxhQUFqQixLQUFtQ0osR0FBekM7QUFDQSxRQUFNLENBQUNLLFNBQUQsSUFBY0osR0FBcEI7QUFDQSxRQUFNSyxPQUFPLEdBQUdILFVBQVUsQ0FBRSxHQUFFRSxTQUFVLEVBQWQsQ0FBMUI7O0FBRUEsTUFBSSxDQUFDQyxPQUFMLEVBQWM7QUFDWixXQUFPSixDQUFDLENBQUMsbUNBQUQsRUFBc0NELEdBQXRDLENBQVI7QUFDRDs7QUFFRCxRQUFNLEVBQUVNLElBQUYsS0FBV0QsT0FBakI7QUFDQSxRQUFNRSxRQUFRLEdBQUcsRUFBakI7O0FBRUEsVUFBUUQsSUFBUjtBQUNFLFNBQUssUUFBTCxDQUFlO0FBQ2JDLFFBQUFBLFFBQVEsQ0FBQ0MsSUFBVCxDQUFjZixpQkFBaUIsQ0FBQ08sR0FBRyxDQUFDLENBQUQsQ0FBSixDQUEvQjtBQUNBO0FBQ0Q7O0FBRUQsU0FBSyxPQUFMLENBQWM7QUFDWkEsUUFBQUEsR0FBRyxDQUFDLENBQUQsQ0FBSCxDQUFPUyxPQUFQLENBQWVDLEtBQUssSUFBSTtBQUN0QkgsVUFBQUEsUUFBUSxDQUFDQyxJQUFULENBQWNiLGdCQUFnQixDQUFDZSxLQUFELENBQTlCO0FBQ0QsU0FGRDtBQUdBO0FBQ0Q7O0FBRUQsU0FBSyxNQUFMLENBQWE7QUFDWEgsUUFBQUEsUUFBUSxDQUFDQyxJQUFULENBQWNaLGlCQUFpQixDQUFDSSxHQUFHLENBQUMsQ0FBRCxDQUFKLENBQS9CO0FBQ0E7QUFDRDs7QUFFRCxZQUFTO0FBQ1BXLFFBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZWixHQUFaO0FBQ0QsT0FwQkg7OztBQXVCQSxNQUFJTyxRQUFRLENBQUNNLE1BQVQsS0FBb0IsQ0FBeEIsRUFBMkI7QUFDekI7QUFDRDs7QUFFRCxPQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdYLGFBQWEsQ0FBQ1UsTUFBbEMsRUFBMENDLENBQUMsSUFBSSxDQUEvQyxFQUFrRDtBQUNoRCxTQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdSLFFBQVEsQ0FBQ00sTUFBN0IsRUFBcUNFLENBQUMsSUFBSSxDQUExQyxFQUE2QztBQUMzQ1osTUFBQUEsYUFBYSxDQUFDVyxDQUFELENBQWIsQ0FBaUJWLFNBQWpCLEVBQTRCRyxRQUFRLENBQUNRLENBQUQsQ0FBcEM7QUFDRDtBQUNGO0FBQ0YsQ0E1Q0QiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgdGlja2VyVHJhbnNmb3JtZXIgPSByZXF1aXJlKCcuLi90cmFuc2Zvcm1lcnMvdGlja2VyJylcbmNvbnN0IHRyYWRlVHJhbnNmb3JtZXIgPSByZXF1aXJlKCcuLi90cmFuc2Zvcm1lcnMvdHJhZGUnKVxuY29uc3QgY2FuZGxlVHJhbnNmb3JtZXIgPSByZXF1aXJlKCcuLi90cmFuc2Zvcm1lcnMvY2FuZGxlJylcblxubW9kdWxlLmV4cG9ydHMgPSAoZXhhLCBtc2cpID0+IHtcbiAgY29uc3QgeyBkLCBjaGFubmVsTWFwLCBkYXRhTGlzdGVuZXJzIH0gPSBleGFcbiAgY29uc3QgW2NoYW5uZWxJRF0gPSBtc2dcbiAgY29uc3QgY2hhbm5lbCA9IGNoYW5uZWxNYXBbYCR7Y2hhbm5lbElEfWBdXG5cbiAgaWYgKCFjaGFubmVsKSB7XG4gICAgcmV0dXJuIGQoJ3JlY3YgZGF0YSBmb3IgdW5rbm93biBjaGFubmVsOiAlaicsIG1zZylcbiAgfVxuXG4gIGNvbnN0IHsgbmFtZSB9ID0gY2hhbm5lbFxuICBjb25zdCBwYXlsb2FkcyA9IFtdXG5cbiAgc3dpdGNoIChuYW1lKSB7XG4gICAgY2FzZSAndGlja2VyJzoge1xuICAgICAgcGF5bG9hZHMucHVzaCh0aWNrZXJUcmFuc2Zvcm1lcihtc2dbMV0pKVxuICAgICAgYnJlYWtcbiAgICB9XG5cbiAgICBjYXNlICd0cmFkZSc6IHtcbiAgICAgIG1zZ1sxXS5mb3JFYWNoKHRyYWRlID0+IHtcbiAgICAgICAgcGF5bG9hZHMucHVzaCh0cmFkZVRyYW5zZm9ybWVyKHRyYWRlKSlcbiAgICAgIH0pXG4gICAgICBicmVha1xuICAgIH1cblxuICAgIGNhc2UgJ29obGMnOiB7XG4gICAgICBwYXlsb2Fkcy5wdXNoKGNhbmRsZVRyYW5zZm9ybWVyKG1zZ1sxXSkpXG4gICAgICBicmVha1xuICAgIH1cblxuICAgIGRlZmF1bHQ6IHtcbiAgICAgIGNvbnNvbGUubG9nKG1zZylcbiAgICB9XG4gIH1cblxuICBpZiAocGF5bG9hZHMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGFMaXN0ZW5lcnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IHBheWxvYWRzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICBkYXRhTGlzdGVuZXJzW2ldKGNoYW5uZWxJRCwgcGF5bG9hZHNbal0pXG4gICAgfVxuICB9XG59XG4iXX0=