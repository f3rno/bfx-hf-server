'use strict';

const _last = require('lodash/last');
const debug = require('debug')('bfx:hf:server:workers:market-data-sync:bfx:loop');
const processRemoteCandles = require('../../../util/process_remote_candles');
const fetchCandles = require('./fetch_candles');
const insertCandles = require('../../../db/candles/bitfinex/bulk_insert');
const { subscribe } = require('./ws_listener');
const capture = require('../../../capture');
const CANDLE_WIDTHS = require('../../../util/candle_time_frames');

const WS_CANDLE_SNAPSHOT_SIZE = 240;

module.exports = async (firstCandleMTS, market, tf) => {
  const symbol = market.restID;
  let lastCandleMTS = firstCandleMTS;

  // WS channel returns a snapshot on connect, so if we aren't too far behind we
  // can connect directly and take advantage of the snapshot
  if (Date.now() - firstCandleMTS < CANDLE_WIDTHS[tf] * WS_CANDLE_SNAPSHOT_SIZE) {
    debug('snapshot will account for discrepancy, skipping REST sync');
    await subscribe(tf, market);
    return;
  }

  while (true) {
    debug(
    'fetching candles for %s %s from %s',
    symbol, tf, new Date(lastCandleMTS).toLocaleString());


    let candles;

    try {
      candles = await fetchCandles(symbol, tf, lastCandleMTS + 1);
    } catch (e) {
      capture.exception(e);
      break;
    }

    if (candles.length > 0) {
      try {
        await insertCandles(symbol, tf, processRemoteCandles(tf, candles, false));
        lastCandleMTS = _last(candles)[0];
        debug('inserted %s candles into %s', candles.length, tf);
      } catch (e) {
        capture.exception(e);
      }
    }

    if (candles.length < 100) {// fetch limit is 5k
      debug('sync for %s %s finished, subscribing...', symbol, tf);
      await subscribe(tf, market);
      break;
    }
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JrZXJzL21hcmtldF9kYXRhX3N5bmMvYml0ZmluZXgvZmV0Y2hfbG9vcC5qcyJdLCJuYW1lcyI6WyJfbGFzdCIsInJlcXVpcmUiLCJkZWJ1ZyIsInByb2Nlc3NSZW1vdGVDYW5kbGVzIiwiZmV0Y2hDYW5kbGVzIiwiaW5zZXJ0Q2FuZGxlcyIsInN1YnNjcmliZSIsImNhcHR1cmUiLCJDQU5ETEVfV0lEVEhTIiwiV1NfQ0FORExFX1NOQVBTSE9UX1NJWkUiLCJtb2R1bGUiLCJleHBvcnRzIiwiZmlyc3RDYW5kbGVNVFMiLCJtYXJrZXQiLCJ0ZiIsInN5bWJvbCIsInJlc3RJRCIsImxhc3RDYW5kbGVNVFMiLCJEYXRlIiwibm93IiwidG9Mb2NhbGVTdHJpbmciLCJjYW5kbGVzIiwiZSIsImV4Y2VwdGlvbiIsImxlbmd0aCJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsYUFBRCxDQUFyQjtBQUNBLE1BQU1DLEtBQUssR0FBR0QsT0FBTyxDQUFDLE9BQUQsQ0FBUCxDQUFpQixpREFBakIsQ0FBZDtBQUNBLE1BQU1FLG9CQUFvQixHQUFHRixPQUFPLENBQUMsc0NBQUQsQ0FBcEM7QUFDQSxNQUFNRyxZQUFZLEdBQUdILE9BQU8sQ0FBQyxpQkFBRCxDQUE1QjtBQUNBLE1BQU1JLGFBQWEsR0FBR0osT0FBTyxDQUFDLDBDQUFELENBQTdCO0FBQ0EsTUFBTSxFQUFFSyxTQUFGLEtBQWdCTCxPQUFPLENBQUMsZUFBRCxDQUE3QjtBQUNBLE1BQU1NLE9BQU8sR0FBR04sT0FBTyxDQUFDLGtCQUFELENBQXZCO0FBQ0EsTUFBTU8sYUFBYSxHQUFHUCxPQUFPLENBQUMsa0NBQUQsQ0FBN0I7O0FBRUEsTUFBTVEsdUJBQXVCLEdBQUcsR0FBaEM7O0FBRUFDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixPQUFPQyxjQUFQLEVBQXVCQyxNQUF2QixFQUErQkMsRUFBL0IsS0FBc0M7QUFDckQsUUFBTUMsTUFBTSxHQUFHRixNQUFNLENBQUNHLE1BQXRCO0FBQ0EsTUFBSUMsYUFBYSxHQUFHTCxjQUFwQjs7QUFFQTtBQUNBO0FBQ0EsTUFBSU0sSUFBSSxDQUFDQyxHQUFMLEtBQWFQLGNBQWIsR0FBOEJKLGFBQWEsQ0FBQ00sRUFBRCxDQUFiLEdBQW9CTCx1QkFBdEQsRUFBK0U7QUFDN0VQLElBQUFBLEtBQUssQ0FBQywyREFBRCxDQUFMO0FBQ0EsVUFBTUksU0FBUyxDQUFDUSxFQUFELEVBQUtELE1BQUwsQ0FBZjtBQUNBO0FBQ0Q7O0FBRUQsU0FBTyxJQUFQLEVBQWE7QUFDWFgsSUFBQUEsS0FBSztBQUNILHdDQURHO0FBRUhhLElBQUFBLE1BRkcsRUFFS0QsRUFGTCxFQUVTLElBQUlJLElBQUosQ0FBU0QsYUFBVCxFQUF3QkcsY0FBeEIsRUFGVCxDQUFMOzs7QUFLQSxRQUFJQyxPQUFKOztBQUVBLFFBQUk7QUFDRkEsTUFBQUEsT0FBTyxHQUFHLE1BQU1qQixZQUFZLENBQUNXLE1BQUQsRUFBU0QsRUFBVCxFQUFhRyxhQUFhLEdBQUcsQ0FBN0IsQ0FBNUI7QUFDRCxLQUZELENBRUUsT0FBT0ssQ0FBUCxFQUFVO0FBQ1ZmLE1BQUFBLE9BQU8sQ0FBQ2dCLFNBQVIsQ0FBa0JELENBQWxCO0FBQ0E7QUFDRDs7QUFFRCxRQUFJRCxPQUFPLENBQUNHLE1BQVIsR0FBaUIsQ0FBckIsRUFBd0I7QUFDdEIsVUFBSTtBQUNGLGNBQU1uQixhQUFhLENBQUNVLE1BQUQsRUFBU0QsRUFBVCxFQUFhWCxvQkFBb0IsQ0FBQ1csRUFBRCxFQUFLTyxPQUFMLEVBQWMsS0FBZCxDQUFqQyxDQUFuQjtBQUNBSixRQUFBQSxhQUFhLEdBQUdqQixLQUFLLENBQUNxQixPQUFELENBQUwsQ0FBZSxDQUFmLENBQWhCO0FBQ0FuQixRQUFBQSxLQUFLLENBQUMsNkJBQUQsRUFBZ0NtQixPQUFPLENBQUNHLE1BQXhDLEVBQWdEVixFQUFoRCxDQUFMO0FBQ0QsT0FKRCxDQUlFLE9BQU9RLENBQVAsRUFBVTtBQUNWZixRQUFBQSxPQUFPLENBQUNnQixTQUFSLENBQWtCRCxDQUFsQjtBQUNEO0FBQ0Y7O0FBRUQsUUFBSUQsT0FBTyxDQUFDRyxNQUFSLEdBQWlCLEdBQXJCLEVBQTBCLENBQUU7QUFDMUJ0QixNQUFBQSxLQUFLLENBQUMseUNBQUQsRUFBNENhLE1BQTVDLEVBQW9ERCxFQUFwRCxDQUFMO0FBQ0EsWUFBTVIsU0FBUyxDQUFDUSxFQUFELEVBQUtELE1BQUwsQ0FBZjtBQUNBO0FBQ0Q7QUFDRjtBQUNGLENBM0NEIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IF9sYXN0ID0gcmVxdWlyZSgnbG9kYXNoL2xhc3QnKVxuY29uc3QgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdiZng6aGY6c2VydmVyOndvcmtlcnM6bWFya2V0LWRhdGEtc3luYzpiZng6bG9vcCcpXG5jb25zdCBwcm9jZXNzUmVtb3RlQ2FuZGxlcyA9IHJlcXVpcmUoJy4uLy4uLy4uL3V0aWwvcHJvY2Vzc19yZW1vdGVfY2FuZGxlcycpXG5jb25zdCBmZXRjaENhbmRsZXMgPSByZXF1aXJlKCcuL2ZldGNoX2NhbmRsZXMnKVxuY29uc3QgaW5zZXJ0Q2FuZGxlcyA9IHJlcXVpcmUoJy4uLy4uLy4uL2RiL2NhbmRsZXMvYml0ZmluZXgvYnVsa19pbnNlcnQnKVxuY29uc3QgeyBzdWJzY3JpYmUgfSA9IHJlcXVpcmUoJy4vd3NfbGlzdGVuZXInKVxuY29uc3QgY2FwdHVyZSA9IHJlcXVpcmUoJy4uLy4uLy4uL2NhcHR1cmUnKVxuY29uc3QgQ0FORExFX1dJRFRIUyA9IHJlcXVpcmUoJy4uLy4uLy4uL3V0aWwvY2FuZGxlX3RpbWVfZnJhbWVzJylcblxuY29uc3QgV1NfQ0FORExFX1NOQVBTSE9UX1NJWkUgPSAyNDBcblxubW9kdWxlLmV4cG9ydHMgPSBhc3luYyAoZmlyc3RDYW5kbGVNVFMsIG1hcmtldCwgdGYpID0+IHtcbiAgY29uc3Qgc3ltYm9sID0gbWFya2V0LnJlc3RJRFxuICBsZXQgbGFzdENhbmRsZU1UUyA9IGZpcnN0Q2FuZGxlTVRTXG5cbiAgLy8gV1MgY2hhbm5lbCByZXR1cm5zIGEgc25hcHNob3Qgb24gY29ubmVjdCwgc28gaWYgd2UgYXJlbid0IHRvbyBmYXIgYmVoaW5kIHdlXG4gIC8vIGNhbiBjb25uZWN0IGRpcmVjdGx5IGFuZCB0YWtlIGFkdmFudGFnZSBvZiB0aGUgc25hcHNob3RcbiAgaWYgKERhdGUubm93KCkgLSBmaXJzdENhbmRsZU1UUyA8IENBTkRMRV9XSURUSFNbdGZdICogV1NfQ0FORExFX1NOQVBTSE9UX1NJWkUpIHtcbiAgICBkZWJ1Zygnc25hcHNob3Qgd2lsbCBhY2NvdW50IGZvciBkaXNjcmVwYW5jeSwgc2tpcHBpbmcgUkVTVCBzeW5jJylcbiAgICBhd2FpdCBzdWJzY3JpYmUodGYsIG1hcmtldClcbiAgICByZXR1cm5cbiAgfVxuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgZGVidWcoXG4gICAgICAnZmV0Y2hpbmcgY2FuZGxlcyBmb3IgJXMgJXMgZnJvbSAlcycsXG4gICAgICBzeW1ib2wsIHRmLCBuZXcgRGF0ZShsYXN0Q2FuZGxlTVRTKS50b0xvY2FsZVN0cmluZygpXG4gICAgKVxuXG4gICAgbGV0IGNhbmRsZXNcblxuICAgIHRyeSB7XG4gICAgICBjYW5kbGVzID0gYXdhaXQgZmV0Y2hDYW5kbGVzKHN5bWJvbCwgdGYsIGxhc3RDYW5kbGVNVFMgKyAxKVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNhcHR1cmUuZXhjZXB0aW9uKGUpXG4gICAgICBicmVha1xuICAgIH1cblxuICAgIGlmIChjYW5kbGVzLmxlbmd0aCA+IDApIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IGluc2VydENhbmRsZXMoc3ltYm9sLCB0ZiwgcHJvY2Vzc1JlbW90ZUNhbmRsZXModGYsIGNhbmRsZXMsIGZhbHNlKSlcbiAgICAgICAgbGFzdENhbmRsZU1UUyA9IF9sYXN0KGNhbmRsZXMpWzBdXG4gICAgICAgIGRlYnVnKCdpbnNlcnRlZCAlcyBjYW5kbGVzIGludG8gJXMnLCBjYW5kbGVzLmxlbmd0aCwgdGYpXG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhcHR1cmUuZXhjZXB0aW9uKGUpXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNhbmRsZXMubGVuZ3RoIDwgMTAwKSB7IC8vIGZldGNoIGxpbWl0IGlzIDVrXG4gICAgICBkZWJ1Zygnc3luYyBmb3IgJXMgJXMgZmluaXNoZWQsIHN1YnNjcmliaW5nLi4uJywgc3ltYm9sLCB0ZilcbiAgICAgIGF3YWl0IHN1YnNjcmliZSh0ZiwgbWFya2V0KVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cbn1cbiJdfQ==