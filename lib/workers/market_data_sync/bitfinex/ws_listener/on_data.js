'use strict';

const PI = require('p-iteration');
const debug = require('debug')('bfx:hf:server:workers:market-data-sync:bfx:ws-listener:on-data');
const processRemoteCandles = require('../../../../util/process_remote_candles');
const fetchBitfinexCandles = require('../../../../db/query_candles/fetch_bitfinex');
const capture = require('../../../../capture');

const ex = require('./ex');
const upsertCandle = require('../../../../db/candles/bitfinex/upsert');

module.exports = async (chanID, candle) => {
  const channel = ex.getChannelData(chanID);

  if (!channel) {
    debug('warning: recv data for unknown channel %s: %j', chanID, candle);
    return;
  }

  const { market, key } = channel;
  const tf = key.split(':')[1];
  const lastCandleRes = await fetchBitfinexCandles({
    tf,
    market,
    order: 'desc',
    limit: 1 });


  try {
    const candles = processRemoteCandles(tf, [...lastCandleRes, candle], true);

    PI.forEachSeries(candles, async candle => {
      return upsertCandle(market.restID, tf, candle);
    });
  } catch (e) {
    capture.exception(e);
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy93b3JrZXJzL21hcmtldF9kYXRhX3N5bmMvYml0ZmluZXgvd3NfbGlzdGVuZXIvb25fZGF0YS5qcyJdLCJuYW1lcyI6WyJQSSIsInJlcXVpcmUiLCJkZWJ1ZyIsInByb2Nlc3NSZW1vdGVDYW5kbGVzIiwiZmV0Y2hCaXRmaW5leENhbmRsZXMiLCJjYXB0dXJlIiwiZXgiLCJ1cHNlcnRDYW5kbGUiLCJtb2R1bGUiLCJleHBvcnRzIiwiY2hhbklEIiwiY2FuZGxlIiwiY2hhbm5lbCIsImdldENoYW5uZWxEYXRhIiwibWFya2V0Iiwia2V5IiwidGYiLCJzcGxpdCIsImxhc3RDYW5kbGVSZXMiLCJvcmRlciIsImxpbWl0IiwiY2FuZGxlcyIsImZvckVhY2hTZXJpZXMiLCJyZXN0SUQiLCJlIiwiZXhjZXB0aW9uIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxNQUFNQSxFQUFFLEdBQUdDLE9BQU8sQ0FBQyxhQUFELENBQWxCO0FBQ0EsTUFBTUMsS0FBSyxHQUFHRCxPQUFPLENBQUMsT0FBRCxDQUFQLENBQWlCLGdFQUFqQixDQUFkO0FBQ0EsTUFBTUUsb0JBQW9CLEdBQUdGLE9BQU8sQ0FBQyx5Q0FBRCxDQUFwQztBQUNBLE1BQU1HLG9CQUFvQixHQUFHSCxPQUFPLENBQUMsNkNBQUQsQ0FBcEM7QUFDQSxNQUFNSSxPQUFPLEdBQUdKLE9BQU8sQ0FBQyxxQkFBRCxDQUF2Qjs7QUFFQSxNQUFNSyxFQUFFLEdBQUdMLE9BQU8sQ0FBQyxNQUFELENBQWxCO0FBQ0EsTUFBTU0sWUFBWSxHQUFHTixPQUFPLENBQUMsd0NBQUQsQ0FBNUI7O0FBRUFPLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixPQUFPQyxNQUFQLEVBQWVDLE1BQWYsS0FBMEI7QUFDekMsUUFBTUMsT0FBTyxHQUFHTixFQUFFLENBQUNPLGNBQUgsQ0FBa0JILE1BQWxCLENBQWhCOztBQUVBLE1BQUksQ0FBQ0UsT0FBTCxFQUFjO0FBQ1pWLElBQUFBLEtBQUssQ0FBQywrQ0FBRCxFQUFrRFEsTUFBbEQsRUFBMERDLE1BQTFELENBQUw7QUFDQTtBQUNEOztBQUVELFFBQU0sRUFBRUcsTUFBRixFQUFVQyxHQUFWLEtBQWtCSCxPQUF4QjtBQUNBLFFBQU1JLEVBQUUsR0FBR0QsR0FBRyxDQUFDRSxLQUFKLENBQVUsR0FBVixFQUFlLENBQWYsQ0FBWDtBQUNBLFFBQU1DLGFBQWEsR0FBRyxNQUFNZCxvQkFBb0IsQ0FBQztBQUMvQ1ksSUFBQUEsRUFEK0M7QUFFL0NGLElBQUFBLE1BRitDO0FBRy9DSyxJQUFBQSxLQUFLLEVBQUUsTUFId0M7QUFJL0NDLElBQUFBLEtBQUssRUFBRSxDQUp3QyxFQUFELENBQWhEOzs7QUFPQSxNQUFJO0FBQ0YsVUFBTUMsT0FBTyxHQUFHbEIsb0JBQW9CLENBQUNhLEVBQUQsRUFBSyxDQUFDLEdBQUdFLGFBQUosRUFBbUJQLE1BQW5CLENBQUwsRUFBaUMsSUFBakMsQ0FBcEM7O0FBRUFYLElBQUFBLEVBQUUsQ0FBQ3NCLGFBQUgsQ0FBaUJELE9BQWpCLEVBQTBCLE1BQU9WLE1BQVAsSUFBa0I7QUFDMUMsYUFBT0osWUFBWSxDQUFDTyxNQUFNLENBQUNTLE1BQVIsRUFBZ0JQLEVBQWhCLEVBQW9CTCxNQUFwQixDQUFuQjtBQUNELEtBRkQ7QUFHRCxHQU5ELENBTUUsT0FBT2EsQ0FBUCxFQUFVO0FBQ1ZuQixJQUFBQSxPQUFPLENBQUNvQixTQUFSLENBQWtCRCxDQUFsQjtBQUNEO0FBQ0YsQ0ExQkQiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgUEkgPSByZXF1aXJlKCdwLWl0ZXJhdGlvbicpXG5jb25zdCBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ2JmeDpoZjpzZXJ2ZXI6d29ya2VyczptYXJrZXQtZGF0YS1zeW5jOmJmeDp3cy1saXN0ZW5lcjpvbi1kYXRhJylcbmNvbnN0IHByb2Nlc3NSZW1vdGVDYW5kbGVzID0gcmVxdWlyZSgnLi4vLi4vLi4vLi4vdXRpbC9wcm9jZXNzX3JlbW90ZV9jYW5kbGVzJylcbmNvbnN0IGZldGNoQml0ZmluZXhDYW5kbGVzID0gcmVxdWlyZSgnLi4vLi4vLi4vLi4vZGIvcXVlcnlfY2FuZGxlcy9mZXRjaF9iaXRmaW5leCcpXG5jb25zdCBjYXB0dXJlID0gcmVxdWlyZSgnLi4vLi4vLi4vLi4vY2FwdHVyZScpXG5cbmNvbnN0IGV4ID0gcmVxdWlyZSgnLi9leCcpXG5jb25zdCB1cHNlcnRDYW5kbGUgPSByZXF1aXJlKCcuLi8uLi8uLi8uLi9kYi9jYW5kbGVzL2JpdGZpbmV4L3Vwc2VydCcpXG5cbm1vZHVsZS5leHBvcnRzID0gYXN5bmMgKGNoYW5JRCwgY2FuZGxlKSA9PiB7XG4gIGNvbnN0IGNoYW5uZWwgPSBleC5nZXRDaGFubmVsRGF0YShjaGFuSUQpXG5cbiAgaWYgKCFjaGFubmVsKSB7XG4gICAgZGVidWcoJ3dhcm5pbmc6IHJlY3YgZGF0YSBmb3IgdW5rbm93biBjaGFubmVsICVzOiAlaicsIGNoYW5JRCwgY2FuZGxlKVxuICAgIHJldHVyblxuICB9XG5cbiAgY29uc3QgeyBtYXJrZXQsIGtleSB9ID0gY2hhbm5lbFxuICBjb25zdCB0ZiA9IGtleS5zcGxpdCgnOicpWzFdXG4gIGNvbnN0IGxhc3RDYW5kbGVSZXMgPSBhd2FpdCBmZXRjaEJpdGZpbmV4Q2FuZGxlcyh7XG4gICAgdGYsXG4gICAgbWFya2V0LFxuICAgIG9yZGVyOiAnZGVzYycsXG4gICAgbGltaXQ6IDFcbiAgfSlcblxuICB0cnkge1xuICAgIGNvbnN0IGNhbmRsZXMgPSBwcm9jZXNzUmVtb3RlQ2FuZGxlcyh0ZiwgWy4uLmxhc3RDYW5kbGVSZXMsIGNhbmRsZV0sIHRydWUpXG5cbiAgICBQSS5mb3JFYWNoU2VyaWVzKGNhbmRsZXMsIGFzeW5jIChjYW5kbGUpID0+IHtcbiAgICAgIHJldHVybiB1cHNlcnRDYW5kbGUobWFya2V0LnJlc3RJRCwgdGYsIGNhbmRsZSlcbiAgICB9KVxuICB9IGNhdGNoIChlKSB7XG4gICAgY2FwdHVyZS5leGNlcHRpb24oZSlcbiAgfVxufVxuIl19