'use strict';

require('bfx-hf-util/lib/catch_uncaught_errors');

const debug = require('debug')('bfx:hf:server:workers:market-data-sync:binance:ws-pool:worker');
const _isString = require('lodash/isString');
const PI = require('p-iteration');

const capture = require('../../../../capture');
const EXA = require('../../../../exchange_clients/binance');
const candleWidth = require('../../../../exchange_clients/binance/util/candle_width');
const upsertCandle = require('./upsert_candle');
const fetchBinanceCandles = require('../../../../db/query_candles/fetch_binance');
const processRemoteCandles = require('../../../../util/process_remote_candles');

const ex = new EXA();
const lastFinalCandleForKey = {};

const onCandle = async rawCandle => {
  const { symbol, interval, isFinal } = rawCandle;
  const last = lastFinalCandleForKey[`${symbol}-${interval}`];

  if (!isFinal && !last) {
    return false; // we need at least 1 final candle to get mts
  }

  const mts = isFinal ?
  rawCandle.startTime :
  (last.openTime || last.startTime) + candleWidth(interval);

  if (isFinal) {
    lastFinalCandleForKey[`${symbol}-${interval}`] = rawCandle;
  }

  debug('recv candle for %s:%s', interval, symbol);

  const candle = EXA.transformCandle(rawCandle, mts);
  const lastCandleRes = await fetchBinanceCandles({
    tf: interval,
    market: { r: symbol },
    order: 'desc',
    limit: 1 });


  const [lastCandle] = lastCandleRes;
  let candlesToInsert;

  try {
    candlesToInsert = lastCandle.mts === candle.mts ?
    [candle] :
    processRemoteCandles(interval, [lastCandle, candle], true);

    await PI.forEachSeries(candlesToInsert, async candle => {
      return upsertCandle(symbol, interval, candle);
    });
  } catch (e) {
    capture.exception(e);
  }

  return true;
};

process.on('message', (msg = {}) => {
  const { symbol, tf } = msg;

  if (!_isString(symbol) || !_isString(tf)) {
    debug('recv malformed message: %j', msg);
    return;
  }

  debug('subscribing to candles channel %s:%s', symbol, tf);

  ex.client.ws.candles(symbol, tf, candle => {
    onCandle(candle).then(inserted => {
      if (inserted) {
        debug('inserted candle into %s:%s', symbol, tf);
      }

      return null;
    }).catch(e => {
      capture.exception(e);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy93b3JrZXJzL21hcmtldF9kYXRhX3N5bmMvYmluYW5jZS93c19wb29sL3dvcmtlci5qcyJdLCJuYW1lcyI6WyJyZXF1aXJlIiwiZGVidWciLCJfaXNTdHJpbmciLCJQSSIsImNhcHR1cmUiLCJFWEEiLCJjYW5kbGVXaWR0aCIsInVwc2VydENhbmRsZSIsImZldGNoQmluYW5jZUNhbmRsZXMiLCJwcm9jZXNzUmVtb3RlQ2FuZGxlcyIsImV4IiwibGFzdEZpbmFsQ2FuZGxlRm9yS2V5Iiwib25DYW5kbGUiLCJyYXdDYW5kbGUiLCJzeW1ib2wiLCJpbnRlcnZhbCIsImlzRmluYWwiLCJsYXN0IiwibXRzIiwic3RhcnRUaW1lIiwib3BlblRpbWUiLCJjYW5kbGUiLCJ0cmFuc2Zvcm1DYW5kbGUiLCJsYXN0Q2FuZGxlUmVzIiwidGYiLCJtYXJrZXQiLCJyIiwib3JkZXIiLCJsaW1pdCIsImxhc3RDYW5kbGUiLCJjYW5kbGVzVG9JbnNlcnQiLCJmb3JFYWNoU2VyaWVzIiwiZSIsImV4Y2VwdGlvbiIsInByb2Nlc3MiLCJvbiIsIm1zZyIsImNsaWVudCIsIndzIiwiY2FuZGxlcyIsInRoZW4iLCJpbnNlcnRlZCIsImNhdGNoIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQUEsT0FBTyxDQUFDLHVDQUFELENBQVA7O0FBRUEsTUFBTUMsS0FBSyxHQUFHRCxPQUFPLENBQUMsT0FBRCxDQUFQLENBQWlCLCtEQUFqQixDQUFkO0FBQ0EsTUFBTUUsU0FBUyxHQUFHRixPQUFPLENBQUMsaUJBQUQsQ0FBekI7QUFDQSxNQUFNRyxFQUFFLEdBQUdILE9BQU8sQ0FBQyxhQUFELENBQWxCOztBQUVBLE1BQU1JLE9BQU8sR0FBR0osT0FBTyxDQUFDLHFCQUFELENBQXZCO0FBQ0EsTUFBTUssR0FBRyxHQUFHTCxPQUFPLENBQUMsc0NBQUQsQ0FBbkI7QUFDQSxNQUFNTSxXQUFXLEdBQUdOLE9BQU8sQ0FBQyx3REFBRCxDQUEzQjtBQUNBLE1BQU1PLFlBQVksR0FBR1AsT0FBTyxDQUFDLGlCQUFELENBQTVCO0FBQ0EsTUFBTVEsbUJBQW1CLEdBQUdSLE9BQU8sQ0FBQyw0Q0FBRCxDQUFuQztBQUNBLE1BQU1TLG9CQUFvQixHQUFHVCxPQUFPLENBQUMseUNBQUQsQ0FBcEM7O0FBRUEsTUFBTVUsRUFBRSxHQUFHLElBQUlMLEdBQUosRUFBWDtBQUNBLE1BQU1NLHFCQUFxQixHQUFHLEVBQTlCOztBQUVBLE1BQU1DLFFBQVEsR0FBRyxNQUFPQyxTQUFQLElBQXFCO0FBQ3BDLFFBQU0sRUFBRUMsTUFBRixFQUFVQyxRQUFWLEVBQW9CQyxPQUFwQixLQUFnQ0gsU0FBdEM7QUFDQSxRQUFNSSxJQUFJLEdBQUdOLHFCQUFxQixDQUFFLEdBQUVHLE1BQU8sSUFBR0MsUUFBUyxFQUF2QixDQUFsQzs7QUFFQSxNQUFJLENBQUNDLE9BQUQsSUFBWSxDQUFDQyxJQUFqQixFQUF1QjtBQUNyQixXQUFPLEtBQVAsQ0FEcUIsQ0FDUjtBQUNkOztBQUVELFFBQU1DLEdBQUcsR0FBR0YsT0FBTztBQUNmSCxFQUFBQSxTQUFTLENBQUNNLFNBREs7QUFFZixHQUFDRixJQUFJLENBQUNHLFFBQUwsSUFBaUJILElBQUksQ0FBQ0UsU0FBdkIsSUFBb0NiLFdBQVcsQ0FBQ1MsUUFBRCxDQUZuRDs7QUFJQSxNQUFJQyxPQUFKLEVBQWE7QUFDWEwsSUFBQUEscUJBQXFCLENBQUUsR0FBRUcsTUFBTyxJQUFHQyxRQUFTLEVBQXZCLENBQXJCLEdBQWlERixTQUFqRDtBQUNEOztBQUVEWixFQUFBQSxLQUFLLENBQUMsdUJBQUQsRUFBMEJjLFFBQTFCLEVBQW9DRCxNQUFwQyxDQUFMOztBQUVBLFFBQU1PLE1BQU0sR0FBR2hCLEdBQUcsQ0FBQ2lCLGVBQUosQ0FBb0JULFNBQXBCLEVBQStCSyxHQUEvQixDQUFmO0FBQ0EsUUFBTUssYUFBYSxHQUFHLE1BQU1mLG1CQUFtQixDQUFDO0FBQzlDZ0IsSUFBQUEsRUFBRSxFQUFFVCxRQUQwQztBQUU5Q1UsSUFBQUEsTUFBTSxFQUFFLEVBQUVDLENBQUMsRUFBRVosTUFBTCxFQUZzQztBQUc5Q2EsSUFBQUEsS0FBSyxFQUFFLE1BSHVDO0FBSTlDQyxJQUFBQSxLQUFLLEVBQUUsQ0FKdUMsRUFBRCxDQUEvQzs7O0FBT0EsUUFBTSxDQUFDQyxVQUFELElBQWVOLGFBQXJCO0FBQ0EsTUFBSU8sZUFBSjs7QUFFQSxNQUFJO0FBQ0ZBLElBQUFBLGVBQWUsR0FBR0QsVUFBVSxDQUFDWCxHQUFYLEtBQW1CRyxNQUFNLENBQUNILEdBQTFCO0FBQ2QsS0FBQ0csTUFBRCxDQURjO0FBRWRaLElBQUFBLG9CQUFvQixDQUFDTSxRQUFELEVBQVcsQ0FBQ2MsVUFBRCxFQUFhUixNQUFiLENBQVgsRUFBaUMsSUFBakMsQ0FGeEI7O0FBSUEsVUFBTWxCLEVBQUUsQ0FBQzRCLGFBQUgsQ0FBaUJELGVBQWpCLEVBQWtDLE1BQU9ULE1BQVAsSUFBa0I7QUFDeEQsYUFBT2QsWUFBWSxDQUFDTyxNQUFELEVBQVNDLFFBQVQsRUFBbUJNLE1BQW5CLENBQW5CO0FBQ0QsS0FGSyxDQUFOO0FBR0QsR0FSRCxDQVFFLE9BQU9XLENBQVAsRUFBVTtBQUNWNUIsSUFBQUEsT0FBTyxDQUFDNkIsU0FBUixDQUFrQkQsQ0FBbEI7QUFDRDs7QUFFRCxTQUFPLElBQVA7QUFDRCxDQTFDRDs7QUE0Q0FFLE9BQU8sQ0FBQ0MsRUFBUixDQUFXLFNBQVgsRUFBc0IsQ0FBQ0MsR0FBRyxHQUFHLEVBQVAsS0FBYztBQUNsQyxRQUFNLEVBQUV0QixNQUFGLEVBQVVVLEVBQVYsS0FBaUJZLEdBQXZCOztBQUVBLE1BQUksQ0FBQ2xDLFNBQVMsQ0FBQ1ksTUFBRCxDQUFWLElBQXNCLENBQUNaLFNBQVMsQ0FBQ3NCLEVBQUQsQ0FBcEMsRUFBMEM7QUFDeEN2QixJQUFBQSxLQUFLLENBQUMsNEJBQUQsRUFBK0JtQyxHQUEvQixDQUFMO0FBQ0E7QUFDRDs7QUFFRG5DLEVBQUFBLEtBQUssQ0FBQyxzQ0FBRCxFQUF5Q2EsTUFBekMsRUFBaURVLEVBQWpELENBQUw7O0FBRUFkLEVBQUFBLEVBQUUsQ0FBQzJCLE1BQUgsQ0FBVUMsRUFBVixDQUFhQyxPQUFiLENBQXFCekIsTUFBckIsRUFBNkJVLEVBQTdCLEVBQWtDSCxNQUFELElBQVk7QUFDM0NULElBQUFBLFFBQVEsQ0FBQ1MsTUFBRCxDQUFSLENBQWlCbUIsSUFBakIsQ0FBdUJDLFFBQUQsSUFBYztBQUNsQyxVQUFJQSxRQUFKLEVBQWM7QUFDWnhDLFFBQUFBLEtBQUssQ0FBQyw0QkFBRCxFQUErQmEsTUFBL0IsRUFBdUNVLEVBQXZDLENBQUw7QUFDRDs7QUFFRCxhQUFPLElBQVA7QUFDRCxLQU5ELEVBTUdrQixLQU5ILENBTVVWLENBQUQsSUFBTztBQUNkNUIsTUFBQUEsT0FBTyxDQUFDNkIsU0FBUixDQUFrQkQsQ0FBbEI7QUFDRCxLQVJEO0FBU0QsR0FWRDtBQVdELENBckJEIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbnJlcXVpcmUoJ2JmeC1oZi11dGlsL2xpYi9jYXRjaF91bmNhdWdodF9lcnJvcnMnKVxuXG5jb25zdCBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ2JmeDpoZjpzZXJ2ZXI6d29ya2VyczptYXJrZXQtZGF0YS1zeW5jOmJpbmFuY2U6d3MtcG9vbDp3b3JrZXInKVxuY29uc3QgX2lzU3RyaW5nID0gcmVxdWlyZSgnbG9kYXNoL2lzU3RyaW5nJylcbmNvbnN0IFBJID0gcmVxdWlyZSgncC1pdGVyYXRpb24nKVxuXG5jb25zdCBjYXB0dXJlID0gcmVxdWlyZSgnLi4vLi4vLi4vLi4vY2FwdHVyZScpXG5jb25zdCBFWEEgPSByZXF1aXJlKCcuLi8uLi8uLi8uLi9leGNoYW5nZV9jbGllbnRzL2JpbmFuY2UnKVxuY29uc3QgY2FuZGxlV2lkdGggPSByZXF1aXJlKCcuLi8uLi8uLi8uLi9leGNoYW5nZV9jbGllbnRzL2JpbmFuY2UvdXRpbC9jYW5kbGVfd2lkdGgnKVxuY29uc3QgdXBzZXJ0Q2FuZGxlID0gcmVxdWlyZSgnLi91cHNlcnRfY2FuZGxlJylcbmNvbnN0IGZldGNoQmluYW5jZUNhbmRsZXMgPSByZXF1aXJlKCcuLi8uLi8uLi8uLi9kYi9xdWVyeV9jYW5kbGVzL2ZldGNoX2JpbmFuY2UnKVxuY29uc3QgcHJvY2Vzc1JlbW90ZUNhbmRsZXMgPSByZXF1aXJlKCcuLi8uLi8uLi8uLi91dGlsL3Byb2Nlc3NfcmVtb3RlX2NhbmRsZXMnKVxuXG5jb25zdCBleCA9IG5ldyBFWEEoKVxuY29uc3QgbGFzdEZpbmFsQ2FuZGxlRm9yS2V5ID0ge31cblxuY29uc3Qgb25DYW5kbGUgPSBhc3luYyAocmF3Q2FuZGxlKSA9PiB7XG4gIGNvbnN0IHsgc3ltYm9sLCBpbnRlcnZhbCwgaXNGaW5hbCB9ID0gcmF3Q2FuZGxlXG4gIGNvbnN0IGxhc3QgPSBsYXN0RmluYWxDYW5kbGVGb3JLZXlbYCR7c3ltYm9sfS0ke2ludGVydmFsfWBdXG5cbiAgaWYgKCFpc0ZpbmFsICYmICFsYXN0KSB7XG4gICAgcmV0dXJuIGZhbHNlIC8vIHdlIG5lZWQgYXQgbGVhc3QgMSBmaW5hbCBjYW5kbGUgdG8gZ2V0IG10c1xuICB9XG5cbiAgY29uc3QgbXRzID0gaXNGaW5hbFxuICAgID8gcmF3Q2FuZGxlLnN0YXJ0VGltZVxuICAgIDogKGxhc3Qub3BlblRpbWUgfHwgbGFzdC5zdGFydFRpbWUpICsgY2FuZGxlV2lkdGgoaW50ZXJ2YWwpXG5cbiAgaWYgKGlzRmluYWwpIHtcbiAgICBsYXN0RmluYWxDYW5kbGVGb3JLZXlbYCR7c3ltYm9sfS0ke2ludGVydmFsfWBdID0gcmF3Q2FuZGxlXG4gIH1cblxuICBkZWJ1ZygncmVjdiBjYW5kbGUgZm9yICVzOiVzJywgaW50ZXJ2YWwsIHN5bWJvbClcblxuICBjb25zdCBjYW5kbGUgPSBFWEEudHJhbnNmb3JtQ2FuZGxlKHJhd0NhbmRsZSwgbXRzKVxuICBjb25zdCBsYXN0Q2FuZGxlUmVzID0gYXdhaXQgZmV0Y2hCaW5hbmNlQ2FuZGxlcyh7XG4gICAgdGY6IGludGVydmFsLFxuICAgIG1hcmtldDogeyByOiBzeW1ib2wgfSxcbiAgICBvcmRlcjogJ2Rlc2MnLFxuICAgIGxpbWl0OiAxXG4gIH0pXG5cbiAgY29uc3QgW2xhc3RDYW5kbGVdID0gbGFzdENhbmRsZVJlc1xuICBsZXQgY2FuZGxlc1RvSW5zZXJ0XG5cbiAgdHJ5IHtcbiAgICBjYW5kbGVzVG9JbnNlcnQgPSBsYXN0Q2FuZGxlLm10cyA9PT0gY2FuZGxlLm10c1xuICAgICAgPyBbY2FuZGxlXVxuICAgICAgOiBwcm9jZXNzUmVtb3RlQ2FuZGxlcyhpbnRlcnZhbCwgW2xhc3RDYW5kbGUsIGNhbmRsZV0sIHRydWUpXG5cbiAgICBhd2FpdCBQSS5mb3JFYWNoU2VyaWVzKGNhbmRsZXNUb0luc2VydCwgYXN5bmMgKGNhbmRsZSkgPT4ge1xuICAgICAgcmV0dXJuIHVwc2VydENhbmRsZShzeW1ib2wsIGludGVydmFsLCBjYW5kbGUpXG4gICAgfSlcbiAgfSBjYXRjaCAoZSkge1xuICAgIGNhcHR1cmUuZXhjZXB0aW9uKGUpXG4gIH1cblxuICByZXR1cm4gdHJ1ZVxufVxuXG5wcm9jZXNzLm9uKCdtZXNzYWdlJywgKG1zZyA9IHt9KSA9PiB7XG4gIGNvbnN0IHsgc3ltYm9sLCB0ZiB9ID0gbXNnXG5cbiAgaWYgKCFfaXNTdHJpbmcoc3ltYm9sKSB8fCAhX2lzU3RyaW5nKHRmKSkge1xuICAgIGRlYnVnKCdyZWN2IG1hbGZvcm1lZCBtZXNzYWdlOiAlaicsIG1zZylcbiAgICByZXR1cm5cbiAgfVxuXG4gIGRlYnVnKCdzdWJzY3JpYmluZyB0byBjYW5kbGVzIGNoYW5uZWwgJXM6JXMnLCBzeW1ib2wsIHRmKVxuXG4gIGV4LmNsaWVudC53cy5jYW5kbGVzKHN5bWJvbCwgdGYsIChjYW5kbGUpID0+IHtcbiAgICBvbkNhbmRsZShjYW5kbGUpLnRoZW4oKGluc2VydGVkKSA9PiB7XG4gICAgICBpZiAoaW5zZXJ0ZWQpIHtcbiAgICAgICAgZGVidWcoJ2luc2VydGVkIGNhbmRsZSBpbnRvICVzOiVzJywgc3ltYm9sLCB0ZilcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bGxcbiAgICB9KS5jYXRjaCgoZSkgPT4ge1xuICAgICAgY2FwdHVyZS5leGNlcHRpb24oZSlcbiAgICB9KVxuICB9KVxufSlcbiJdfQ==