'use strict';

const debug = require('debug')('bfx:hf:server:workers:market-data-sync:binance:loop');
const _last = require('lodash/last');
const capture = require('../../../capture');

const fetchCandles = require('./fetch_candles');
const insertCandles = require('./insert_candles');
const onFinishSync = require('./on_finish_sync');

module.exports = async (firstCandleMTS, market, tf) => {
  const symbol = market.restID;
  let lastCandleMTS = firstCandleMTS;

  while (true) {
    debug(
    'fetching candles for %s %s from %s',
    symbol, tf, new Date(lastCandleMTS).toLocaleString());


    let candles = [];

    try {
      candles = await fetchCandles(symbol, tf, lastCandleMTS + 1);
    } catch (e) {
      capture.exception(e);
    }

    if (candles.length > 0) {
      try {
        await insertCandles(symbol, tf, candles);
        debug('inserted %s candles into %s', candles.length, tf);
        lastCandleMTS = _last(candles).openTime;
      } catch (e) {
        capture.exception(e);
      }
    }

    if (candles.length < 1000) {// fetch limit is 1k
      debug('sync for %s %s finished', symbol, tf);
      await onFinishSync(symbol, tf);
      break;
    }
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93b3JrZXJzL21hcmtldF9kYXRhX3N5bmMvYmluYW5jZS9mZXRjaF9sb29wLmpzIl0sIm5hbWVzIjpbImRlYnVnIiwicmVxdWlyZSIsIl9sYXN0IiwiY2FwdHVyZSIsImZldGNoQ2FuZGxlcyIsImluc2VydENhbmRsZXMiLCJvbkZpbmlzaFN5bmMiLCJtb2R1bGUiLCJleHBvcnRzIiwiZmlyc3RDYW5kbGVNVFMiLCJtYXJrZXQiLCJ0ZiIsInN5bWJvbCIsInJlc3RJRCIsImxhc3RDYW5kbGVNVFMiLCJEYXRlIiwidG9Mb2NhbGVTdHJpbmciLCJjYW5kbGVzIiwiZSIsImV4Y2VwdGlvbiIsImxlbmd0aCIsIm9wZW5UaW1lIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQVAsQ0FBaUIscURBQWpCLENBQWQ7QUFDQSxNQUFNQyxLQUFLLEdBQUdELE9BQU8sQ0FBQyxhQUFELENBQXJCO0FBQ0EsTUFBTUUsT0FBTyxHQUFHRixPQUFPLENBQUMsa0JBQUQsQ0FBdkI7O0FBRUEsTUFBTUcsWUFBWSxHQUFHSCxPQUFPLENBQUMsaUJBQUQsQ0FBNUI7QUFDQSxNQUFNSSxhQUFhLEdBQUdKLE9BQU8sQ0FBQyxrQkFBRCxDQUE3QjtBQUNBLE1BQU1LLFlBQVksR0FBR0wsT0FBTyxDQUFDLGtCQUFELENBQTVCOztBQUVBTSxNQUFNLENBQUNDLE9BQVAsR0FBaUIsT0FBT0MsY0FBUCxFQUF1QkMsTUFBdkIsRUFBK0JDLEVBQS9CLEtBQXNDO0FBQ3JELFFBQU1DLE1BQU0sR0FBR0YsTUFBTSxDQUFDRyxNQUF0QjtBQUNBLE1BQUlDLGFBQWEsR0FBR0wsY0FBcEI7O0FBRUEsU0FBTyxJQUFQLEVBQWE7QUFDWFQsSUFBQUEsS0FBSztBQUNILHdDQURHO0FBRUhZLElBQUFBLE1BRkcsRUFFS0QsRUFGTCxFQUVTLElBQUlJLElBQUosQ0FBU0QsYUFBVCxFQUF3QkUsY0FBeEIsRUFGVCxDQUFMOzs7QUFLQSxRQUFJQyxPQUFPLEdBQUcsRUFBZDs7QUFFQSxRQUFJO0FBQ0ZBLE1BQUFBLE9BQU8sR0FBRyxNQUFNYixZQUFZLENBQUNRLE1BQUQsRUFBU0QsRUFBVCxFQUFhRyxhQUFhLEdBQUcsQ0FBN0IsQ0FBNUI7QUFDRCxLQUZELENBRUUsT0FBT0ksQ0FBUCxFQUFVO0FBQ1ZmLE1BQUFBLE9BQU8sQ0FBQ2dCLFNBQVIsQ0FBa0JELENBQWxCO0FBQ0Q7O0FBRUQsUUFBSUQsT0FBTyxDQUFDRyxNQUFSLEdBQWlCLENBQXJCLEVBQXdCO0FBQ3RCLFVBQUk7QUFDRixjQUFNZixhQUFhLENBQUNPLE1BQUQsRUFBU0QsRUFBVCxFQUFhTSxPQUFiLENBQW5CO0FBQ0FqQixRQUFBQSxLQUFLLENBQUMsNkJBQUQsRUFBZ0NpQixPQUFPLENBQUNHLE1BQXhDLEVBQWdEVCxFQUFoRCxDQUFMO0FBQ0FHLFFBQUFBLGFBQWEsR0FBR1osS0FBSyxDQUFDZSxPQUFELENBQUwsQ0FBZUksUUFBL0I7QUFDRCxPQUpELENBSUUsT0FBT0gsQ0FBUCxFQUFVO0FBQ1ZmLFFBQUFBLE9BQU8sQ0FBQ2dCLFNBQVIsQ0FBa0JELENBQWxCO0FBQ0Q7QUFDRjs7QUFFRCxRQUFJRCxPQUFPLENBQUNHLE1BQVIsR0FBaUIsSUFBckIsRUFBMkIsQ0FBRTtBQUMzQnBCLE1BQUFBLEtBQUssQ0FBQyx5QkFBRCxFQUE0QlksTUFBNUIsRUFBb0NELEVBQXBDLENBQUw7QUFDQSxZQUFNTCxZQUFZLENBQUNNLE1BQUQsRUFBU0QsRUFBVCxDQUFsQjtBQUNBO0FBQ0Q7QUFDRjtBQUNGLENBbENEIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnYmZ4OmhmOnNlcnZlcjp3b3JrZXJzOm1hcmtldC1kYXRhLXN5bmM6YmluYW5jZTpsb29wJylcbmNvbnN0IF9sYXN0ID0gcmVxdWlyZSgnbG9kYXNoL2xhc3QnKVxuY29uc3QgY2FwdHVyZSA9IHJlcXVpcmUoJy4uLy4uLy4uL2NhcHR1cmUnKVxuXG5jb25zdCBmZXRjaENhbmRsZXMgPSByZXF1aXJlKCcuL2ZldGNoX2NhbmRsZXMnKVxuY29uc3QgaW5zZXJ0Q2FuZGxlcyA9IHJlcXVpcmUoJy4vaW5zZXJ0X2NhbmRsZXMnKVxuY29uc3Qgb25GaW5pc2hTeW5jID0gcmVxdWlyZSgnLi9vbl9maW5pc2hfc3luYycpXG5cbm1vZHVsZS5leHBvcnRzID0gYXN5bmMgKGZpcnN0Q2FuZGxlTVRTLCBtYXJrZXQsIHRmKSA9PiB7XG4gIGNvbnN0IHN5bWJvbCA9IG1hcmtldC5yZXN0SURcbiAgbGV0IGxhc3RDYW5kbGVNVFMgPSBmaXJzdENhbmRsZU1UU1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgZGVidWcoXG4gICAgICAnZmV0Y2hpbmcgY2FuZGxlcyBmb3IgJXMgJXMgZnJvbSAlcycsXG4gICAgICBzeW1ib2wsIHRmLCBuZXcgRGF0ZShsYXN0Q2FuZGxlTVRTKS50b0xvY2FsZVN0cmluZygpXG4gICAgKVxuXG4gICAgbGV0IGNhbmRsZXMgPSBbXVxuXG4gICAgdHJ5IHtcbiAgICAgIGNhbmRsZXMgPSBhd2FpdCBmZXRjaENhbmRsZXMoc3ltYm9sLCB0ZiwgbGFzdENhbmRsZU1UUyArIDEpXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY2FwdHVyZS5leGNlcHRpb24oZSlcbiAgICB9XG5cbiAgICBpZiAoY2FuZGxlcy5sZW5ndGggPiAwKSB7XG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCBpbnNlcnRDYW5kbGVzKHN5bWJvbCwgdGYsIGNhbmRsZXMpXG4gICAgICAgIGRlYnVnKCdpbnNlcnRlZCAlcyBjYW5kbGVzIGludG8gJXMnLCBjYW5kbGVzLmxlbmd0aCwgdGYpXG4gICAgICAgIGxhc3RDYW5kbGVNVFMgPSBfbGFzdChjYW5kbGVzKS5vcGVuVGltZVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYXB0dXJlLmV4Y2VwdGlvbihlKVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjYW5kbGVzLmxlbmd0aCA8IDEwMDApIHsgLy8gZmV0Y2ggbGltaXQgaXMgMWtcbiAgICAgIGRlYnVnKCdzeW5jIGZvciAlcyAlcyBmaW5pc2hlZCcsIHN5bWJvbCwgdGYpXG4gICAgICBhd2FpdCBvbkZpbmlzaFN5bmMoc3ltYm9sLCB0ZilcbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG59XG4iXX0=