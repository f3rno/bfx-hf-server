'use strict';

const capture = require('../capture');
const validExchange = require('../util/valid_exchange');
const propagateData = require('./propagate_data');
const getAdapter = require('./get_adapter');

/**
                                              * @param {object} pool - exchange pool state
                                              * @param {string} exID - exchange ID
                                              * @returns {object} client
                                              */
module.exports = (pool, exID) => {
  const { d, exchangeClients } = pool;

  if (!validExchange(exID)) {
    capture.exception('can\'t add unknown exchange: %s', exID);
    return null;
  }

  const EXA = getAdapter(exID);
  const ex = new EXA();

  if (ex.openWS) {
    ex.openWS();
  }

  ex.onData((chanID, data) => {
    propagateData(pool, exID, chanID, data);
  });

  exchangeClients[exID] = ex;
  d('added exchange %s to pool', exID);

  return ex;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9leF9wb29sL2FkZF9jbGllbnQuanMiXSwibmFtZXMiOlsiY2FwdHVyZSIsInJlcXVpcmUiLCJ2YWxpZEV4Y2hhbmdlIiwicHJvcGFnYXRlRGF0YSIsImdldEFkYXB0ZXIiLCJtb2R1bGUiLCJleHBvcnRzIiwicG9vbCIsImV4SUQiLCJkIiwiZXhjaGFuZ2VDbGllbnRzIiwiZXhjZXB0aW9uIiwiRVhBIiwiZXgiLCJvcGVuV1MiLCJvbkRhdGEiLCJjaGFuSUQiLCJkYXRhIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxNQUFNQSxPQUFPLEdBQUdDLE9BQU8sQ0FBQyxZQUFELENBQXZCO0FBQ0EsTUFBTUMsYUFBYSxHQUFHRCxPQUFPLENBQUMsd0JBQUQsQ0FBN0I7QUFDQSxNQUFNRSxhQUFhLEdBQUdGLE9BQU8sQ0FBQyxrQkFBRCxDQUE3QjtBQUNBLE1BQU1HLFVBQVUsR0FBR0gsT0FBTyxDQUFDLGVBQUQsQ0FBMUI7O0FBRUE7Ozs7O0FBS0FJLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixDQUFDQyxJQUFELEVBQU9DLElBQVAsS0FBZ0I7QUFDL0IsUUFBTSxFQUFFQyxDQUFGLEVBQUtDLGVBQUwsS0FBeUJILElBQS9COztBQUVBLE1BQUksQ0FBQ0wsYUFBYSxDQUFDTSxJQUFELENBQWxCLEVBQTBCO0FBQ3hCUixJQUFBQSxPQUFPLENBQUNXLFNBQVIsQ0FBa0IsaUNBQWxCLEVBQXFESCxJQUFyRDtBQUNBLFdBQU8sSUFBUDtBQUNEOztBQUVELFFBQU1JLEdBQUcsR0FBR1IsVUFBVSxDQUFDSSxJQUFELENBQXRCO0FBQ0EsUUFBTUssRUFBRSxHQUFHLElBQUlELEdBQUosRUFBWDs7QUFFQSxNQUFJQyxFQUFFLENBQUNDLE1BQVAsRUFBZTtBQUNiRCxJQUFBQSxFQUFFLENBQUNDLE1BQUg7QUFDRDs7QUFFREQsRUFBQUEsRUFBRSxDQUFDRSxNQUFILENBQVUsQ0FBQ0MsTUFBRCxFQUFTQyxJQUFULEtBQWtCO0FBQzFCZCxJQUFBQSxhQUFhLENBQUNJLElBQUQsRUFBT0MsSUFBUCxFQUFhUSxNQUFiLEVBQXFCQyxJQUFyQixDQUFiO0FBQ0QsR0FGRDs7QUFJQVAsRUFBQUEsZUFBZSxDQUFDRixJQUFELENBQWYsR0FBd0JLLEVBQXhCO0FBQ0FKLEVBQUFBLENBQUMsQ0FBQywyQkFBRCxFQUE4QkQsSUFBOUIsQ0FBRDs7QUFFQSxTQUFPSyxFQUFQO0FBQ0QsQ0F2QkQiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgY2FwdHVyZSA9IHJlcXVpcmUoJy4uL2NhcHR1cmUnKVxuY29uc3QgdmFsaWRFeGNoYW5nZSA9IHJlcXVpcmUoJy4uL3V0aWwvdmFsaWRfZXhjaGFuZ2UnKVxuY29uc3QgcHJvcGFnYXRlRGF0YSA9IHJlcXVpcmUoJy4vcHJvcGFnYXRlX2RhdGEnKVxuY29uc3QgZ2V0QWRhcHRlciA9IHJlcXVpcmUoJy4vZ2V0X2FkYXB0ZXInKVxuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBwb29sIC0gZXhjaGFuZ2UgcG9vbCBzdGF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IGV4SUQgLSBleGNoYW5nZSBJRFxuICogQHJldHVybnMge29iamVjdH0gY2xpZW50XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gKHBvb2wsIGV4SUQpID0+IHtcbiAgY29uc3QgeyBkLCBleGNoYW5nZUNsaWVudHMgfSA9IHBvb2xcblxuICBpZiAoIXZhbGlkRXhjaGFuZ2UoZXhJRCkpIHtcbiAgICBjYXB0dXJlLmV4Y2VwdGlvbignY2FuXFwndCBhZGQgdW5rbm93biBleGNoYW5nZTogJXMnLCBleElEKVxuICAgIHJldHVybiBudWxsXG4gIH1cblxuICBjb25zdCBFWEEgPSBnZXRBZGFwdGVyKGV4SUQpXG4gIGNvbnN0IGV4ID0gbmV3IEVYQSgpXG5cbiAgaWYgKGV4Lm9wZW5XUykge1xuICAgIGV4Lm9wZW5XUygpXG4gIH1cblxuICBleC5vbkRhdGEoKGNoYW5JRCwgZGF0YSkgPT4ge1xuICAgIHByb3BhZ2F0ZURhdGEocG9vbCwgZXhJRCwgY2hhbklELCBkYXRhKVxuICB9KVxuXG4gIGV4Y2hhbmdlQ2xpZW50c1tleElEXSA9IGV4XG4gIGQoJ2FkZGVkIGV4Y2hhbmdlICVzIHRvIHBvb2wnLCBleElEKVxuXG4gIHJldHVybiBleFxufVxuIl19