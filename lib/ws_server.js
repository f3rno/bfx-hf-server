'use strict';

const WS = require('ws');
const Debug = require('debug');
const _isArray = require('lodash/isArray');

const nonce = require('./util/nonce');
const sendError = require('./util/ws/send_error');

module.exports = class WSServer {
  /**
                                  * @param {object} args - args
                                  * @param {object} [args.server] - server
                                  * @param {number} args.port - port
                                  * @param {string} args.debugName - debug() scope suffix
                                  * @param {object} args.msgHandlers - handlers for server messages
                                  */
  constructor({ server, port, debugName, msgHandlers }) {
    this.d = Debug(`bfx:hf:server:ws-server:${debugName}`);
    this._msgHandlers = msgHandlers;

    this._wss = null;
    this._server = server;
    this._port = port;
    this._name = debugName;
  }

  open() {
    if (this._wss) {
      throw new Error('already open');
    }

    if (this._port) {
      this.d('starting on port %d', this._port);
    } else {
      this.d('starting up');
    }

    this._wss = new WS.Server({
      server: this._server,
      port: this._port });


    this._wss.on('connection', this.onWSSConnection.bind(this));
  }

  close() {
    if (!this._wss) {
      throw new Error('already closed');
    }

    this._wss.close();
    this._wss = null;
  }

  onWSSConnection(ws) {
    ws.id = nonce();
    ws.on('message', this.onWSMessage.bind(this, ws));
    ws.on('close', this.onWSClose.bind(this, ws));

    this.d('client %s connected', ws.id);
  }

  onWSClose(ws) {
    this.d('client %s disconnected', ws.id);
  }

  onWSMessage(ws, msgJSON) {
    let msg;

    try {
      msg = JSON.parse(msgJSON);
    } catch (e) {
      return sendError(ws, 'invalid message JSON');
    }

    if (!_isArray(msg)) {
      return sendError(ws, 'message not array');
    }

    this.handleWSMessage(ws, msg).catch(e => {
      sendError(ws, e.message);
    });
  }

  async handleWSMessage(ws, msg) {
    const [type] = msg;
    const handler = this._msgHandlers[type];

    if (handler) {
      await handler(this, ws, msg);
    }
  }};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy93c19zZXJ2ZXIuanMiXSwibmFtZXMiOlsiV1MiLCJyZXF1aXJlIiwiRGVidWciLCJfaXNBcnJheSIsIm5vbmNlIiwic2VuZEVycm9yIiwibW9kdWxlIiwiZXhwb3J0cyIsIldTU2VydmVyIiwiY29uc3RydWN0b3IiLCJzZXJ2ZXIiLCJwb3J0IiwiZGVidWdOYW1lIiwibXNnSGFuZGxlcnMiLCJkIiwiX21zZ0hhbmRsZXJzIiwiX3dzcyIsIl9zZXJ2ZXIiLCJfcG9ydCIsIl9uYW1lIiwib3BlbiIsIkVycm9yIiwiU2VydmVyIiwib24iLCJvbldTU0Nvbm5lY3Rpb24iLCJiaW5kIiwiY2xvc2UiLCJ3cyIsImlkIiwib25XU01lc3NhZ2UiLCJvbldTQ2xvc2UiLCJtc2dKU09OIiwibXNnIiwiSlNPTiIsInBhcnNlIiwiZSIsImhhbmRsZVdTTWVzc2FnZSIsImNhdGNoIiwibWVzc2FnZSIsInR5cGUiLCJoYW5kbGVyIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxNQUFNQSxFQUFFLEdBQUdDLE9BQU8sQ0FBQyxJQUFELENBQWxCO0FBQ0EsTUFBTUMsS0FBSyxHQUFHRCxPQUFPLENBQUMsT0FBRCxDQUFyQjtBQUNBLE1BQU1FLFFBQVEsR0FBR0YsT0FBTyxDQUFDLGdCQUFELENBQXhCOztBQUVBLE1BQU1HLEtBQUssR0FBR0gsT0FBTyxDQUFDLGNBQUQsQ0FBckI7QUFDQSxNQUFNSSxTQUFTLEdBQUdKLE9BQU8sQ0FBQyxzQkFBRCxDQUF6Qjs7QUFFQUssTUFBTSxDQUFDQyxPQUFQLEdBQWlCLE1BQU1DLFFBQU4sQ0FBZTtBQUM5Qjs7Ozs7OztBQU9BQyxFQUFBQSxXQUFXLENBQUUsRUFBRUMsTUFBRixFQUFVQyxJQUFWLEVBQWdCQyxTQUFoQixFQUEyQkMsV0FBM0IsRUFBRixFQUE0QztBQUNyRCxTQUFLQyxDQUFMLEdBQVNaLEtBQUssQ0FBRSwyQkFBMEJVLFNBQVUsRUFBdEMsQ0FBZDtBQUNBLFNBQUtHLFlBQUwsR0FBb0JGLFdBQXBCOztBQUVB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aEMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgV1MgPSByZXF1aXJlKCd3cycpXG5jb25zdCBEZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJylcbmNvbnN0IF9pc0FycmF5ID0gcmVxdWlyZSgnbG9kYXNoL2lzQXJyYXknKVxuXG5jb25zdCBub25jZSA9IHJlcXVpcmUoJy4vdXRpbC9ub25jZScpXG5jb25zdCBzZW5kRXJyb3IgPSByZXF1aXJlKCcuL3V0aWwvd3Mvc2VuZF9lcnJvcicpXG5cbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgV1NTZXJ2ZXIge1xuICAvKipcbiAgICogQHBhcmFtIHtvYmplY3R9IGFyZ3MgLSBhcmdzXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbYXJncy5zZXJ2ZXJdIC0gc2VydmVyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBhcmdzLnBvcnQgLSBwb3J0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBhcmdzLmRlYnVnTmFtZSAtIGRlYnVnKCkgc2NvcGUgc3VmZml4XG4gICAqIEBwYXJhbSB7b2JqZWN0fSBhcmdzLm1zZ0hhbmRsZXJzIC0gaGFuZGxlcnMgZm9yIHNlcnZlciBtZXNzYWdlc1xuICAgKi9cbiAgY29uc3RydWN0b3IgKHsgc2VydmVyLCBwb3J0LCBkZWJ1Z05hbWUsIG1zZ0hhbmRsZXJzIH0pIHtcbiAgICB0aGlzLmQgPSBEZWJ1ZyhgYmZ4OmhmOnNlcnZlcjp3cy1zZXJ2ZXI6JHtkZWJ1Z05hbWV9YClcbiAgICB0aGlzLl9tc2dIYW5kbGVycyA9IG1zZ0hhbmRsZXJzXG5cbiAgICB0aGlzLl93c3MgPSBudWxsXG4gICAgdGhpcy5fc2VydmVyID0gc2VydmVyXG4gICAgdGhpcy5fcG9ydCA9IHBvcnRcbiAgICB0aGlzLl9uYW1lID0gZGVidWdOYW1lXG4gIH1cblxuICBvcGVuICgpIHtcbiAgICBpZiAodGhpcy5fd3NzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2FscmVhZHkgb3BlbicpXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3BvcnQpIHtcbiAgICAgIHRoaXMuZCgnc3RhcnRpbmcgb24gcG9ydCAlZCcsIHRoaXMuX3BvcnQpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZCgnc3RhcnRpbmcgdXAnKVxuICAgIH1cblxuICAgIHRoaXMuX3dzcyA9IG5ldyBXUy5TZXJ2ZXIoe1xuICAgICAgc2VydmVyOiB0aGlzLl9zZXJ2ZXIsXG4gICAgICBwb3J0OiB0aGlzLl9wb3J0XG4gICAgfSlcblxuICAgIHRoaXMuX3dzcy5vbignY29ubmVjdGlvbicsIHRoaXMub25XU1NDb25uZWN0aW9uLmJpbmQodGhpcykpXG4gIH1cblxuICBjbG9zZSAoKSB7XG4gICAgaWYgKCF0aGlzLl93c3MpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignYWxyZWFkeSBjbG9zZWQnKVxuICAgIH1cblxuICAgIHRoaXMuX3dzcy5jbG9zZSgpXG4gICAgdGhpcy5fd3NzID0gbnVsbFxuICB9XG5cbiAgb25XU1NDb25uZWN0aW9uICh3cykge1xuICAgIHdzLmlkID0gbm9uY2UoKVxuICAgIHdzLm9uKCdtZXNzYWdlJywgdGhpcy5vbldTTWVzc2FnZS5iaW5kKHRoaXMsIHdzKSlcbiAgICB3cy5vbignY2xvc2UnLCB0aGlzLm9uV1NDbG9zZS5iaW5kKHRoaXMsIHdzKSlcblxuICAgIHRoaXMuZCgnY2xpZW50ICVzIGNvbm5lY3RlZCcsIHdzLmlkKVxuICB9XG5cbiAgb25XU0Nsb3NlICh3cykge1xuICAgIHRoaXMuZCgnY2xpZW50ICVzIGRpc2Nvbm5lY3RlZCcsIHdzLmlkKVxuICB9XG5cbiAgb25XU01lc3NhZ2UgKHdzLCBtc2dKU09OKSB7XG4gICAgbGV0IG1zZ1xuXG4gICAgdHJ5IHtcbiAgICAgIG1zZyA9IEpTT04ucGFyc2UobXNnSlNPTilcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gc2VuZEVycm9yKHdzLCAnaW52YWxpZCBtZXNzYWdlIEpTT04nKVxuICAgIH1cblxuICAgIGlmICghX2lzQXJyYXkobXNnKSkge1xuICAgICAgcmV0dXJuIHNlbmRFcnJvcih3cywgJ21lc3NhZ2Ugbm90IGFycmF5JylcbiAgICB9XG5cbiAgICB0aGlzLmhhbmRsZVdTTWVzc2FnZSh3cywgbXNnKS5jYXRjaCgoZSkgPT4ge1xuICAgICAgc2VuZEVycm9yKHdzLCBlLm1lc3NhZ2UpXG4gICAgfSlcbiAgfVxuXG4gIGFzeW5jIGhhbmRsZVdTTWVzc2FnZSAod3MsIG1zZykge1xuICAgIGNvbnN0IFt0eXBlXSA9IG1zZ1xuICAgIGNvbnN0IGhhbmRsZXIgPSB0aGlzLl9tc2dIYW5kbGVyc1t0eXBlXVxuXG4gICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgIGF3YWl0IGhhbmRsZXIodGhpcywgd3MsIG1zZylcbiAgICB9XG4gIH1cbn1cbiJdfQ==