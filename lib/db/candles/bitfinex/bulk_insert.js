'use strict';

const _chunk = require('lodash/chunk');
const PI = require('p-iteration');

const dbRL = require('../../pg_rate_limited');
const tfToString = require('../../../exchange_clients/bitfinex/util/tf_to_string');

module.exports = async (symbol, tf, candles, transformed) => {
  return dbRL(async db => {
    return PI.forEachSeries(_chunk(candles, 1000), async chunk => {
      return db.transaction(trx => {
        return db(`bitfinex_candles_${tfToString(tf)}`).
        insert(chunk.map(c => ({
          symbol,
          mts: `${transformed ? c.mts : c[0]}`,
          open: `${transformed ? c.open : c[1]}`,
          close: `${transformed ? c.close : c[2]}`,
          high: `${transformed ? c.high : c[3]}`,
          low: `${transformed ? c.low : c[4]}`,
          volume: `${transformed ? c.volume : c[5]}`,
          key: `${symbol}-${transformed ? c.mts : c[0]}` }))).

        transacting(trx).
        then(trx.commit).
        catch(trx.rollback);
      });
    });
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9kYi9jYW5kbGVzL2JpdGZpbmV4L2J1bGtfaW5zZXJ0LmpzIl0sIm5hbWVzIjpbIl9jaHVuayIsInJlcXVpcmUiLCJQSSIsImRiUkwiLCJ0ZlRvU3RyaW5nIiwibW9kdWxlIiwiZXhwb3J0cyIsInN5bWJvbCIsInRmIiwiY2FuZGxlcyIsInRyYW5zZm9ybWVkIiwiZGIiLCJmb3JFYWNoU2VyaWVzIiwiY2h1bmsiLCJ0cmFuc2FjdGlvbiIsInRyeCIsImluc2VydCIsIm1hcCIsImMiLCJtdHMiLCJvcGVuIiwiY2xvc2UiLCJoaWdoIiwibG93Iiwidm9sdW1lIiwia2V5IiwidHJhbnNhY3RpbmciLCJ0aGVuIiwiY29tbWl0IiwiY2F0Y2giLCJyb2xsYmFjayJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsTUFBTUEsTUFBTSxHQUFHQyxPQUFPLENBQUMsY0FBRCxDQUF0QjtBQUNBLE1BQU1DLEVBQUUsR0FBR0QsT0FBTyxDQUFDLGFBQUQsQ0FBbEI7O0FBRUEsTUFBTUUsSUFBSSxHQUFHRixPQUFPLENBQUMsdUJBQUQsQ0FBcEI7QUFDQSxNQUFNRyxVQUFVLEdBQUdILE9BQU8sQ0FBQyxzREFBRCxDQUExQjs7QUFFQUksTUFBTSxDQUFDQyxPQUFQLEdBQWlCLE9BQU9DLE1BQVAsRUFBZUMsRUFBZixFQUFtQkMsT0FBbkIsRUFBNEJDLFdBQTVCLEtBQTRDO0FBQzNELFNBQU9QLElBQUksQ0FBQyxNQUFPUSxFQUFQLElBQWM7QUFDeEIsV0FBT1QsRUFBRSxDQUFDVSxhQUFILENBQWlCWixNQUFNLENBQUNTLE9BQUQsRUFBVSxJQUFWLENBQXZCLEVBQXdDLE1BQU9JLEtBQVAsSUFBaUI7QUFDOUQsYUFBT0YsRUFBRSxDQUFDRyxXQUFILENBQWVDLEdBQUcsSUFBSTtBQUMzQixlQUFPSixFQUFFLENBQUUsb0JBQW1CUCxVQUFVLENBQUNJLEVBQUQsQ0FBSyxFQUFwQyxDQUFGO0FBQ0pRLFFBQUFBLE1BREksQ0FDR0gsS0FBSyxDQUFDSSxHQUFOLENBQVVDLENBQUMsS0FBSztBQUN0QlgsVUFBQUEsTUFEc0I7QUFFdEJZLFVBQUFBLEdBQUcsRUFBRyxHQUFFVCxXQUFXLEdBQUdRLENBQUMsQ0FBQ0MsR0FBTCxHQUFXRCxDQUFDLENBQUMsQ0FBRCxDQUFJLEVBRmI7QUFHdEJFLFVBQUFBLElBQUksRUFBRyxHQUFFVixXQUFXLEdBQUdRLENBQUMsQ0FBQ0UsSUFBTCxHQUFZRixDQUFDLENBQUMsQ0FBRCxDQUFJLEVBSGY7QUFJdEJHLFVBQUFBLEtBQUssRUFBRyxHQUFFWCxXQUFXLEdBQUdRLENBQUMsQ0FBQ0csS0FBTCxHQUFhSCxDQUFDLENBQUMsQ0FBRCxDQUFJLEVBSmpCO0FBS3RCSSxVQUFBQSxJQUFJLEVBQUcsR0FBRVosV0FBVyxHQUFHUSxDQUFDLENBQUNJLElBQUwsR0FBWUosQ0FBQyxDQUFDLENBQUQsQ0FBSSxFQUxmO0FBTXRCSyxVQUFBQSxHQUFHLEVBQUcsR0FBRWIsV0FBVyxHQUFHUSxDQUFDLENBQUNLLEdBQUwsR0FBV0wsQ0FBQyxDQUFDLENBQUQsQ0FBSSxFQU5iO0FBT3RCTSxVQUFBQSxNQUFNLEVBQUcsR0FBRWQsV0FBVyxHQUFHUSxDQUFDLENBQUNNLE1BQUwsR0FBY04sQ0FBQyxDQUFDLENBQUQsQ0FBSSxFQVBuQjtBQVF0Qk8sVUFBQUEsR0FBRyxFQUFHLEdBQUVsQixNQUFPLElBQUdHLFdBQVcsR0FBR1EsQ0FBQyxDQUFDQyxHQUFMLEdBQVdELENBQUMsQ0FBQyxDQUFELENBQUksRUFSdkIsRUFBTCxDQUFYLENBREg7O0FBV0pRLFFBQUFBLFdBWEksQ0FXUVgsR0FYUjtBQVlKWSxRQUFBQSxJQVpJLENBWUNaLEdBQUcsQ0FBQ2EsTUFaTDtBQWFKQyxRQUFBQSxLQWJJLENBYUVkLEdBQUcsQ0FBQ2UsUUFiTixDQUFQO0FBY0QsT0FmTSxDQUFQO0FBZ0JELEtBakJNLENBQVA7QUFrQkQsR0FuQlUsQ0FBWDtBQW9CRCxDQXJCRCIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5jb25zdCBfY2h1bmsgPSByZXF1aXJlKCdsb2Rhc2gvY2h1bmsnKVxuY29uc3QgUEkgPSByZXF1aXJlKCdwLWl0ZXJhdGlvbicpXG5cbmNvbnN0IGRiUkwgPSByZXF1aXJlKCcuLi8uLi9wZ19yYXRlX2xpbWl0ZWQnKVxuY29uc3QgdGZUb1N0cmluZyA9IHJlcXVpcmUoJy4uLy4uLy4uL2V4Y2hhbmdlX2NsaWVudHMvYml0ZmluZXgvdXRpbC90Zl90b19zdHJpbmcnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFzeW5jIChzeW1ib2wsIHRmLCBjYW5kbGVzLCB0cmFuc2Zvcm1lZCkgPT4ge1xuICByZXR1cm4gZGJSTChhc3luYyAoZGIpID0+IHtcbiAgICByZXR1cm4gUEkuZm9yRWFjaFNlcmllcyhfY2h1bmsoY2FuZGxlcywgMTAwMCksIGFzeW5jIChjaHVuaykgPT4ge1xuICAgICAgcmV0dXJuIGRiLnRyYW5zYWN0aW9uKHRyeCA9PiB7XG4gICAgICAgIHJldHVybiBkYihgYml0ZmluZXhfY2FuZGxlc18ke3RmVG9TdHJpbmcodGYpfWApXG4gICAgICAgICAgLmluc2VydChjaHVuay5tYXAoYyA9PiAoe1xuICAgICAgICAgICAgc3ltYm9sLFxuICAgICAgICAgICAgbXRzOiBgJHt0cmFuc2Zvcm1lZCA/IGMubXRzIDogY1swXX1gLFxuICAgICAgICAgICAgb3BlbjogYCR7dHJhbnNmb3JtZWQgPyBjLm9wZW4gOiBjWzFdfWAsXG4gICAgICAgICAgICBjbG9zZTogYCR7dHJhbnNmb3JtZWQgPyBjLmNsb3NlIDogY1syXX1gLFxuICAgICAgICAgICAgaGlnaDogYCR7dHJhbnNmb3JtZWQgPyBjLmhpZ2ggOiBjWzNdfWAsXG4gICAgICAgICAgICBsb3c6IGAke3RyYW5zZm9ybWVkID8gYy5sb3cgOiBjWzRdfWAsXG4gICAgICAgICAgICB2b2x1bWU6IGAke3RyYW5zZm9ybWVkID8gYy52b2x1bWUgOiBjWzVdfWAsXG4gICAgICAgICAgICBrZXk6IGAke3N5bWJvbH0tJHt0cmFuc2Zvcm1lZCA/IGMubXRzIDogY1swXX1gXG4gICAgICAgICAgfSkpKVxuICAgICAgICAgIC50cmFuc2FjdGluZyh0cngpXG4gICAgICAgICAgLnRoZW4odHJ4LmNvbW1pdClcbiAgICAgICAgICAuY2F0Y2godHJ4LnJvbGxiYWNrKVxuICAgICAgfSlcbiAgICB9KVxuICB9KVxufVxuIl19